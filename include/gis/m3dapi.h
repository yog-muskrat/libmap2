
#ifndef M3DAPI_H
#define M3DAPI_H

#include <vcl.h>
#include <gl.h>

#include "maptype.h"
#include "m3dtype.h"
#include "Rscfl3D.h"

//#define  LINUXAPI     // Тип системного интерфейса Linux

extern "C"
{
//  double _export m3dGetPixelPerMetr(HMAP3D hModel);  // временно

//---------------------------------------------------------------------------
// Создание контекста OPENGL для заданного контекста GDI
// !!!!! После окончания использования обязателен вызов m3dDeleteContext
//    Вход:
//              hdc - GDI контекст окна рисования
//       clearFlag  - флаг очистки буферов OpenGL:
//                      0 - не чистить,
//                      GL_ALL_BUFFER_BIT - чистить все(стандарт),
//                      следующие флажки могут быть заданы вместе через
//                      знак логического "или"(|):
//                      GL_COLOR_BUFFER_BIT - чистить буфер цвета,
//                      GL_DEPTH_BUFFER_BIT - чистить буфер глубины,
//                      GL_STENCIL_BUFFER_BIT - чистить буфер вырезки,
//                      GL_ACCUM_BUFFER_BIT - чистить буфер накопления.
//       clearColor - цвет очистки фона окна или ноль(цвет по умолчанию)
//             rect - прямоугольник рисования и(или) просмотра 3d-изображения
//  perspectiveSize - максимальная возможная видимость трехмерного
//                    изображения при его удалении (размер перспективы)
//                    или ноль(установка по умолчанию 10000 м)
//    Возвращаемое значение: идентификатор описания 3d-рисования
//---------------------------------------------------------------------------
HM3D _export WINAPI m3dCreateContext(HDC hdc, unsigned long int clearFlag, IMG3DRGBA* clearColor,
                                     RECTVIEWPORT* rect, double perspectiveSize);

//---------------------------------------------------------------------------
// Удаление контекста OPENGL
//    Вход: hM3D - идентификатор описания 3d-рисования
//---------------------------------------------------------------------------
void _export WINAPI m3dDeleteContext(HM3D hM3D);

//--------------------------------------------------------------------------
// Установить текущий контекст
//    Вход: hM3D - идентификатор описания 3d-рисования
//    Возвращаемое значение: 0 - при ошибке, 1 - если все хорошо
//--------------------------------------------------------------------------
long _export WINAPI m3dSetContext(HM3D hM3D);

//--------------------------------------------------------------------------
// Установить флаг очистки буферов OpenGL
//    Вход:   hM3D - идентификатор описания 3d-рисования
//       clearFlag - флаг очистки буферов OpenGL:
//                      0 - не чистить,
//                      GL_ALL_BUFFER_BIT - чистить все(стандарт),
//                      следующие флажки могут быть заданы вместе через
//                      знак логического "или"(|):
//                      GL_COLOR_BUFFER_BIT - чистить буфер цвета,
//                      GL_DEPTH_BUFFER_BIT - чистить буфер глубины,
//                      GL_STENCIL_BUFFER_BIT - чистить буфер вырезки,
//                      GL_ACCUM_BUFFER_BIT - чистить буфер накопления.
//    Возвращаемое значение:
//        0 - при ошибке, 1 - если все хорошо
//--------------------------------------------------------------------------
long _export WINAPI m3dSetClearBuffers(HM3D hM3D, unsigned long int clearFlag);

//--------------------------------------------------------------------------
// Установить цвет очистки фона при 3D-рисовании
//    Вход:
//            hM3D - идентификатор описания 3d-рисования
//      clearColor - цвет очистки фона окна или ноль(цвет по умолчанию)
//    Возвращаемое значение:
//        0 - при ошибке, 1 - если все хорошо
//--------------------------------------------------------------------------
long _export WINAPI m3dSetClearColor(HM3D hM3D, IMG3DRGBA* clearColor);

//--------------------------------------------------------------------------
// Установка максимальной возможной видимости трехмерного изображения
// при его удалении (размер перспективы)
//    Вход:
//             hM3D - идентификатор описания 3d-рисования
//  perspectiveSize - максимальная возможная видимость трехмерного
//                    изображения при его удалении (размер перспективы)
//
//    Возвращаемое значение: 0 - при ошибке или старый размер перспективы
//--------------------------------------------------------------------------
double _export WINAPI m3dSetPerspectiveSize(HM3D hM3D, double perspectiveSize);

//--------------------------------------------------------------------------
// Установить тип проекции отображения трехмерного изображения
//    Вход:
//            hM3D - идентификатор описания 3d-рисования
//     projectType - тип проекции отображения 3d-модели
//                   (0 - перспективная (установлена по умолчанию),
//                    1 - ортогональная)
//    Возвращаемое значение:
//        0 - при ошибке, 1 - если все хорошо
//--------------------------------------------------------------------------
long _export WINAPI m3dSetProjectType(HM3D hM3D, long int projectType);

//--------------------------------------------------------------------------
// Изменение поля 3D-рисования (в частности при изменении размеров окна)
//    Вход:
//      hM3D - идентификатор описания 3d-рисования
//      rect - прямоугольник рисования и(или) просмотра 3d-изображения
//      projectType - тип проекции построения 3d-модели (0 - перспективная,
//                                                       1 - ортогональная)
//
//    Возвращаемое значение: новый угол обзора(в градусах), 0 - при ошибке
//--------------------------------------------------------------------------
long _export WINAPI m3dViewportResize(HM3D hM3D, RECTVIEWPORT* rect);

//--------------------------------------------------------------------------
// Начало рисования при перерисовке окна
// !!!!! После завершения рисования необходим вызов m3dEndPaint
//    Вход: hM3D - идентификатор описания 3d-рисования
//    Возвращаемое значение:
//        0 - при ошибке, 1 - если все хорошо
//--------------------------------------------------------------------------
long _export WINAPI m3dBeginPaint(HM3D hM3D);

//--------------------------------------------------------------------------
// Завершение рисования при перерисовке окна
//    Вход: hM3D - идентификатор описания 3d-рисования
//    Возвращаемое значение: 0 - при ошибке, 1 - если все хорошо
//--------------------------------------------------------------------------
long _export WINAPI m3dEndPaint(HM3D hM3D);


//****************************************************************************

//---------------------------------------------------------------------------
// Создание 3D-модели карты с параметрами по умолчанию
// !!!!! После окончания использования обязателен вызов m3dDelete
//   Вход:
//        openData - адрес структуры с данными для открытия модели
//        data3D   - адрес структуры с описанием открытиого в 3D района
//   Возвращаемое значение:
//        идентификатор описания созданной модели
//---------------------------------------------------------------------------
HMAP3D _export WINAPI m3dCreateDefault(M3D_OPENDATA* openData, M3D_DATA* data3D);

//---------------------------------------------------------------------------
// Создание 3D-модели карты
// !!!!! После окончания использования обязателен вызов m3dDelete
//   Вход:
//        hWnd - идентификатор окна для посылки сообщений
//               от функций построения 3D-модели
//   Возвращаемое значение:
//        идентификатор описания созданной модели
//---------------------------------------------------------------------------
HMAP3D _export WINAPI m3dCreate(HWND hWnd);

//--------------------------------------------------------------------------
// Удаление 3D-модели карты
//   Вход:
//     hModel - идентификатор описания созданной модели
//--------------------------------------------------------------------------
void _export WINAPI m3dDelete(HMAP3D hModel);

//--------------------------------------------------------------------------
// Открытие данных для рисования
// Определить необходимые для построения трехмерной модели параметры
// по уже открытым данным (hdata)
// !!!!! После окончания использования обязателен вызов m3dCloseData
//   Вход:
//     hModel - идентификатор описания созданной модели
//       hM3D - идентификатор описания 3d-рисования
//      hData - идентификатор открытых данных(карта, растр, матрица)
//      frame - габариты участка района, заданные для отображения в 3D-модели,
//              (в метрах на местности) или ноль(отображается весь район)
//   Возвращаемое значение:
//      0 - параметры не установлены,
//      1 - все хорошо
//--------------------------------------------------------------------------
long _export WINAPI m3dOpenData(HMAP3D hModel, HM3D hM3D, HMAP hdata, DFRAME* frame=0);

//--------------------------------------------------------------------------
// Закрытие всех открытых данных
//   Вход:
//     hModel - идентификатор описания созданной модели
//--------------------------------------------------------------------------
void _export WINAPI m3dCloseData(HMAP3D hModel);

//--------------------------------------------------------------------------
// Установка параметров рисования по умолчанию (кроме обязательных параметров,
// которые заполняются пользователем (RECTVIEWPORT - прямоугольник рисования
// и(или) просмотра 3d-изображения))
// !!!!! Необходимо наличие открытых для построения 3D-модели данных
//   Вход:
//     hModel - идентификатор описания созданной модели
//       parm - адрес пустой структуры для заполнения ее параметрами рисования
//              3d-модели по умолчанию
//   Возвращаемое значение:
//      0 - параметры не заполнены, 1 - все хорошо
//--------------------------------------------------------------------------
long _export WINAPI m3dSetDefaultParams(HMAP3D hModel, M3D_PAINTPARM* parm);

//--------------------------------------------------------------------------
// Возвращает параметры рисования 3D-модели на выделенный адрес
// (M3D_PAINTPARM* parm)
//--------------------------------------------------------------------------
long _export WINAPI m3dGetParams(HMAP3D hModel, M3D_PAINTPARM* parm);

//----------------------------------------------------------------------------
// Проверить изменения параметров рисования 3D-модели
//   Вход:
//       parm - параметры рисования 3d-модели
//   Возвращаемое значение:
//      0 - параметры не изменились, 1 - параметры изменились
// При ошибке возвращает 0
//----------------------------------------------------------------------------
long _export WINAPI m3dCheckParamsChange(HMAP3D hModel, M3D_PAINTPARM* parm);

//--------------------------------------------------------------------------
// Инициализация рисования 3D-модели
//   Вход:
//     hModel - идентификатор описания созданной модели
//       parm - параметры рисования 3d-модели, устанавливаемые пользователем
//       hM3D - идентификатор описания 3d-рисования
//       rect - прямоугольник рисования и(или) просмотра 3d-изображения
//   Возвращаемое значение:
//       0 - при ошибке, 1 - если все хорошо
//--------------------------------------------------------------------------
long _export WINAPI m3dInitPaintModel(HMAP3D hModel, M3D_PAINTPARM* parm, HM3D hM3D, RECTVIEWPORT* rect);

//--------------------------------------------------------------------------
// Рисование 3D-модели
//   Вход:
//     hModel - идентификатор описания созданной модели
//       parm - параметры рисования 3d-модели, устанавливаемые пользователем
//   Возвращаемое значение:
//      -1 - рисование закрыто,
//       0 - при попытке закрытия пользователем,
//       1 - если все хорошо
//--------------------------------------------------------------------------
long int _export WINAPI m3dPaintModel(HMAP3D hModel, M3D_PAINTPARM* parm);

//--------------------------------------------------------------------------
// Изменение качества поверхности (изменение размера фоновых текстур)
//   Вход:
//     hModel - идентификатор описания созданной модели
//       parm - параметры рисования 3d-модели, устанавливаемые пользователем
//   Возвращаемое значение:
//      -1 - качество осталось прежним
//       0 - качество не установлено, ошибки инициализации
//       1 - качество установлено
//--------------------------------------------------------------------------
long int _export WINAPI m3dSetQualitySurface(HMAP3D hModel, M3D_PAINTPARM* parm);

//--------------------------------------------------------------------------
// Изменение поля 3D-рисования модели карты (в частности при изменении
// размеров окна)
//    Вход:
//     hModel - идентификатор описания 3D-модели карты
//       rect - прямоугольник рисования и(или) просмотра 3d-изображения
//
//    Возвращаемое значение: 0 - при ошибке, 1 - если все хорошо
//--------------------------------------------------------------------------
long _export WINAPI m3dModelResize(HMAP3D hModel, RECTVIEWPORT* rect);

//--------------------------------------------------------------------------
// Установить тип проекции 3D-рисования модели карты
//    Вход:
//     hModel - идентификатор описания 3D-модели карты
//     projectType - тип проекции отображения 3d-модели
//                   (0 - перспективная (установлена по умолчанию),
//                    1 - ортогональная)
//
//    Возвращаемое значение: 0 - при ошибке, 1 - если все хорошо
//--------------------------------------------------------------------------
long _export WINAPI m3dSetModelProjectType(HMAP3D hModel, long int projectType);

//--------------------------------------------------------------------------
// Запросить тип проекции 3D-рисования модели карты
//    Вход:
//     hModel - идентификатор описания 3D-модели карты
//
//    Возвращаемое значение: тип проекции отображения 3d-модели
//                          (0 - перспективная (установлена по умолчанию),
//                           1 - ортогональная)
//--------------------------------------------------------------------------
long _export WINAPI m3dGetModelProjectType(HMAP3D hModel);

//--------------------------------------------------------------------------
// Изменение объекта на 3D-модели при изменении его характеристик на
// двумерной карте (после функции надо сделать перерисовку модели)
//   Вход:
//     changeinfo - адрес структура с описанием объекта и произведенной
//                  над ним операции
//   Возвращаемое значение: 0 - при ошибке, 1 - если все хорошо
//--------------------------------------------------------------------------
long _export WINAPI m3dChangeObject(HMAP3D hModel, CHANGEINFO* changeinfo);

//--------------------------------------------------------------------------
// Возвращает заполненую структуру описания района, отображаемого
// на 3D-модели, адрес которой задается в качестве параметра.
//  Возвращаемое значение: 0 - при ошибке, 1 - если все хорошо.
//--------------------------------------------------------------------------
long _export WINAPI m3dGetData3D(HMAP3D hModel, M3D_DATA* data);


//****************************************************************************

//-----------------------------------------------------------------------------
// Создание объекта для 3D-рисования
//  !!!после использования объект обязательно удалить с помощью m3dDeleteObject
//  Вход:
//    hMap         - идентификатор открытой карты, для которой создается объект
//    local        - локализация создаваемого объекта:
//    data         - адрес массива объектов типа XYHDOUBLE с координатами точек
//                   в метрах
//    countPoint   - адрес массива количества точек
//    count        - число ломаных (многоугольников)
//    sheetnumber  - номер листа, в котором будет расположен объект
//  Возвращаемое значение:
//    идентификатор созданного объекта или ноль при ошибке
//-----------------------------------------------------------------------------
HOBJ _export WINAPI m3dCreateObject(HMAP hMap, long local, XYHDOUBLE* data, long* countPoint,
                     long count, long sheetnumber);

//-----------------------------------------------------------------------------
// Создание временного объекта для 3D-рисования
//  !!!после использования объект обязательно удалить с помощью m3dDeleteObject
//  Вход:
//    hMap         - идентификатор открытой карты
//    local        - локализация создаваемого объекта:
//                   LOCAL_POINT - точечный, LOCAL_LINE - линейный,
//                   LOCAL_SQUARE - площадной (см. "maptype.h")
//    maxSizeImage - максимальный возможный размер изображения объекта(в метрах)
//  Возвращаемое значение:
//    идентификатор созданного объекта или ноль при ошибке
//-----------------------------------------------------------------------------
HOBJ _export WINAPI m3dCreateTempObject(HMAP hMap, long local, long maxSizeImage);

//-----------------------------------------------------------------------------
// Удаление 3D-объекта
//  Вход:
//    inObj - идентификатор созданного объекта
//-----------------------------------------------------------------------------
void _export WINAPI m3dDeleteObject(HOBJ inObj);


//****************************************************************************

//-----------------------------------------------------------------------------
// Инициализация рисования примера объекта(или группы объектов)
//  При рисовании нескольких(группы) объектов в одно окно все ниже перечисленные
//  параметры являются одинаковыми для всех объектов.
// !!!!! После окончания использования обязателен вызов m3dClosePaintExampleObject
//  Вход:
//    hM3D         - идентификатор описания 3d-рисования
//    maxSizeImage - максимальный возможный размер изображения объекта(в метрах)
//    rect         - адрес прямоугольника просмотра 3d-изображения для одного
//                   или группы примеров объектов
//    clearColor   - цвет очистки фона окна или ноль, если окно не чистить
//
//  Возвращаемое значение:
//    идентификатор описания параметров рисования 3d-изображения примера
//    объекта или ноль при ошибке
//-----------------------------------------------------------------------------
HEXOBJ3D _export WINAPI m3dInitPaintExampleObject(HM3D hM3D, float maxSizeImage, RECTVIEWPORT* rect,
                                   IMG3DRGBA* clearColor);

//-----------------------------------------------------------------------------
// Закрытие рисования примера объекта
//  Вход:
//    hExObj      - идентификатор описания параметров рисования 3d-изображения
//                  примера объекта
//-----------------------------------------------------------------------------
void _export WINAPI m3dClosePaintExampleObject(HEXOBJ3D hExObj);

//---------------------------------------------------------------------------
// Начало отображения примера объекта(объектов)
// !!!!! После завершения отображения примера объекта(объектов) необходим вызов
//       m3dEndPaintExampleObject
//  Вход:
//    hExObj - идентификатор описания параметров рисования 3d-изображения
//             примера объекта
//    rect   - адрес прямоугольника просмотра 3d-изображения для группы
//             примеров объектов, который включает в себя все отображаемые
//             объекты, или для одного объекта (или ноль - ничего не менять)
//  Возвращаемое значение:
//    1 - все хорошо , 0 - при ошибке
//---------------------------------------------------------------------------
long _export WINAPI m3dBeginPaintExampleObject(HEXOBJ3D hExObj, RECTVIEWPORT* rect);

//---------------------------------------------------------------------------
// Рисование примера объекта
//  Вход:
//    hObj        - идентификатор объекта рисования
//    hMap        - идентификатор карты
//    parmObj     - адрес начала описания изображения объекта(стр-ра F3DTREE)
//    countSelect - количество выделенных частей объекта
//    select      - массив описаний выделяемых частей изображения
//
//  Возвращаемое значение:
//    1 - все хорошо , 0 - при ошибке
//---------------------------------------------------------------------------
long _export WINAPI m3dPaintExampleObject(HOBJ hObj, HMAP hMap, char* parmObj,
                           HBINDTEX hBindTex,
                           long countSelect, SELECTPART* select);

//---------------------------------------------------------------------------
// Завершение отображения примера объекта(объектов)
//  Вход:
//    hExObj - идентификатор описания параметров рисования 3d-изображения
//             примера объекта
//    rect   - адрес прямоугольника просмотра 3d-изображения для группы
//             примеров объектов, который включает в себя все отображаемые
//             объекты, или для одного объекта, или ноль (ничего не менять)
//  Возвращаемое значение:
//    1 - все хорошо , 0 - при ошибке
//---------------------------------------------------------------------------
long _export WINAPI m3dEndPaintExampleObject(HEXOBJ3D hExObj, RECTVIEWPORT* rect);

//-----------------------------------------------------------------------------
// Изменение размеров изображения при рисовании примера объекта(или группы
// объектов)
//  При рисовании нескольких(группы) объектов в одно окно изменяется масштаб
//  всех изображений.
//
//  Вход:
//    hExObj       - идентификатор описания параметров рисования 3d-изображения
//                   примера объекта
//    maxSizeImage - новый максимальный размер изображения объекта(в метрах)
//
//  Возвращаемое значение: 1 - все хорошо, 0 - при ошибке
//-----------------------------------------------------------------------------
long _export WINAPI m3dChangeSizeExampleObject(HEXOBJ3D hExObj, float maxSizeImage);

//---------------------------------------------------------------------------
// Рисование осей координат
//  Вход:
//    sizeAxes   - размер осей координат
//    axesColor  - цвет осей координат
//---------------------------------------------------------------------------
void _export WINAPI m3dPaintAxes(float sizeAxes, IMG3DRGBA* axesColor=0);

//---------------------------------------------------------------------------
// Рисование координатной сетки
//  Вход:
//    sizeAxes   - размер осей координат
//    step       - шаг координатной сетки
//    gridColor  - цвет координатной сетки
//---------------------------------------------------------------------------
void _export WINAPI m3dPaintGrid(float sizeAxes, float step, IMG3DRGBA* gridColor=0);

//---------------------------------------------------------------------------
// Рисование точки начала координат знака
//  Вход:
//    point      - координаты точки начала координат знака в рисуемой модели
//    pointSize  - размер(диаметр) точки-сферы в метрах
//    pointColor - цвет точки или ноль(рисуем красным цветом)
//---------------------------------------------------------------------------
void _export WINAPI m3dPaintMarkBeginPoint(IMG3DPOINT point, double pointSize,
                            IMG3DRGBA* pointColor=0);

//---------------------------------------------------------------------------
// Рисование габаритов знака
//  Вход:
//    point    - координаты точки начала координат знака в рисуемой модели
//               (в метрах)
//    sizeMark - габариты знака(в метрах)
//    boxColor - цвет габаритной коробки или ноль(рисуем красным цветом)
//---------------------------------------------------------------------------
void _export WINAPI m3dPaintSizeMark(IMG3DPOINT point, IMG3DPOINT sizeMark,
                      IMG3DRGBA* boxColor=0);

//---------------------------------------------------------------------------
// Функция установки шага сетки выделения объекта
//    Вход:
//          step - шаг сетки выделения
//----------------------------------------------------------------------------
void _export WINAPI m3dSetStepGridSelect(float step);

//----------------------------------------------------------------------------
// Функция возврата шага сетки выделения объекта
//    Выход:  шаг сетки выделения
//----------------------------------------------------------------------------
float _export WINAPI m3dGetStepGridSelect();

//----------------------------------------------------------------------------
// Функция установки ширины линии сетки выделения объекта (в пикселах)
//    Вход:
//          widthLine - ширина линии сетки выделения
//----------------------------------------------------------------------------
void _export WINAPI m3dSetWidthLineGridSelect(long widthLine);

//----------------------------------------------------------------------------
// Функция возврата ширины линии сетки выделения объекта (в пикселах)
//    Выход:  ширина линии сетки выделения
//----------------------------------------------------------------------------
long _export WINAPI m3dGetWidthLineGridSelect();

//---------------------------------------------------------------------------
// Поворот изображения примера объекта вместе с системой координат
//  Вход:
//    hExObj       - идентификатор описания параметров рисования примера
//                   объекта
//    angle        - адрес описания произвольного угла поворота(угол задается
//                   относительно текущего положения системы координат),
//                   учитывается только если rotationFlag установлен в POS_ANY.
//    rotationFlag - флаг поворота в заданные позиции:
//                   POS_ANY   - поворот произвольный, определяется параметром
//                               angle
//                   POS_START - поворот в начальное положение
//                   POS_X     - положительная ось X вперед(на наблюдателя)
//                   POS_NX    - отрицательная ось X вперед
//                   POS_Y     - положительная ось Y вперед
//                   POS_NY    - отрицательная ось Y вперед
//                   POS_Z     - положительная ось Z вперед
//                   POS_NZ    - отрицательная ось Z вперед
//  Возвращаемое значение:
//                   0 - при ошибке, 1 - если все хорошо
//---------------------------------------------------------------------------
long _export WINAPI m3dRotationExampleObject(HEXOBJ3D hExObj, IMG3DROTATION* angle,
                              char rotationFlag=POS_ANY);

//---------------------------------------------------------------------------
// Масштабирование изображения примера объекта
//  Вход:
//    hExObj     - идентификатор описания параметров рисования примера
//                 объекта
//    kScale     - адрес структуры с коэффициентами масштабирования по осям
//                 X, Y, Z относительно текущего масштаба изображения
//    scaleFlag  - флаг изменения масштаба изображения:
//                 0 - произвольное масштабирование,
//                 1 - возвращение к исходному масштабу изображения, при этом
//                     значения kScale не учитываются
//  Возвращаемое значение:
//                 0 - при ошибке, 1 - если все хорошо
//---------------------------------------------------------------------------
long _export WINAPI m3dChangeScaleExampleObject(HEXOBJ3D hExObj, IMG3DSCALE* kScale,
                                 char scaleFlag);


//****************************************************************************

//---------------------------------------------------------------------------
// Рисование 3D-объекта
//  Вход:
//    ident       - структура с необходимыми для рисования идентификаторами
//
//  Возвращаемое значение:
//    1 - все хорошо , 0 - при ошибке
//---------------------------------------------------------------------------
long _export WINAPI m3dPaintObject(V3D_IDENT* ident);

//---------------------------------------------------------------------------
// Рисование 3D-объекта с возможностью выделения отдельных частей объекта
//  Вход:
//    ident       - структура с необходимыми для рисования идентификаторами
//    countSelect - количество выделенных частей объекта или ноль
//    select      - массив описаний выделяемых частей изображения или ноль
//
//  Возвращаемое значение:
//    1 - все хорошо , 0 - при ошибке
//---------------------------------------------------------------------------
long _export WINAPI m3dPaintObjectEx(V3D_IDENT* ident, long countSelect,
                                     SELECTPART* select);

//---------------------------------------------------------------------------
// Рисование пользховательского 3D-объекта с возможностью выделения
// отдельных частей объекта
//  Вход:
//    ident       - структура с необходимыми для рисования идентификаторами
//    parmObj     - адрес начала описания изображения объекта(стр-ра F3DTREE)
//    countSelect - количество выделенных частей объекта
//    select      - массив описаний выделяемых частей изображения
//
//  Возвращаемое значение:
//    1 - все хорошо , 0 - при ошибке
//---------------------------------------------------------------------------
long _export WINAPI m3dPaintUserObjectEx(V3D_IDENT* ident, char* parmObj,
                                         long countSelect, SELECTPART* select);

//---------------------------------------------------------------------------
// Функция выбора объекта
//  Вход:
//    ident      - структура с необходимыми для выбора идентификаторами
//    flagSelect - флаг выбора объекта: 1 - выбрать, 0 - отменить выбор
//
//  Возвращаемое значение:
//    1 - все хорошо , 0 - при ошибке
//---------------------------------------------------------------------------
long _export WINAPI m3dSelectObject(HM3D hM3D, V3D_IDENT* ident, long int flagSelect);


//****************************************************************************


//-----------------------------------------------------------------------------
// Инициализация загрузки текстур в контекст OpenGL
// !!!!! После окончания использования обязателен вызов t3dCloseBindTex
//   Вход:
//       hM3D - идентификатор описания 3d-рисования
//   Возвращаемое значение:
//     идентификатор описания загрузки текстур или ноль при ошибке
//   По
//-----------------------------------------------------------------------------
HBINDTEX _export WINAPI t3dIniBindTex(HM3D hM3D);

//-----------------------------------------------------------------------------
// Закрытие загрузки текстур в OpenGL
//   Вход:
//     hBindTex - идентификатор описания загрузки текстур
//-----------------------------------------------------------------------------
void _export WINAPI t3dCloseBindTex(HBINDTEX hBindTex);

//-----------------------------------------------------------------------------
// Загрузка битового изображения
//   Вход:
//     hBindTex - идентификатор описания загрузки текстур
//        image - адрес битового изображения в формате RGBA
//         code - идентификационный код изображения
//       recTex - адрес таблицы типа RECTEXTURE с описанием размеров
//                загружаемой текстуры (см. Rscfl3D.h)
//      parmTex - адрес таблицы типа PARMTEXTURE с описанием параметров
//                загружаемой текстуры (см. _export WINAPI m3dtype.h) или 0(все по умолчанию)
//   Возвращаемое значение:
//         идентификатор загруженной в OpenGL текстуры или 0 при ошибке
//-----------------------------------------------------------------------------
long _export WINAPI t3dBindTex(HBINDTEX hBindTex, char *image, long code, RECTEXTURE* recTex,
                PARMTEXTURE* parmTex=0);

//-----------------------------------------------------------------------------
// Загрузка всех текстур из RSC
//   Вход:
//     hBindTex - идентификатор описания загрузки текстур
//         hRsc - идентификатор открытого файла RSC
//   Возвращаемое значение:
//         количество загруженных в OpenGL текстур или 0 при ошибке
//-----------------------------------------------------------------------------
long _export WINAPI t3dBindAllTexRsc(HBINDTEX hBindTex, HRSC hRsc);

//-----------------------------------------------------------------------------
// Возврат идентификатора загруженной в OpenGL текстуры по идентификационному
// коду изображения(code)
//   Вход:
//     hBindTex - идентификатор описания загрузки текстур
//-----------------------------------------------------------------------------
long _export WINAPI t3dGetIdentTex(HBINDTEX hBindTex, long code);

//------------------------------------------------------------------------
// Удаление из контекста загруженной в OpenGL текстуры по
// идентификационному коду изображения(code)
//   Возвращаемое значение: количество удаленных текстур
//------------------------------------------------------------------------
long _export WINAPI t3dDeleteTex(HBINDTEX hBindTex, long code);

//------------------------------------------------------------------------
// Удаление из контекста всех загруженных текстур
//------------------------------------------------------------------------
void _export WINAPI t3dDeleteAllTex(HBINDTEX hBindTex);

//------------------------------------------------------------------------
// Установка свободного идентификационного кода начала текстур
// не из классификатора объектов
//   Вход:
//     hBindTex - идентификатор описания загрузки текстур
//         code - свободный идентификационный код
//   Возврат: 0 - ошибка
//------------------------------------------------------------------------
int _export WINAPI t3dSetFreeTexNumber(HBINDTEX hBindTex,
                                        long int code);

//------------------------------------------------------------------------
// Получение свободного идентификационного кода начала текстур
// не из классификатора объектов
//   Вход:
//     hBindTex - идентификатор описания загрузки текстур
//   Возврат: 0 - ошибка или
//           свободный идентификационный код
//------------------------------------------------------------------------
int _export WINAPI t3dGetFreeTexNumber(HBINDTEX hBindTex);

//--------------------------------------------------------------------------
// Преобразование из пикселов в окне в координаты на местности в метрах
//    Вход:
//        hM3D - идентификатор описания 3d-рисования
//      hModel - идентификатор описания созданной модели
//        x, y - оконные координаты искомой точки
//       point - адрес для записи получаемых координат искомой точки
//
//    Возвращаемое значение: 0 - при ошибке, 1 - если все хорошо
//--------------------------------------------------------------------------
long _export WINAPI m3dWindowToPlane(HM3D hM3d, HMAP3D hModel,
                      long int x, long int y, XYHDOUBLE* point);

//--------------------------------------------------------------------------
// Преобразование из координат на местности в метрах в пикселы в окне
//    Вход:
//        hM3D - идентификатор описания 3d-рисования
//      hModel - идентификатор описания созданной модели
//        x, y - координаты искомой точки в метрах на местности
//       point - адрес для записи получаемых оконных координат искомой точки
//
//    Возвращаемое значение: 0 - при ошибке, 1 - если все хорошо
//--------------------------------------------------------------------------
long _export WINAPI m3dPlaneToWindow(HM3D hM3d, HMAP3D hModel, XYHDOUBLE pointMtr,
                      IMG3DPOINT* pointPix);

//--------------------------------------------------------------------------
// Функция выдачи высоты поверхности модели по координатам точки в плане
// (в метрах на местности)
//    Вход:
//        hM3D - идентификатор описания 3d-рисования
//      hModel - идентификатор описания созданной модели
//    pointMtr - координаты искомой точки в метрах на местности
//----------------------------------------------------------------------------
long int _export WINAPI m3dGetHeightPoint(HMAP3D hModel, XYHDOUBLE* point);

//--------------------------------------------------------------------------
// Копия буфера OpenGl в DIB (24 бит)
//    Вход:
//        bits - адрес для записи изображения буфера OpenGl
//   bmiHeader - адрес заголовка области bits
//
//    Возвращаемое значение: 0 - при ошибке, 1 - если все хорошо
//--------------------------------------------------------------------------
long _export WINAPI m3dPictureToDIB(char* bits, BITMAPINFOHEADER* bmiHeader);

//------------------------------------------------------------------
// Формирование векторов привязки 3D-модели объекта к объекту
//------------------------------------------------------------------
long _export WINAPI m3dCreateObjectVector(HMAP map);

}       // extern "C"

#endif
