#ifndef MAPPICEX_H
#define MAPPICEX_H

#ifndef MAPAPI_H
  #include "mapapi.h"
#endif

#ifndef PICEXPRM_H
  #include "picexprm.h"
#endif

#ifdef WIN32API                  
   #define HMESSAGE HWND
#else
   #define HMESSAGE MSGHANDLER
#endif

struct SAVEASPICTRPARM;

//-----------------------------------------------------------------
// ПАРАМЕТРЫ ФОРМИРОВАНИЯ РАСТРОВОГО ИЗОБРАЖЕНИЯ КАРТЫ ДЛЯ ПЕЧАТИ
// (для задачи послойного формирования растрового изображения с
//  вычищением полей вокруг подписей в цветовых моделях RGB и CMYK)
//-----------------------------------------------------------------

typedef struct SAVEASPICTRPARM_FOR_PRINT
{
  long Length;     // Длина структуры SAVEASPICTRPARM_FOR_PRINT
  HMESSAGE Handle; // Идентификатор окна диалога (используется для
                   // визуального сопровождения процесса)

  HMAP HMap;       // Идентификатор карты
  long Regime;     // Режим выбора прямоугольной области
                   // (AREA_ALL, AREA_SELECT_FRAME, ... - см. maptype.h)

  DFRAME PlaneFrame;  // Габариты выбранной области в метрах

  double DPI;      // Разрешение изображения (точек на дюйм)
  double LPI;      // Линий решетки на дюйм (при Method = 0 игнорируются).
                   // Линия состоит из точек формы Shape

  double FactorVer;   // Коэффициенты калибловки изображения по
  double FactorHor;   // вертикальной и горизонтальной осям

  RECT Rect;       // Область сохраняемой области карты в пикселах
                   //  (при выгрузке в RGB не учитывается)          

  long Scale;      // Масштаб (знаменатель)

  long BitCount;   // Количество бит на пиксел растрового изображения
                   // При ColorModel == 0:                          
                   //   8,16,24,32 бит на пиксел (RGB)
                   // При ColorModel == 1:
                   //   1,8 бит на пиксел (CMYK) - четыре файла BMP или PCX
                   //   32 бит на пиксел (CMYK) - один файл TIF

  long Intensity;  // Интенсивность заливки площадных объектов (0-100)

  long ColorModel; // Флаг цветовой модели:
                   //   0 - RGB (формируется один файл)
                   //   1 - CMYK BMP или CMYK PCX (четыре 8-битных
                   //       или 1-битных файла, составляющие растрового
                   //       изображения, с добавлением с базовому
                   //       имени окончаний "-C","-M","-Y","-K"),
                   //       или CMYK TIF (один файл)

  long Method;     // Метод конвертирования 8-битных полутоновых
                   // изображений CMYK в 1-битные:
                   //   0 - не выполнять (сохранить 8-битные изображения),
                   //   1 - регулярное заполнение точками формы Shape
                   //       с шагом DPI/LPI

  long Shape;      // Форма точки (штриховки) заполнения решетки
                   // (при Method = 0 игнорируется):
                   //   0 - регулярное заполнение круглыми точками

                   // Углы наклона точек решетки (при Method = 0 игнорируются)
  double AngleC;   //  15 градусов
  double AngleM;   //  75 градусов
  double AngleY;   //   0 градусов
  double AngleK;   //  45 градусов

  char Reserve[96];   // Резерв (дополнение до 512 байт)

  char Cross;      // Флаг нанесения приводочных крестов (для ColorModel > 0)
                   // (1 - есть, 0 - нет), (пока не реализовано)
  char Negative;   // Флаг сохранения негативного изображения (для BitCount = 1)
                   // (1 - есть, 0 - нет), (пока не реализовано)
  char Mirror;     // Флаг сохранения зеркального изображения (для BitCount = 1)
                   // (1 - есть, 0 - нет), (пока не реализовано)
  char Turn;       // Флаг поворота изображения на 90 градусов (для BitCount = 1)
                   // (1 - есть, 0 - нет), (пока не реализовано)

  char FileName[260]; // Базовое имя сохраняемого файла (BMP, PCX, TIF)

                      // При заданном 1.BMP (при BitCount = 1) формируются
                      // четыре файла: 1-С.BMP, 1-M.BMP, 1-Y.BMP, 1-K.BMP

                      // При заданном 1.PCX (при BitCount = 1) формируются
                      // четыре файла: 1-С.PCX, 1-M.PCX, 1-Y.PCX, 1-K.PCX

                      // В остальных случаях формируется один файл
}
  SAVEASPICTRPARM_FOR_PRINT;

extern "C"
{

//========================================================================
//    Конвертор PCX -> Rsw
//    map - карта,содержащая векторные данные;
//    handle - диалог визуального сопровождения процесса обработки.
//    pcxname - имя PCX-файла;
//    rstname - имя RST-файла(*.rsw);
//    scale   - масштаб создаваемого растра
//    precision - разрешающая способность создаваемого растра(т/м)
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int WINAPI _export LoadPcxToRstConverter( HMAP map, HMESSAGE handle,
                               char * pcxname,
                               char * rstname,
                               double scale, double precision );

//========================================================================
//    Конвертор PCX -> Rsw
//    map - карта,содержащая векторные данные;
//    handle - диалог визуального сопровождения процесса обработки.
//    pcxname - имя PCX-файла;
//    rstname - имя RST-файла(*.rsw);
//    scale   - масштаб создаваемого растра
//    precision - разрешающая способность создаваемого растра(т/м)
//    point     - точка привязки растра (в метрах)
//                (положение юго-западного угла растра в районе)
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int WINAPI _export LoadPcxToRstConverterEx( HMAP map, HMESSAGE handle,
                               char * pcxname,
                               char * rstname,
                               double scale,
                               double precision,
                               DOUBLEPOINT *point);


//========================================================================
//    Map - карта,содержащая векторные данные;
//    PcxName - имя PCX-файла;
//    RstName - имя RST-файла;
//    scale   - масштаб создаваемого растра
//    precision - разрешающая способность создаваемого растра(т/м)
//    point     - точка привязки растра (в метрах)
//                (положение юго-западного угла растра в районе)
//    Handle - диалог визуального сопровождения процесса обработки.
//    compression - флаг использования сжатия при формировании RST-файла (0/1)
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int WINAPI _export LoadPcxToRstAndCompress( HMAP map, HMESSAGE handle,
                               char * pcxname,
                               char * rstname,
                               double scale,
                               double precision,
                               DOUBLEPOINT *point,
                               int compression);


//========================================================================
//    Запросить параметры PCX-файла
//    pcxname     - имя PCX-файла;
//    information - указатель на структуру DATAINFORMATION для записи параметров PCX-файла
//    Структура DATAINFORMATION описана в picexprm.h
//
//    Функцию LoadPxcInformation рекомендуется вызывать перед началом
//    конвертации PCX-файла в Rsw для инициализации диалога сопровождения
//========================================================================
long int WINAPI _export LoadPxcInformation(char * pcxname,
                                      DATAINFORMATION * information);



//========================================================================
//    Конвертор Bmp -> Rsw
//    map - карта,содержащая векторные данные;
//    handle    - диалог визуального сопровождения процесса обработки;
//    bmpname   - имя BMP-файла;
//    rstname   - имя RST-файла(*.rsw);
//    scale     - масштаб создаваемого растра
//    precision - разрешающая способность создаваемого растра(т/м)
//    point     - точка привязки растра (в метрах)
//                (положение юго-западного угла растра в районе)
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int WINAPI _export LoadBmpToRstConverter( HMAP map, HMESSAGE handle,
                               char * bmpname,
                               char * rstname,
                               double scale, double precision,
                               DOUBLEPOINT *point = 0);


//=================================================================
//    Конвертор Bmp -> Rsw
//    map     - карта,содержащая векторные данные;
//    handle  - диалог визуального сопровождения процесса обработки;
//    bmpname - имя BMP-файла;
//    rstname - имя RST-файла;
//    scale   - масштаб создаваемого растра;
//    frame   - габариты растра(в метрах на местности)
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int WINAPI _export LoadBmpToRstByPlace(HMAP map, HMESSAGE handle,
                                       char * bmpname,
                                       char * rstname,
                                       double scale,
                                       DFRAME *frame);


//========================================================================
//    Конвертор Bmp -> Rsw
//    map - карта,содержащая векторные данные;
//    handle    - диалог визуального сопровождения процесса обработки;
//    bmpname   - имя BMP-файла;
//    rstname   - имя RST-файла(*.rsw);
//    scale     - масштаб создаваемого растра
//    precision - разрешающая способность создаваемого растра(т/м)
//    point     - точка привязки растра (в метрах)
//                (положение юго-западного угла растра в районе)
//    compression - флаг использования сжатия при формировании RST-файла (0/1)

//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int WINAPI _export LoadBmpToRstAndCompress( HMAP map, HMESSAGE handle,
                               char * bmpname,
                               char * rstname,
                               double scale, double precision,
                               DOUBLEPOINT *point,
                               int compression);


//========================================================================
//    Запросить параметры BMP-файла
//    bmpname     - имя BMP-файла;
//    information - указатель на структуру DATAINFORMATION для записи параметров BMP-файла
//    Структура DATAINFORMATION описана в picexprm.h
//
//    Функцию LoadBmpInformation рекомендуется вызывать перед началом
//    конвертации BMP-файла в Rsw для инициализации диалога сопровождения
//========================================================================
long int WINAPI _export LoadBmpInformation(char * bmpname,
                                       DATAINFORMATION * information);



//========================================================================
//    Конвертор Tiff -> Rsw
//    map       - карта,содержащая векторные данные;
//    handle    - диалог визуального сопровождения процесса обработки.
//    tifname   - имя TIF-файла;
//    rstname   - имя RST-файла;
//    scale     - масштаб создаваемого растра
//    precision - разрешающая способность создаваемого растра(т/м)
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int WINAPI _export LoadTiffToRstConverter( HMAP map, HMESSAGE handle,
                               char * tifname,
                               char * rstname,
                               double scale, double precision );

//========================================================================
//    Конвертор Tiff -> Rsw
//    map       - карта,содержащая векторные данные;
//    handle    - диалог визуального сопровождения процесса обработки.
//    tifname   - имя TIF-файла;
//    rstname   - имя RST-файла;
//    scale     - масштаб создаваемого растра
//    precision - разрешающая способность создаваемого растра(т/м)
//    point     - точка привязки растра (в метрах)
//                (положение юго-западного угла растра в районе)
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int WINAPI _export LoadTiffToRstConverterEx( HMAP map, HMESSAGE handle,
                               char * tifname,
                               char * rstname,
                               double scale,
                               double precision,
                               DOUBLEPOINT *point );



//========================================================================
//    Конвертор Tiff -> Rsw
//    Map - карта,содержащая векторные данные;
//    PcxName - имя PCX-файла;
//    RstName - имя RST-файла;
//    scale   - масштаб создаваемого растра
//    precision - разрешающая способность создаваемого растра(т/м)
//    point     - точка привязки растра (в метрах)
//                (положение юго-западного угла растра в районе)
//    Handle - диалог визуального сопровождения процесса обработки.
//    compression - флаг использования сжатия при формировании RST-файла (0/1)
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int WINAPI _export LoadTiffToRstAndCompress( HMAP/*map*/, HMESSAGE handle,
                               char * TiffName,
                               char * RstName,
                               double scale,
                               double precision,
                               DOUBLEPOINT *point,
                               int compression);

//========================================================================
//    Запросить параметры TIFF-файла
//    tifname     - имя TIFF-файла;
//    information -  указатель на структуру DATAINFORMATION для записи параметров TIFF-файла
//    Структура DATAINFORMATION описана в picexprm.h
//
//    Функцию LoadTifInformation рекомендуется вызывать перед началом
//    конвертации TIFF-файла в Rsw для инициализации диалога сопровождения
//========================================================================
long int WINAPI _export LoadTifInformation(HMESSAGE handle,char * TifName,
                                           DATAINFORMATION * information);

//========================================================================
//    Запросить параметры GeoTIFF-файла
//    Map - карта,содержащая векторные данные;  
//    TifName - имя GeoTIF-файла;
//    DataInformation - структура, которую необходимо заполнить
//    geoTIFFinformation - структура, которую необходимо заполнить
//    Структуры DATAINFORMATION и GEOTIFFINFORMATION описаны в picexprm.h
//
//    Функцию LoadGeoTifInformation рекомендуется вызывать перед началом
//    конвертации TIFF-файла в Rsw для инициализации диалога сопровождения
//========================================================================
long int WINAPI _export LoadGeoTifInformation(HMESSAGE Handle, char * TiffName,
                                              DATAINFORMATION * information,
                                              GEOTIFFINFORMATION* geoTIFFinformation);


#ifndef LINUXAPI
//======================================================================== 
//    Запросить параметры JPEG-файла
//    inputname   - имя JPEG-файла;
//    information -  указатель на структуру DATAINFORMATION для записи параметров JPEG-файла
//    Структура DATAINFORMATION описана в picexprm.h
//
//    Функцию LoadJPEGInformation рекомендуется вызывать перед началом
//    преобразования JPEG-файла в Rsw для вывода информации о графическом файле
//========================================================================
long int WINAPI _export LoadJPEGInformation(char * inputname,
                                            DATAINFORMATION * iformation);

//========================================================================
//    Map - карта,содержащая векторные данные;
//    PcxName - имя PCX-файла;
//    RstName - имя RST-файла;
//    scale   - масштаб создаваемого растра
//    precision - разрешающая способность создаваемого растра(т/м)
//    point     - точка привязки растра (в метрах)
//                (положение юго-западного угла растра в районе)
//    Handle - диалог визуального сопровождения процесса обработки.
//    compression - флаг использования сжатия при формировании RST-файла (0/1)
//    flagMessage - флаг выдачи сообщений
//                                       (при ==1, сообщение выдаёт MessageBox;
//                                        при == 0, посылается сообщение диалогу WM_ERROR)
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int _export WINAPI  LoadJpegToRswAndCompress( HMAP map, HMESSAGE handle,
                                                  char * inputname,
                                                  char * rstname,
                                                  double scale,
                                                  double precisionMeters,
                                                  DOUBLEPOINT *point,
                                                  int compression,
                                                  int flagMessage);

#endif // LINUXAPI


//========================================================================
//    Сохранить растровую карту в формате BMP
//    map     - карта,содержащая векторные данные;
//    handle  - диалог визуального сопровождения процесса обработки.
//    rstname - имя RST-файла;
//    bmpname - имя BMP-файла;
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int WINAPI _export LoadRstToBmpConverter(HMAP map, HMESSAGE handle,
                                               char * rstname,
                                               char * bmpname);


//========================================================================
//    Сохранить растровую карту в формате BMP с возможной обрезкой изображения по рамке растра
//    map     - карта,содержащая векторные данные;
//    handle  - диалог визуального сопровождения процесса обработки.
//    rstname - имя RST-файла;
//    bmpname - имя BMP-файла;
//    flagUseBorder - флаг "Вырезать изображение по рамке"(0/1)
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int WINAPI _export LoadRstToBmpConverterEx(HMAP map, HMESSAGE handle,
                                                 char * rstname,
                                                 char * bmpname,
                                                 int flagUseBorder);


//========================================================================
//    Сохранить растровую карту в формате BMP
//    с предварительной очисткой области изображения цветом colorClear
//    Для растров с 1,4,8 бит на пиксель colorClear - индекс цвета палитры растра,
//    для растров с 16,24,32 бит на пиксель colorClear - цвет COLORREF,
//
//    map     - карта,содержащая векторные данные;
//    handle  - диалог визуального сопровождения процесса обработки.
//    rstname - имя RST-файла;
//    bmpname - имя BMP-файла;
//    flagUseBorder - флаг "Вырезать изображение по рамке"
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int WINAPI _export LoadRstToBmpConverterClear(HMAP map, HMESSAGE handle,
                                                 char * rstname,
                                                 char * bmpname,
                                                 int flagUseBorder,
                                                 long colorClear);

//========================================================================
//    Сохранить растровую карту в формате PCX
//    map     - карта,содержащая векторные данные;
//    handle  - диалог визуального сопровождения процесса обработки.
//    rstname - имя RST-файла;
//    pcxname - имя PCX-файла;
//    flagUseBorder - флаг "Вырезать изображение по рамке"
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int WINAPI _export SaveRstToPcx(HMAP map, HMESSAGE handle,
                                                 char * rstname,
                                                 char * pcxname,
                                                 int flagUseBorder);


//========================================================================
//    Сохранить растровую карту в формате PCX
//    с предварительной очисткой области изображения цветом colorClear
//    Для растров с 1,4,8 бит на пиксель colorClear - индекс цвета палитры растра,
//    для растров с 16,24,32 бит на пиксель colorClear - цвет COLORREF,
//    map     - карта,содержащая векторные данные;
//    handle  - диалог визуального сопровождения процесса обработки.
//    rstname - имя RST-файла;
//    pcxname - имя PCX-файла;
//    flagUseBorder - флаг "Вырезать изображение по рамке"
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int WINAPI _export SaveRstToPcxClear(HMAP map, HMESSAGE handle,
                                          char * rstname, char * pcxname,
                                          int flagUseBorder, long colorClear);

//========================================================================
//    Сохранить растровую карту в формате TIFF
//    Map - карта,содержащая векторные данные;
//    RstName - имя RST-файла;
//    TiffName - имя TIFF-файла;
//    flagborder     - флаг использования рамки растровой карты
//                     0 - включать в формируемый файл все блоки изображения
//                     1 - не включать в формируемый файл блоки изображения
//                         невходящие в область, ограниченную рамкой (рекомендуемое значение - 0)
//    platform - Тип платформы (0 - INTEL, 1 - MOTOROLA)             (рекомендуемое значение - 0)
//    imageStructure - Структура изображения TIFF (0 - BLOCK, 1- STRIP, 2 - NONFRAG) (рекомендуемое значение - 1)
//    compressMethod - Флаг сжатия изображения (0- не применять сжатие, 1 - сжатие PackBit) (рекомендуемое значение - 0)
//    flagCMYK - выбор цветовой модели:
//                     0 - цветовая модель RGB 24 бит на пиксел
//                     1 - цветовая модель CMYK 32 бит на пиксел
//                     Режим поддерживается только для  растров 24,32 бит на пиксел.
//    Handle - диалог визуального сопровождения процесса обработки.
//========================================================================
long int WINAPI _export LoadRstToTiffConverter(HMAP Map, HMESSAGE Handle,
                                         char * RstName, char * TiffName,
                                         int flagborder,
                                         int platform, int imageStructure,
                                         int compressMethod,
                                         int flagCMYK);


//======================================================================== 
//    Сохранить растровую карту в формате TIFF
//    Map            - карта,содержащая векторные данные;
//    Handle         - диалог визуального сопровождения процесса обработки.
//    RstName        - имя RST-файла;
//    TiffName       - имя TIFF-файла;
//    flagborder     - флаг использования рамки растровой карты
//                     0 - включать в формируемый файл все блоки изображения
//                     1 - не включать в формируемый файл блоки изображения
//                         невходящие в область, ограниченную рамкой
//                     (рекомендуемое значение - 0).
//    platform - Тип платформы (0 - INTEL, 1 - MOTOROLA)
//                     (рекомендуемое значение - 0).
//    imageStructure - Структура изображения TIFF (0 - BLOCK, 1- STRIP, 2 - NONFRAG)
//                     (рекомендуемое значение - 1).
//    compressMethod - Флаг сжатия изображения (0- не применять сжатие, 1 - сжатие PackBit)
//                     (рекомендуемое значение - 0).
//    flagCMYK - выбор цветовой модели:
//                     0 - цветовая модель RGB 24 бит на пиксел
//                     1 - цветовая модель CMYK 32 бит на пиксел
//                     Режим поддерживается только для  растров 24,32 бит на пиксел.
//    flagIntergraph - Флаг записи матрицы трансформирования,
//                        с помощью которой Intergraph определяет привязку растра
//    dframe         - Габариты изображения в районе в метрах.   
//                     Параметр обязателен для записи матрицы трансформирования (если flagIntergraph == 1)
//    flag1 - flag6  - Не используются. Должны быть равны нулю.
//========================================================================
long int WINAPI _export LoadRstToTiffConverterEx(HMAP Map, HMESSAGE Handle,
                                         char * RstName, char * TiffName,
                                         long int flagborder,
                                         long int platform,
                                         long int imageStructure,
                                         long int compressMethod,
                                         long int flagCMYK,
                                         long int flagIntergraph,
                                         DFRAME * dframe,
                                         long int flag1, long int flag2,
                                         long int flag3, long int flag4,
                                         long int flag5, long int flag6);

//========================================================================  
//    Вырезать изображение растровой карты по прямоугольной области, заданной в метрах
//    map           - карта, содержащая векторные данные;
//    handle        - диалог визуального сопровождения процесса обработки.
//    rstInputName  - имя файла растровой карты;
//    rstOutputName - имя файла формируемой растровой карты;
//    frame         - габариты вырезаемой прямоугольной области(в метрах)
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int WINAPI _export LoadCutOfRstByFrame (HMAP map, HMESSAGE handle,
                                                 char * rstInputName,
                                                 char * rstOutputName,
                                                 DFRAME* frame);





//========================================================================  
//    Вырезать изображение матрицы по прямоугольной области, заданной в метрах
//    map           - карта, содержащая векторные данные;
//    handle        - диалог визуального сопровождения процесса обработки.
//    rstInputName  - имя файла матрицы;
//    rstOutputName - имя файла формируемой матрицы;
//    frame         - габариты вырезаемой прямоугольной области(в метрах)
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int WINAPI _export LoadCutOfMtrByFrame (HMAP map, HMESSAGE handle,
                                                 char * mtrInputName,
                                                 char * mtrOutputName,
                                                 DFRAME* frame);



//========================================================================
//    Сохранить карту в формате BMP
//    map          - карта,содержащая векторные данные;
//    handle       - диалог визуального сопровождения процесса обработки.
//    dframe       - фрагмент сохраняемой карты(в метрах на местности)
//    bitcount     - кол-во бит на пиксел сохраняемого изображения(8,16,24,32)
//    scale        - масштаб сохраняемого изображения
//    resolution   - разрешающая способность сохраняемого изображения(т/д)  
//    bmpname      - имя файла сохраняемого изображения (*.bmp);
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
#ifndef LINUXAPI           
long int WINAPI _export LoadMapToBmp(HMAP map,HMESSAGE handle,
                                    DFRAME * dframe, long bitcount,
                                    long scale, long resolution,
                                    char* bmpname);

//========================================================================
//    Сохранить карту в формате EMF
//    map          - карта,содержащая векторные данные;
//    handle       - диалог визуального сопровождения процесса обработки.
//    rectmetr     - фрагмент сохраняемой карты(в метрах на местности)
//    bitcount = 8 - кол-во бит на пиксел сохраняемого изображения
//    scale        - масштаб сохраняемого изображения
//    resolution   - разрешающая способность сохраняемого изображения(т/м)
//    emfname      - имя файла сохраняемого изображения (*.emf);
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int WINAPI _export LoadMapToEmf(HMAP map,HMESSAGE handle,
                                    RECT rectmetr, long bitcount,
                                    long scale, long resolution,
                                    char* emfname);


//========================================================================
// Сохранить карту в растровом формате CMYK и RGB (BMP, ...)
// с целью подготовки карты к печати
//
//  parm   - параметры построения изображения
//
//  Диалогу визуального сопровождения процесса обработки посылаются
//  сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
// (При работе программы используется около 60 Мб оперативной памяти)
//========================================================================
long int WINAPI _export LoadMapToRasterForPrint(SAVEASPICTRPARM_FOR_PRINT* parm);

//========================================================================
// Сохранить карту в растровом формате CMYK (BMP, ...)
//
//  map    - карта, содержащая векторные и растровые данные
//  handle - диалог визуального сопровождения процесса обработки
//  rect   - область сохраняемой карты (в пикселах)
//  parm   - дополнительные параметры отображения (см. pictrapi.h)
//
//  Диалогу визуального сопровождения процесса обработки посылаются
//  сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//========================================================================
long int WINAPI _export LoadMapToRasterCMYK(HMAP map, HMESSAGE handle,
                                            RECT* rect,
                                            SAVEASPICTRPARM* parm);


//========================================================================
// Вывести изображение карты в метафайл с обрезкой объектов по рамке
// (Функция реализована только для платформы Windows)
//    handle         - диалог визуального сопровождения процесса обработки.
//    name           - имя метафайла
//    Структура METAFILEBUILDPARMEX описана в maptype.h
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
// При ошибке в параметрах возвращает ноль
//========================================================================
long int WINAPI _export PaintToEmfByFrame(HMESSAGE handle, HMAP hMap,        
                                          const char * name,
                                          METAFILEBUILDPARMEX * parm);
#endif // LINUXAPI


//========================================================================
//    Оптимизировать файл растровой карты с возможным сжатием изображения
//    handle         - диалог визуального сопровождения процесса обработки.
//    name           - имя файла растровой карты
//    newname        - имя файла оптимизированной растровой карты
//    compressnumber - номер алгоритма сжатия блоков изображения
//                     0 - не использовать сжатие
//                     1 - алгоритм сжатия LZW
//    flagborder     - флаг использования рамки растровой карты
//                     0 - включать в формируемый файл все блоки изображения
//                     1 - не включать в формируемый файл блоки изображения
//                         невходящие в область, ограниченную рамкой
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int WINAPI _export LoadRstOptimization(HMESSAGE handle,
                                    char* name,char* newname,
                                    long int compressnumber,
                                    long int flagborder);

//========================================================================  
//    Оптимизировать файл растровой карты с возможным сжатием изображения
//    map            - карта,содержащая векторные данные;
//    handle         - диалог визуального сопровождения процесса обработки.
//    name           - имя файла растровой карты
//    newname        - имя файла оптимизированной растровой карты
//    compressnumber - номер алгоритма сжатия блоков изображения
//                     0 - не использовать сжатие
//                     1 - алгоритм сжатия LZW
//    flagborder     - флаг использования рамки растровой карты
//                     0 - включать в формируемый файл все блоки изображения
//                     1 - не включать в формируемый файл блоки изображения
//                         невходящие в область, ограниченную рамкой
//     Добавлен пересчет габаритов растра при обрезении изображения по
//     рамке растра (когда flagborder == 1).
//    При ошибке возвращает ноль
//========================================================================
long int WINAPI _export LoadRstOptimizationEx(HMESSAGE handle, HMAP hMap,
                                              char* name,char* newname,
                                              long int compressnumber,
                                              long int flagborder);


//========================================================================
//    Оптимизировать файл матричной карты с возможным сжатием изображения
//    handle         - диалог визуального сопровождения процесса обработки.
//    name           - имя файла матричной карты
//    newname        - имя файла оптимизированной матричной карты
//    compressnumber - номер алгоритма сжатия блоков изображения
//                     0 - не использовать сжатие
//                     32 - алгоритм сжатия матрицы
//    flagborder     - флаг использования рамки матричной карты
//                     0 - включать в формируемый файл все блоки изображения
//                     1 - не включать в формируемый файл блоки изображения
//                         невходящие в область, ограниченную рамкой
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int WINAPI _export LoadMtrOptimization(HMESSAGE handle,
                                    char* name,char* newname,
                                    long int compressnumber,
                                    long int flagborder);



//========================================================================  
//    Оптимизировать файл матричной карты с возможным сжатие/м изображения
//    map            - карта,содержащая векторные данные;
//    handle         - диалог визуального сопровождения процесса обработки.
//    name           - имя файла матричной карты
//    newname        - имя файла оптимизированной матричной карты
//    compressnumber - номер алгоритма сжатия блоков изображения
//                     0 - не использовать сжатие
//                     32 - алгоритм сжатия матрицы
//    flagborder     - флаг использования рамки матричной карты
//                     0 - включать в формируемый файл все блоки изображения
//                     1 - не включать в формируемый файл блоки изображения
//                         невходящие в область, ограниченную рамкой
//     Добавлен пересчет габаритов матричной карты при обрезке изображения по
//     рамке матричной карты (когда flagborder == 1).
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int WINAPI _export LoadMtrOptimizationEx(HMESSAGE handle, HMAP hMap,
                                    char* name,char* newname,
                                    long int compressnumber,
                                    long int flagborder);



//========================================================================
//    Поворот растровой карты
//
//    handle         - диалог визуального сопровождения процесса обработки.
//    hmap           - идентификатор открытой векторной карты
//    name           - имя файла растровой карты
//    newname        - имя файла растровой карты с зеркальным изображением
//    mirrortype     - тип обработки
//                     (0- Получение зеркального изображения растровой карты
//                           относитльно вертикальной оси )
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int WINAPI _export LoadRstMirror(HMESSAGE handle, HMAP map,
                                    char* name,char* newname,
                                    long int mirrortype);



 // Вывести изображение растровой карты в Image (массив)
 // Выводится фрагмент растровой карты, заданный параметром rect.
 // При выводе используются растры с палитрой в 16 и 256 цветов.
 // Изображение строится в текущем масштабе
 // На одну точку используется 2 байта:
 //    1-ый байт - индекс цвета из палитры соответствующего растра
 //    2-ой байт - номер растра
 // handle  - диалог визуального сопровождения процесса обработки.
 // lpImage - адрес первого байта области изображения.
 // size    - размер области изображения.
 // rect    - фрагмент растровой карты(в пикселах изображения карты)
 // При ошибке в параметрах возвращает ноль
 //    Диалогу визуального сопровождения процесса обработки посылаются
 //    сообщения:
 //    -  (0x590) Извещение об изменении состония процесса
 //       WPARAM - текущее состоние процесса в процентах (0% - 100%)
 //       Если функция-отклик возвращает 0x590, то процесс завершается.
#ifndef LINUXAPI           
long int WINAPI _export mapPaintRstToIndexedImage(HMAP hMap, HMESSAGE handle,
                                   char * lpImage, long int size, RECT * rect);
#endif // LINUXAPI

//========================================================================  
//    Сохранить изображение уменьшенной копии растровой карты как самостоятельный растр
//    map           - карта, содержащая векторные данные;
//    handle        - диалог визуального сопровождения процесса обработки.
//    rstInputName  - имя файла растровой карты;
//    rstOutputName - имя файла формируемой растровой карты;
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
//
//    -  (WM_ERROR) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в picexprm.h,
//       WM_PROGRESSBAR и WM_ERROR - в maptype.h
//========================================================================
long int WINAPI _export LoadRstDuplicateAs (HMAP map, HMESSAGE handle,
                                                 char * rstInputName,
                                                 char * rstOutputName);



//========================================================================
//    Поворот растра вокруг точки NullPoint на угол Angle      
//
//    map        - карта,содержащая векторные данные;
//    RstNumber  - номер исходного растра в цепочке растров
//    NameRstIn  - имя исходного растра;
//    NameRstOut - имя выходного растра;
//    NullPoint  - координаты точки поворота в элементах растра;
//    Angle      - угол поворота (в радианах);
//    handle     - диалог визуального сопровождения процесса обработки.
//========================================================================
long int WINAPI _export RstRotating(HMAP map, long int RstNumber,
                                    char * NameRstIn, char * NameRstOut,
                                    DOUBLEPOINT NullPoint, double Angle,
                                    HMESSAGE handle);


//========================================================================
//    Поворот растра вокруг точки NullPoint на угол Angle        
//
//    map        - карта,содержащая векторные данные;
//    RstNumber  - номер исходного растра в цепочке растров
//    NameRstIn  - имя исходного растра;
//    NameRstOut - имя выходного растра;
//    NullPoint  - координаты точки поворота в метрах на местности;
//    Angle      - угол поворота (в радианах);
//    handle     - диалог визуального сопровождения процесса обработки.
//========================================================================
long int WINAPI _export RstPlaneRotating(HMAP map, long int RstNumber,
                                         char * NameRstIn, char * NameRstOut,
                                         DOUBLEPOINT NullPoint, double Angle,
                                         HMESSAGE handle);



//========================================================================
// Привязка растра с масштабированием по двум точкам   
// hMap        - карта, содержащая векторные данные;
// rswName     - имя файла растра
// pointMet1   - Координаты первой точки  в метрах
// pointMet1   - Координаты первой точки в метрах
// pointMet2   - Координаты второй точки  в метрах
// pointMet2   - Координаты второй точки в метрах
// message     - флаг на выдачу сообщений (0\1)
// При ошибке возвращает ноль
//========================================================================
long int WINAPI _export AttachRswWithScaling(HMAP hMap, char* rswName,
                                             DOUBLEPOINT *pointMet1, DOUBLEPOINT *pointMetNew1,
                                             DOUBLEPOINT *pointMet2, DOUBLEPOINT *pointMetNew2,
                                             int message);


//========================================================================
// Привязка растра с масштабированием и поворотом по двум точкам  
//
// hmap        - карта, содержащая векторные данные;
// handle      - диалог визуального сопровождения процесса обработки.
// rswname     - имя файла растра
// pointmet1   - Координаты первой точки  в метрах
// pointmet1   - Координаты первой точки в метрах
// pointmet2   - Координаты второй точки  в метрах
// pointmet2   - Координаты второй точки в метрах
// message     - флаг на выдачу сообщений (0\1)
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состояния процесса
//       WPARAM - текущее состояние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
// При ошибке возвращает ноль
//========================================================================
long int WINAPI _export AttachRswWithScalingAndRotation(HMAP hmap, HMESSAGE handle, char* rswname, 
                                             DOUBLEPOINT *pointmet1, DOUBLEPOINT *pointmetnew1,
                                             DOUBLEPOINT *pointmet2, DOUBLEPOINT *pointmetnew2,
                                             int message);


//========================================================================
// Привязка растра с масштабированием и поворотом по двум точкам          
//
// hmap        - карта, содержащая векторные данные;
// handle      - диалог визуального сопровождения процесса обработки.
// rswnamein   - имя исходного файла растра
// rswnameout  - имя выходного файла растра
// pointmet1   - Координаты первой точки  в метрах
// pointmet1   - Координаты первой точки в метрах
// pointmet2   - Координаты второй точки  в метрах
// pointmet2   - Координаты второй точки в метрах
// message     - флаг на выдачу сообщений (0\1)
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (WM_PROGRESSBAR) Извещение об изменении состояния процесса
//       WPARAM - текущее состояние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
// При ошибке возвращает ноль
//========================================================================
long int WINAPI _export AttachRswWithScalingAndRotationEx(HMAP hmap, HMESSAGE handle,
                                             char* rswnamein, char* rswnameout,
                                             DOUBLEPOINT *pointmet1, DOUBLEPOINT *pointmetnew1,
                                             DOUBLEPOINT *pointmet2, DOUBLEPOINT *pointmetnew2,
                                             int message);

//==============================================================================
//    Трансформирование растра                                       
// (вычисление коэффициентов пересчета координат методом наименьших квадратов)
//
//   handle    - диалог визуального сопровождения процесса обработки;
//   map       - карта,содержащая векторные данные;
//   parm      - параметры прикладной задачи;
//   namein    - имя исходного растра;
//   nameout   - имя выходного растра;
//   fact      - исходные координаты опоры;
//   teor      - желаемые координаты опоры;
//   count     - количество опорных точек (не меньше 4-х).
//
//   Диалогу визуального сопровождения процесса обработки посылаются сообщения:
//   -  (WM_PROGRESSBAR) Извещение об изменении состояния процесса
//      WPARAM - текущее состояние процесса в процентах (0% - 100%)
//      Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
// При ошибке возвращает ноль,
//==============================================================================
long int WINAPI _export RswTransformingBySquareMethod(HMAP map,HMESSAGE handle,
                           TASKPARMEX * parm,char * namein,char * nameout,
                           long int count,DOUBLEPOINT * fact,DOUBLEPOINT * teor);

//================================================================================
// Преобразование растра к заданной проекции                           
//
//   handle  - диалог визуального сопровождения процесса обработки.
//   namein  - имя исходного растра;
//   nameout - имя выходного растра;
//   mapreg  - адрес структуры с данными о заданной проекции
//             (описание структуры MAPREGISTEREX см в mapcreate.h);
//
//   Диалогу визуального сопровождения процесса обработки посылаются сообщения:
//   -  (WM_PROGRESSBAR) Извещение об изменении состояния процесса
//      WPARAM - текущее состояние процесса в процентах (0% - 100%)
//      Если функция-отклик возвращает WM_PROGRESSBAR, то процесс завершается.
// При ошибке возвращает ноль,
// код ошибки возвращается функцией picexGetLastError() (коды ошибок см. maperr.rh)
//================================================================================
#ifdef WIN32API                                                      
long int WINAPI _export RswProjectionReforming(HMESSAGE handle, char * namein,
                                               char * nameout, MAPREGISTEREX * mapreg);
#else                                                                
long int WINAPI _export RswProjectionReforming(MSGHANDLER handle, char * namein,
                                               char * nameout, MAPREGISTEREX * mapreg);
#endif

//================================================================================
// Возвращает код последней ошибки (коды ошибок см. maperr.rh)     
// В случае отсутствия ошибки возвращает ноль
//================================================================================
long int WINAPI _export picexGetLastError();


//================================================================================
// Создать GIF-файл с размещением в памяти
//   palette    - указатель на палитру
//   colorcount - число цветов палитры (от 2 до 256)
//   width      - ширина изображения (от 1 до 65535)
//   height     - высота изображения (от 1 до 65535)
//   in         - указатель на входные данные
//   sizein     - размер входных данных (в байтах)
//   out        - указатель на выходной буфер
//   sizeout    - размер выходного буфера (в байтах)
//                (минимальный размер = sizein + 1000)
// Возвращает размер буфера, содержащего GIF-файл (в байтах)
// При ошибке возвращает 0
//================================================================================
// Входные данные должны содержать 8-битное изображение с нормальным
// расположением строк (сверху-вниз) без байтов выравнивания в строке.
// В качестве входных данных может быть использовано изображение
// карты, полученное при помощи функции mapPaintToImage (mapapi.h)
//================================================================================
long int WINAPI _export picexCreateGif(RGBQUAD* palette, int colorcount,
                                       int width, int height,
                                       unsigned char* in, int sizein,
                                       unsigned char* out, int sizeout);

//================================================================================
// Создать GIF-файл с размещением на диске
//   name       - имя GIF-файла
//   palette    - указатель на палитру
//   colorcount - число цветов палитры (от 2 до 256)
//   width      - ширина изображения (от 1 до 65535)
//   height     - высота изображения (от 1 до 65535)
//   in         - указатель на входные данные
//   sizein     - размер входных данных (в байтах)
// Возвращает размер GIF-файла (в байтах)
// При ошибке возвращает 0
//================================================================================
// Входные данные должны содержать 8-битное изображение с нормальным
// расположением строк (сверху-вниз) без байтов выравнивания в строке.
// В качестве входных данных может быть использовано изображение
// карты, полученное при помощи функции mapPaintToImage (mapapi.h)
//================================================================================
long int WINAPI _export picexCreateGifFile(char* name,
                                       RGBQUAD* palette, int colorcount,
                                       int width, int height,
                                       unsigned char* in, int sizein);

//========================================================================
// Загрузка изображения в формате RGBA(для текстуры OpenGL) из BMP-файла
//          c обрезкой (высота и ширина не более 512 и кратны степени 2)
//    Вход: nameBmp - имя исходного Bmp-файла;
//            image - адрес области записи получаемого изображения;
//             size - размер этой области в байтах;
//      reth и retv - высота и ширина полученного изображения;
//        sizeimage - заполняемый данной функцией размер области, необходимой
//                    для записи получаемого изображения.
//    Возвращаемое значение:
//         0 - в случае ошибки (или при нехватке памяти для получаемого
//             изображения см. sizeimage);
//         1 - в случае успешного получения изображения.
//========================================================================
long int WINAPI _export LoadBmpToImage32WithCut(const char* nameBmp,
                             const char* image, long int size,
                             long int &reth,long int &retw, long int &sizeimage);

//========================================================================
// Загрузка изображения из памяти в BMP-файл
//    Вход: nameBmp - имя получаемого Bmp-файла;
//            image - адрес области с изображением для записи;
//   width и height - ширина и высота изображения;
//      elementsize - размер элемента изображения (в битах).
//    Возвращаемое значение:
//         0 - в случае ошибки;
//         1 - в случае успешного получения Bmp-файла изображения.
//========================================================================
long int WINAPI _export LoadImageToBmp(const char* nameBmp, const char* image,
                                       long width, long height, long elementsize);


//========================================================================
//    Сохранить карту в формате BMP
//    map          - карта,содержащая векторные данные;
//    handle       - диалог визуального сопровождения процесса обработки.
//    dframe       - фрагмент сохраняемой карты(в метрах на местности)
//    bitcount = 8 - кол-во бит на пиксел сохраняемого изображения
//    scale        - масштаб сохраняемого изображения
//    resolution   - разрешающая способность сохраняемого изображения(т/дюйм)  // 20/04/08
//    bmpname      - имя файла сохраняемого изображения (*.bmp);
//    При ошибке возвращает ноль
//
//    Диалогу визуального сопровождения процесса обработки посылаются
//    сообщения:
//    -  (0x591) Извещение об изменении состония процесса
//       WPARAM - текущее состоние процесса в процентах (0% - 100%)
//       Если функция-отклик возвращает 0x590, то процесс завершается.
//
//    -  (0x592) Извещение об ошибке
//       LPARAM - указатель на структуру ERRORINFORMATION
//       Структура ERRORINFORMATION описана в
//========================================================================
long int WINAPI _export LoadMapToPicture(HMAP Map,HMESSAGE Handle,
                                 DFRAME * dframe, long BitCount,
                                 long Scale, long Resolution,
                                 char* BmpName,
                                 HMESSAGE handleMainWin);
								     
long int WINAPI _export LoadMapToPictureEx(HMAP Map,HMESSAGE Handle,
                                   DFRAME * dframe, long BitCount,
	                           long Scale, long Resolution,
	                           char* BmpName, long FlagIntergraphTIFF,
	                           long FlagCompressTIFF,
	                           HMESSAGE handleMainWin);
}       // extern "C"


#endif  // MAPPICEX_H


