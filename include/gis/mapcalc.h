
#ifndef MAPCALC_H
#define MAPCALC_H

#ifndef MAPDAT_H
  #include "mapdat.h"
#endif

#ifndef MEASURE_H
  #include "measure.h"
#endif


// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++++   КЛАСС "ПОСТРОЕНИЕ ЗОНЫ ВОКРУГ ОБЪЕКТА"  +++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
typedef class _DLLCLASS TBuildZone
{
  public:

  // Конструктор класса
  TBuildZone();
  ~TBuildZone();

  // Построение зоны вокруг объекта / подобъекта
  // radius    - радиус создаваемой зоны
  // source    - метрика объекта; зона строится вокруг
  // subject   - номер подобъекта, вокруг которого строим зону
  // precision - порог (точность) при фильтрации точек
  // rectangle - вид края зоны
  //           = 0 - край углом
  //           = 1 - прямоугольный край
  // При ошибке возвращает ноль
  int _fastcall Build(double radius, TDataEdit * source, int subject = 0,
                      double precision = -1, int rectangle = 0, int typeangle = 0);

  // Построение половины зоны вокруг объекта / подобъекта
  // (справа от объекта по направлению цифрования)
  // radius    - радиус создаваемой зоны
  // source    - метрика объекта; зона строится вокруг
  // subject   - номер подобъекта, вокруг которого строим зону
  // precision - порог (точность) при фильтрации точек
  // При ошибке или количестве точек <= 1 возвращает ноль
  int _fastcall BuildHalf(double radius, TDataEdit * source,
                          int subject = 0, double precision = -1);

  // Построение зоны снаружи/внутри объекта/подобъекта
  // для объектов с количеством точек больше 1
  // (по направлению цифрования, количество точек исходной метрики сохраняется,
  //  проверка на петли отсутствует)
  // radius    - радиус создаваемой зоны
  //    отрицательное значение - внутри объекта
  //    положительное значение - снаружи объекта
  // source    - метрика объекта; зона строится вокруг
  // subject   - номер подобъекта, вокруг которого строим зону
  // При ошибке возвращает ноль
  int _fastcall ModificationObject(double radius, TDataEdit *source,
                                   int subject = 0);

  protected:

  // Установить точность фильтрации точек
  void _fastcall SetPrecision(double precision);

  // Запись точки в метрику зоны
  int _fastcall WritePoint(DOUBLEPOINT &xy);

  // Сформироовать первую точку
  int BeginPoint();

  //  rectangle = 0 - край углом
  //  rectangle = 1 - прямоугольный край
  int _fastcall FinalPoint(int rectangle = 0);

  // Записать точку
  int InAngle(int typeangle = 0);
  int Angle123();
  int Parallel();

  int _fastcall BeginPointHalf(int write = 1);
  int FinalPointHalf();
  int PlacePoint8();

  public:

  double Precision;    // Порог (точность) при фильтрации точек
  double Radius;       // Радиус создаваемой зоны

  DOUBLEPOINT XY[10];

  TDataEdit Source;    // Исходная метрика
  TDataEdit Data;
}
  TBuildZone;

typedef TBuildZone TBUILDZONEDATA;


// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++++   КЛАСС "    СОЗДАНИЕ СПЛАЙНА      "  +++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
typedef class _DLLCLASS TSpline
{
  public :

  // Конструктор класса
  TSpline();
  ~TSpline();

// Создание сплайна - сглаживание объекта.
// Это сплайн, который проходит только
// через первую и последнюю точки объекта и как бы сглаживает
// углы ломаной, соединяющей точки объекта (метрику исходного
// объекта/подобъекта).
// Сплайн строится по объекту и всем его подобъектам
// source    - метрика объекта, по которому строится сплайн
// kspil     - условный процент спиливания
//             углов ломаной линии объекта (1<= kspil <= 50)
//             (метрика исходного объекта/подобъекта).
//             Чем больше kspil, тем больше спиливается угол
// kplavn    - плавность кривой сплайна
//             (число точек между узлами объекта kplavn >= 3).
//             Чем больше kplavn,тем глаже смотрится линия
// precision - порог (точность) при фильтрации точек
// Если исходный объект имел 3-ю координату (высоту),то у сплайна
// также есть высота

  int _fastcall BuildSglad(TDataEdit *source,
                           int kspil = 50,
                           int kplavn = 5,
                           double precision = -1);

// Создание сплайна - сглаживание объекта/подобъекта
// Это сплайн, который проходит только
// через первую и последнюю точки объекта/подобъекта и как бы
// сглаживает углы ломаной, соединяющей точки объекта/подобъекта
// (метрику исходного объекта/подобъекта).
// Сплайн строится только для объекта (subject=0) или для
// конкретного подобъекта subject
// source    - метрика объекта, по которому строится сплайн
// subject   - номер подобъекта, по которому строится сплайн
// kspil     - условный процент спиливания
//             углов ломаной линии объекта (1<= kspil <= 50)
//             (метрика исходного объекта/подобъекта).
//             Чем больше kspil, тем больше спиливается угол
// kplavn    - плавность кривой сплайна
//             (число точек между узлами объекта kplavn >= 3).
//             Чем больше kplavn,тем глаже смотрится линия
// precision - порог (точность) при фильтрации точек
// Если исходный объект имел 3-ю координату (высоту),то у сплайна
// также есть высота

  int _fastcall BuildSgladSubject(TDataEdit *source,
                                  int subject = 0,
                                  int kspil = 50,
                                  int kplavn = 5,
                                  double precision = -1);

// Создание сплайна - огибание объекта
// Это сплайн, который проходит
// через все точки исходного объекта (метрика исходного
// объекта) и огибает его. Исходный объект как бы вписан в сплайн.
// Сплайн строится по объекту и всем его подобъектам
// source    - метрика объекта, по которому строится сплайн
// kprijim   - максимальная амплитуда
//             отхода кривой сплайна от отрезка
//             в процентах от длины отрезка ( >= 5 ).
//             Чем больше kprijim, тем более сплайн может
//             удаляться от отрезка ломаной (метрики исходного
//             объекта/подобъекта).
// kplavn    - плавность кривой сплайна
//             (число точек между узлами объекта kplavn >= 3).
//             Чем больше kplavn,тем глаже смотрится линия
// precision - порог (точность) при фильтрации точек
// Если исходный объект имел 3-ю координату (высоту),то у сплайна
// также есть высота

  int _fastcall BuildOgib(TDataEdit *source,
                          int kprijim = 10,
                          int kplavn = 5,
                          double precision = -1);

// Создание сплайна - огибание объекта/подобъекта
// Это сплайн, который проходит
// через все точки исходного объекта/подобъекта (метрика исходного
// объекта/подобъекта) и огибает его. Исходный объект/подобъекта
// как бы вписан в сплайн.
// Сплайн строится только для объекта (subject=0) или для
// конкретного подобъекта subject
// source    - метрика объекта, по которому строится сплайн
// subject   - номер подобъекта метрики сплайна
// kprijim   - максимальная амплитуда
//             отхода кривой сплайна от отрезка
//             в процентах от длины отрезка ( >= 5 ).
//             Чем больше kprijim, тем более сплайн может
//             удаляться от отрезка ломаной (метрики исходного
//             объекта/подобъекта).
// kplavn    - плавность кривой сплайна
//             (число точек между узлами объекта kplavn >= 3).
//             Чем больше kplavn,тем глаже смотрится линия
// precision - порог (точность) при фильтрации точек
// Если исходный объект имел 3-ю координату (высоту),то у сплайна
// также есть высота

  int _fastcall BuildOgibSubject(TDataEdit *source,
                                 int subject = 0,
                                 int kprijim = 10,
                                 int kplavn = 5,
                                 double precision = -1);

  protected:

//  Строит спиливающий сплайн - это сплайн, который проходит только
//  через первую и последнюю точки объекта и как бы сглаживает
//  углы ломаной, соединяющей точки объекта (метрику исходного
//  объекта/подобъекта).
//  Возвращает число точек сплайна.
//  subject - номер подобъекта метрики сплайна
//  Если исходный объект имел 3-ю координату (высоту),то у сплайна
//  также есть высота

  int _fastcall Sglad(int subject = 0);

//  Строит огибающий сплайн - это сплайн, который проходит
//  через все точки исходного объекта (метрика исходного
//  объекта/подобъекта) и огибает его. Исходный объект как бы
//  вписан в сплайн.
//  subject - номер подобъекта метрики сплайна
//  Если исходный объект имел 3-ю координату (высоту),то у сплайна
//  также есть высота

  int _fastcall Ogib(int subject = 0);

  // Установить точность фильтрации точек

  void _fastcall SetPrecision(double precision);

// Установить параметры :
//  kprijim - максимальная амплитуда
//            отхода кривой сплайна от отрезка
//            в процентах от длины отрезка ( >= 5 ).
//            Чем больше kprijim, тем более сплайн может
//            удаляться от отрезка ломаной (метрики исходного
//            объекта/подобъекта).
//  kspil   - условный процент спиливания
//            углов ломаной линии объекта (1<= kspil <= 50)
//            (метрика исходного объекта/подобъекта).
//            Чем больше kspil, тем больше спиливается угол
//  kplavn  - плавность кривой сплайна
//            (число точек между узлами объекта kplavn >= 3).
//            Чем больше kplavn,тем глаже смотрится линия

  void _fastcall SetParm(int kprijim = 5, int kspil = 50,
                         int kplavn = 3);

  // Построение кривой Безье для объекта T
  // m - число точек объекта
  // subject - номер подобъекта метрики сплайна
  // typeSplin - тип сплайна ( 0 - сглаживающий, 1 - огибающий)
  // крайние точки отрезка включаются в кривую

  int _fastcall Bezier(int m, int subject, int typeSplin);

  // Вычисление высоты точки сплайна
  // по высотам 3-х соседних
  // hor - горизонтальная координата точки
  // ver - вертикальная координата точки
  // возвращает высоту точки по плановым координатам

  double _fastcall HeigtPointSpline(double hor,double ver);

  // Вычисление факториала n!

  int _fastcall Fact(int n);

  // Программа определения граничных условий на крах  g1 g2
  // для первой точки g1 g2 можно не задавать
  // для промежуточных точек задавать g1 g2 предыдущего отрезка
  // для последней точки задавать g1 предыдущего отрезка,
  // задавать g2 таким образом:
  //    если не замкнут, то предыдущий, иначе g1 первого отрезка
  // number - номер точки

  void _fastcall FindGran(int number, double *g1, double *g2);

  // Определение угла наклона отрезка ломаной относительно
  // оси  абсцисс ОY (Гаусс-Крюгер)
  // в диапазоне  -180  +180 градусов

  double _fastcall Ugol(double x1, double y1, double x2, double y2);

  // Изменение угла u1 на величину angle
  // вправо (lr = 2) или влево ( lr = 1)
  // возвращает измененный угол  (-180 +180)

  double _fastcall Dovorot(double u1, int lr);

  // Определение стороны огибания отрезка
  // слева или справа
  // возвращает:  1-слева   2-справа

  int _fastcall LeftRight(double u1, double u2);

  public:

  double  T[6];
  double Prijim;      // величина допустимости удаления
                      // кривой сплайна от отрезка ломаной
                      // объекта (метрики объекта).
                      // Задается в долях от длины отрезка
                      // Prijim >= 0.05 (больше Prijim - больше
                      // допустим отход кривой от отрезка
  double Spil;        //  Spil - cтепень сглаживания углов
                      // (0.5 <= Spil < 1 )
                      //  (больше Spil - больше угла остается,
                      //   меньше сглаживание угла)
  double Precision;   // Порог (точность) при фильтрации точек
  double Hn, Hs, Hk;  // Высоты начальной, средней и конечной
                      // точек отрезка ломаной
  int  Plavn;         // Plavn - плавность кривой сплайна это число
                      // дополнительных точек вставляемых между
                      // точками метрики объекта   (Рlavn >= 3).
                      // Чем больше плавность,тем глаже смотрится
                      // линия.
  int  Dimetr;        // Размерность метрики объекта (2 или 3)

  TDataEdit Source;    // Исходная метрика
  TDataEdit Data;
}
  TSpline;

typedef TSpline TSPLINDATA;

#ifdef LINUXAPI    
typedef TSpline TSplin;
#endif

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++  ФУНКЦИИ "ПОСТРОЕНИЕ ЗОНЫ ВОКРУГ ОБЪЕКТА"  +++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// Построение зоны вокруг объекта / подобъекта
// radius    - радиус создаваемой зоны
// source    - метрика объекта; зона строится вокруг
// subject   - номер подобъекта, вокруг которого строим зону
// precision - порог (точность) при фильтрации точек
// rectangle - вид края зоны
//           = 0 - край углом
//           = 1 - прямоугольный край
// typeangle - вид углов                  
//           = 0 - "срезанные" углы
//           = 1 - прямые
// При ошибке возвращает ноль
int _fastcall bzBuild(TBUILDZONEDATA *buildzone, double *radius,
                      DATAEDIT *source, int subject,
                      double *precision, int rectangle, int typeangle);

// Построение половины зоны вокруг объекта / подобъекта
// (справа от объекта по направлению цифрования)
// radius    - радиус создаваемой зоны
// source    - метрика объекта; зона строится вокруг
// subject   - номер подобъекта, вокруг которого строим зону
// precision - порог (точность) при фильтрации точек
// При ошибке или количестве точек <= 1 возвращает ноль
int _fastcall bzBuildHalf(TBUILDZONEDATA *buildzone, double *radius,
                          DATAEDIT *source, int subject,
                          double *precision);

// Построение зоны снаружи/внутри объекта/подобъекта
// для объектов с количеством точек больше 1
// (по направлению цифрования, количество точек исходной метрики сохраняется,
//  проверка на петли отсутствует)
// radius    - радиус создаваемой зоны
//    отрицательное значение - внутри объекта
//    положительное значение - снаружи объекта
// source    - метрика объекта; зона строится вокруг
// subject   - номер подобъекта, вокруг которого строим зону
// При ошибке возвращает ноль
int _fastcall bzModificationObject(TBUILDZONEDATA *buildzone, double *radius,
                                   DATAEDIT *source, int subject);


// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++++  ФУНКЦИИ "    СОЗДАНИЕ СПЛАЙНА     "  +++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// Создание сплайна - сглаживание объекта.
// Это сплайн, который проходит только
// через первую и последнюю точки объекта и как бы сглаживает
// углы ломаной, соединяющей точки объекта (метрику исходного
// объекта/подобъекта).
// Сплайн строится по объекту и всем его подобъектам
// source    - метрика объекта, по которому строится сплайн
// kspil     - условный процент спиливания
//             углов ломаной линии объекта (1<= kspil <= 50)
//             (метрика исходного объекта/подобъекта).
//             Чем больше kspil, тем больше спиливается угол
// kplavn    - плавность кривой сплайна
//             (число точек между узлами объекта kplavn >= 3).
//             Чем больше kplavn,тем глаже смотрится линия
// precision - порог (точность) при фильтрации точек
// Если исходный объект имел 3-ю координату (высоту),то у сплайна
// также есть высота
int _fastcall splBuildSglad(TSPLINDATA *splindata,
                            DATAEDIT *source,
                            int kspil, int kplavn, double *precision);


// Создание сплайна - сглаживание объекта/подобъекта
// Это сплайн, который проходит только
// через первую и последнюю точки объекта/подобъекта и как бы
// сглаживает углы ломаной, соединяющей точки объекта/подобъекта
// (метрику исходного объекта/подобъекта).
// Сплайн строится только для объекта (subject=0) или для
// конкретного подобъекта subject
// source    - метрика объекта, по которому строится сплайн
// subject   - номер подобъекта, по которому строится сплайн
// kspil     - условный процент спиливания
//             углов ломаной линии объекта (1<= kspil <= 50)
//             (метрика исходного объекта/подобъекта).
//             Чем больше kspil, тем больше спиливается угол
// kplavn    - плавность кривой сплайна
//             (число точек между узлами объекта kplavn >= 3).
//             Чем больше kplavn,тем глаже смотрится линия
// precision - порог (точность) при фильтрации точек
// Если исходный объект имел 3-ю координату (высоту),то у сплайна
// также есть высота
int _fastcall splBuildSgladSubject(TSPLINDATA *splindata,
                                   DATAEDIT *source,
                                   int subject, int kspil,
                                   int kplavn, double *precision);


// Создание сплайна - огибание объекта
// Это сплайн, который проходит
// через все точки исходного объекта (метрика исходного
// объекта) и огибает его. Исходный объект как бы вписан в сплайн.
// Сплайн строится по объекту и всем его подобъектам
// source    - метрика объекта, по которому строится сплайн
// kprijim   - максимальная амплитуда
//             отхода кривой сплайна от отрезка
//             в процентах от длины отрезка ( >= 5 ).
//             Чем больше kprijim, тем более сплайн может
//             удаляться от отрезка ломаной (метрики исходного
//             объекта/подобъекта).
// kplavn    - плавность кривой сплайна
//             (число точек между узлами объекта kplavn >= 3).
//             Чем больше kplavn,тем глаже смотрится линия
// precision - порог (точность) при фильтрации точек
// Если исходный объект имел 3-ю координату (высоту),то у сплайна
// также есть высота
int _fastcall splBuildOgib(TSPLINDATA *splindata,
                           DATAEDIT *source,
                           int kprijim, int kplavn,
                           double *precision);


// Создание сплайна - огибание объекта/подобъекта
// Это сплайн, который проходит
// через все точки исходного объекта/подобъекта (метрика исходного
// объекта/подобъекта) и огибает его. Исходный объект/подобъекта
// как бы вписан в сплайн.
// Сплайн строится только для объекта (subject=0) или для
// конкретного подобъекта subject
// source    - метрика объекта, по которому строится сплайн
// subject   - номер подобъекта метрики сплайна
// kprijim   - максимальная амплитуда
//             отхода кривой сплайна от отрезка
//             в процентах от длины отрезка ( >= 5 ).
//             Чем больше kprijim, тем более сплайн может
//             удаляться от отрезка ломаной (метрики исходного
//             объекта/подобъекта).
// kplavn    - плавность кривой сплайна
//             (число точек между узлами объекта kplavn >= 3).
//             Чем больше kplavn,тем глаже смотрится линия
// precision - порог (точность) при фильтрации точек
// Если исходный объект имел 3-ю координату (высоту),то у сплайна
// также есть высота
int _fastcall splBuildOgibSubject(TSPLINDATA *splindata,
                                  DATAEDIT *source,
                                  int subject, int kprijim,
                                  int kplavn, double *precision);

// Определение угла наклона отрезка ломаной относительно
// оси  абсцисс ОY (Гаусс-Крюгер)
// в диапазоне  -180  +180 градусов
double _fastcall splUgol(double *x1, double *y1, double *x2, double *y2);

// Изменение угла u1 на величину angle
// вправо (lr = 2) или влево ( lr = 1)
// возвращает измененный угол  (-180 +180)
double _fastcall splDovorot(double *u1, int lr);

// Определение стороны огибания отрезка
// слева или справа
// возвращает:  1-слева   2-справа
int _fastcall splLeftRight(double *u1, double *u2);

// Вычисление факториала n!
int _fastcall splFact(int n);

// "ОРТОДРОМИЯ"

int _fastcall odOrtoDrom(double fa,double la,double fb,double lb,int kt,double *fl);
void odShir(double fa,double la,double lb,int kt,double ua,double *fl);
int  odDolg(double fa,double la,double fb,int kt,double ua,double *fl);    

// "ЛОКСОДРОМИЯ"
int _fastcall ldLoxoDrom(double fa,double la,double fb,double lb,int kt,double *fl);
void ldVdolg(double fa,double la,double fb,int kt,double alf,double Da,double *fl);
void ldVshir(double fa,double la,double fb,double lb,int kt,double alf,double Da,double *fl);
double ldFunk(double U, double f);
double ldResh(double U,double f);

#endif
