
#ifndef MAPTYPE_H
#define MAPTYPE_H

#ifndef MAPMACRO_H
 #include "mapmacro.h"
#endif

#ifndef MAPERR_RH
  #include "maperr.rh"
#endif

#define LT left
#define RT right
#define UP top
#define DN bottom

// Точность обработки координат при визуализации

#define DELTANULL  ((double)(1e-3))    // 23/03/00

// Точность обработки координат при выполнении расчетов

#define DOUBLENULL  ((double)(1e-6))   // 26/04/00

// Функция округления                  // 06/06/00

#define ROUND(x)    (((x) < 0) ? (long int)((x) - 0.5) : (long int)((x) + 0.5))


typedef struct SHORTPOINT    // КООРДИНАТЫ ТОЧКИ
{
  unsigned short int X;
  unsigned short int Y;
}
  SHORTPOINT;

typedef struct LONGPOINT     // КООРДИНАТЫ ТОЧКИ (ДЛИННАЯ МЕТРИКА)
{
#ifdef __cplusplus        // 11/04/01
  union { LONG x; LONG X; };
  union { LONG y; LONG Y; };
#else
  long int X;
  long int Y;
#endif
}
  LONGPOINT;

typedef struct FLOATPOINT    // КООРДИНАТЫ ТОЧКИ (ПЛАВАЮЩАЯ МЕТРИКА)
{
  float X;
  float Y;
}
  FLOATPOINT;

typedef struct DOUBLEPOINT   // КООРДИНАТЫ ТОЧКИ (ПЛАВАЮЩАЯ МЕТРИКА)
{
#ifdef __cplusplus           // 11/04/01
  union { double x; double X; };
  union { double y; double Y; };

  void operator  = (double value)  {         x  = value;   y  = value;  }
   int operator != (double value)  { return (x != value || y != value); }
   int operator == (double value)  { return (x == value && y == value); }
#else
  double X;
  double Y;
#endif
}
  DOUBLEPOINT;


typedef struct DRAWPOINT     // Аналог TPoint
{
#ifdef __cplusplus
  union { XYTYPE x; XYTYPE X; };           // 13/09/00
  union { XYTYPE y; XYTYPE Y; };

  void operator  = (int value)  {         x  = value;   y  = value;  }
   int operator != (int value)  { return (x != value || y != value); }
   int operator == (int value)  { return (x == value && y == value); }

  DRAWPOINT& operator - (DRAWPOINT& draw)
    { x -= draw.x;  y -= draw.y;  return *this;}

  DRAWPOINT& operator + (DRAWPOINT& draw)
    { x += draw.x;  y += draw.y;  return *this;}
#else        // 11/04/01
  XYTYPE X;
  XYTYPE Y;
#endif
}
  DRAWPOINT;


typedef struct DRAWSIZE      // Аналог TSize
{
#ifdef __cplusplus           // 11/04/01
  union { int cx; int CX; };
  union { int cy; int CY; };

  void operator  = (int value)  {         cx  = value;   cy  = value;  }
  int operator != (int value)  { return (cx != value || cy != value); }
  int operator == (int value)  { return (cx == value && cy == value); }

  DRAWSIZE& operator - (DRAWSIZE& draw)
    { cx -= draw.cx;  cy -= draw.cy;  return *this;}

  DRAWSIZE& operator + (DRAWSIZE& draw)
    { cx += draw.cx;  cy += draw.cy;  return *this;}
#else
  int CX;
  int CY;
#endif
}
  DRAWSIZE;


typedef struct DRAWLINE      // Координаты линии
{
  DRAWPOINT First;
  DRAWPOINT Second;
}
  DRAWLINE;


//-----------------------------------------------------------------
// КООРДИНАТЫ ПРЯМОУГОЛЬНИКА В РАЙОНЕ РАБОТ
// (X вверх, Y вправо, границы включаются)
//-----------------------------------------------------------------

typedef struct FRAME         // ЦЕЛЫЕ
{
  long X1;
  long Y1;
  long X2;
  long Y2;

#ifdef __cplusplus
  void operator = (long value)
  {
    X1 = value;  Y1 = value;
    X2 = value;  Y2 = value;
  }

  FRAME operator = (FRAME frame)
  {
    X1 = frame.X1;  Y1 = frame.Y1;
    X2 = frame.X2;  Y2 = frame.Y2;  return *this;
  }

  int operator != (long value)
  {
    return ( X1 != value || Y1 != value ||
             X2 != value || Y2 != value );
  }

  int operator == (long value)
  {
    return ( X1 == value && Y1 == value &&
             X2 == value && Y2 == value);
  }
#endif
}
  FRAME;


typedef struct DFRAME        // ПЛАВАЮЩИЕ
{
  double X1;
  double Y1;
  double X2;
  double Y2;

#ifdef __cplusplus
  void operator = (double value)
  {
    X1 = value;  Y1 = value;
    X2 = value;  Y2 = value;
  }
#endif
}
  DFRAME;


//-----------------------------------------------------------------
// КООРДИНАТЫ ПРЯМОУГОЛЬНИКА В ОКНЕ
// (X вправо, Y вниз, границы включаются)
//-----------------------------------------------------------------

typedef struct BOX           // ЦЕЛЫЕ
{
#ifdef __cplusplus    // 11/04/01
  union { long LT;  long lt; };
  union { long UP;  long up; };
  union { long RT;  long rt; };
  union { long DN;  long dn; };

  void operator = (long value)
  {
    LT = value;  UP = value;
    RT = value;  DN = value;
  }
#else
  long LT;
  long UP;
  long RT;
  long DN;
#endif
}
  BOX;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ОБ'ЯВЛЕНИЕ ИДЕНТИФИКАТОРОВ
// (ЯВЛЯЮТСЯ УКАЗАТЕЛЯМИ НА СООТВЕТСТВУЮЩИЕ КЛАССЫ С++ )
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

typedef long int  HMAP;    // ИДЕНТИФИКАТОР ОТКРЫТОЙ ВЕКТОРНОЙ КАРТЫ
                           // (УКАЗАТЕЛЬ НА TMapAccess)
typedef long int  HSITE;   // ИДЕНТИФИКАТОР ОТКРЫТОЙ ПОЛЬЗОВАТЕЛЬСКОЙ
                           // КАРТЫ (УКАЗАТЕЛЬ НА ЭЛЕМЕНТ ЦЕПОЧКИ)
                           // ЕСЛИ РАВЕН HMAP (ИЛИ 0) - РАБОТАЕМ С
                           // КАРТОЙ МЕСТНОСТИ (ФОНОВОЙ КАРТОЙ)
typedef long int  HOBJ;    // ИДЕНТИФИКАТОР ОБ'ЕКТА КАРТЫ
                           // (УКАЗАТЕЛЬ НА TObjectInfo)
typedef long int  HSELECT; // ИДЕНТИФИКАТОР КОНТЕКСТА ПОИСКА
                           // (УКАЗАТЕЛЬ НА TMapSelect)
typedef long int  HRSC;    // ИДЕНТИФИКАТОР КЛАССИФИКАТОРА КАРТЫ
                           // (УКАЗАТЕЛЬ НА TMapRsc)
typedef long int  HMTR3D;  // ИДЕНТИФИКАТОР ОТКРЫТОГО СЕАНСА
                           // ТРЕХМЕРНОЙ ВИЗУАЛИЗАЦИИ МЕСТНОСТИ
                           // (УКАЗАТЕЛЬ НА TMtr3D)
typedef long int  HCROSS;  // (УКАЗАТЕЛЬ НА TObjectCut)
typedef long int  HPOINT;  // (УКАЗАТЕЛЬ НА структуру CROSSPOINT)
typedef long int  HDRAW;   // (УКАЗАТЕЛЬ НА структуру TDrawEdit)
typedef long int  HPRINTER;// (УКАЗАТЕЛЬ НА TPrinter)
typedef long int  HVECT;   // (УКАЗАТЕЛЬ НА TVectorImageEdit)       // 29/07/03

// ИНТЕРФЕЙС PANTASK/PANACTION
typedef long int HPANACTION;   // УКАЗАТЕЛЬ НА TPanAction
typedef long int HMAPACTION;   // УКАЗАТЕЛЬ НА TUserAction

typedef long int HPANTASK;     // УКАЗАТЕЛЬ НА TPanTask
typedef long int HMAPTASK;     // УКАЗАТЕЛЬ НА TUserTask

typedef long int HMAPDOC;      // УКАЗАТЕЛЬ НА TMapWindow

typedef long int HOBJSET;      // УКАЗАТЕЛЬ НА TObjectSet

typedef long int HIMAGE;       // УКАЗАТЕЛЬ НА TCopyImage           // 14/12/05

typedef long int HFORMULA;     // УКАЗАТЕЛЬ НА TStrFormula          // 17/01/07

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++  СТРУКТУРА ЗАДАНИЯ МЕТРИКИ ОБ'ЕКТА  +++++++++
//++++++++++++++  В СИСТЕМЕ КООРДИНАТ ОКНА  +++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

#define PF_TESTTEXT    1    // Флаг выборки подписи в точке
#define PF_SKIPNUMBER  2    // Флаг пропуска текста с #          // 20/02/07
#define PF_UNICODETEXT 4    // Флаг текста в UNICODE             // 02/06/07

typedef struct _DLLCLASS POLYDATA                       
{
  POLYDATA() { memset(this, 0, sizeof(*this)); }

  DRAWPOINT * Points;  // Адрес массива объектов типа POINT
                       // с координатами точек
  long * PolyCounts;   // Адрес массива количества точек
  long        Count;   // Число ломаных (многоугольников, текстов)
  char **      Text;   // Указатель на массив адресов текстов
                       // подписей (сами тексты лежат
                       // в первоначальной метрике объекта)
  long    AlignCode;   // Код выравнивания для отображения текста
  char *   Semantic;   // Указатель на семантику объекта (SEMANTIC *)
                       // Если семантика не нужна в изображении - равно 0
  BOX        Border;   // Прямоугольник габаритов объекта в пикселах
                       // относительно области рисования
  double  ShowScale;   // Текущий масштаб отображения электронной карты
}
  POLYDATA;

typedef struct _DLLCLASS POLYDATAEX                     // 30/05/05
{
  POLYDATAEX() { memset(this, 0, sizeof(*this)); }

  DRAWPOINT * Points;  // Адрес массива объектов типа POINT
                       // с координатами точек
  long * PolyCounts;   // Адрес массива количества точек
  long        Count;   // Число ломаных (многоугольников, текстов)
  char **      Text;   // Указатель на массив адресов текстов
                       // подписей (сами тексты лежат
                       // в первоначальной метрике объекта)
  short   AlignCode;   // Код выравнивания для отображения текста
  short       Flags;   // Флаги обработки метрики - равно 0            // 05/06/07
  char *   Semantic;   // Указатель на семантику объекта (SEMANTIC *)
                       // Если семантика не нужна в изображении - равно 0
  BOX        Border;   // Прямоугольник габаритов объекта в пикселах
                       // относительно области рисования
  double  ShowScale;   // Текущий масштаб отображения электронной карты
  HRSC       MapRsc;   // Классификатор карты, содержащей отображаемый объект
  float      Height;   // Высота первой точки объекта (если 3D-координаты) или 0  // 04/07/06
  float      DX;       // Приращение от первой точки до второй на карте           // 29/08/07
  float      DY;       // в единицах карты - для ориентирования векторных объектов
}
  POLYDATAEX;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// Максимальные значения характеристик метрики
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#if defined(COMPACTGIS) || defined(MINIDATA)
#define GD_POINTCOUNT  32000L  // Наибольшее возможное количество точек
                               // метрики объекта
#define GD_POLYCOUNT   16000L  // Наибольшее возможное количество
                               // подобъектов метрики
#define GD_TEXTCOUNT   16000L  // Наибольшее возможное количество
                               // текстов в метрике подписи

#define MAXDATALENGTH (1024*1024L) // Максимальная длина метрики

#else

#define GD_POINTCOUNT 128000L  // Наибольшее возможное количество точек
                               // метрики объекта
#define GD_POLYCOUNT   64000L  // Наибольшее возможное количество
                               // подобъектов метрики
#define GD_TEXTCOUNT   32000L  // Наибольшее возможное количество
                               // текстов в метрике подписи

#define MAXDATALENGTH (16*1024*1024L) // Максимальная длина метрики

#endif

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++ Структуры форматов представления метрики объектов     +++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

typedef struct TEXTDATA      // Текст подписи в метрике
{                            // Общая длина = Length + 2
  unsigned char Length;      // Число символов
           char Text[256];   // Текст переменной длины
  unsigned char Zero;        // Замыкающий ноль
}
  TEXTDATA;


// ВИДЫ ФОРМАТОВ ОТДЕЛЬНОЙ ТОЧКИ МЕТРИКИ
typedef struct
{
  unsigned short int X;
  unsigned short int Y;
}
  XYSHORT;

typedef struct
{
  unsigned short int X;
  unsigned short int Y;
           float     H;
}
  XYHSHORT;

typedef struct
{
  LONG X;
  LONG Y;
}
  XYLONG;

typedef struct
{
  LONG X;
  LONG Y;
  float    H;
}
  XYHLONG;

typedef struct
{
  float X;
  float Y;
}
  XYFLOAT;

typedef struct
{
  float X;
  float Y;
  float H;
}
  XYHFLOAT;

typedef struct
{
  double X;
  double Y;
}
  XYDOUBLE;

typedef struct
{
  double X;
  double Y;
  double H;
}
  XYHDOUBLE;

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++ Структуры интерфейса MAPAPI +++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

enum KIND                 // ВИДЫ ФОРМАТОВ МЕТРИКИ
{
  IDSHORT2  = 0x7FFF7FFF, // двухбайтовая целочисленная
  IDLONG2   = 0x7FFE7FFE, // четырехбайтовая целочисленная
  IDFLOAT2  = 0x7FFD7FFD, // с плавающей запятой
  IDDOUBLE2 = 0x7FFC7FFC, // с плавающей запятой двойной точностью
  IDSHORT3  = 0x7FFB7FFB, // двухбайтовая целочисленная трехмерная
  IDLONG3   = 0x7FFA7FFA, // четырехбайтовая целочисленная трехмерная
  IDFLOAT3  = 0x7FF97FF9, // с плавающей запятой трехмерная
  IDDOUBLE3 = 0x7FF87FF8, // с плавающей запятой двойной точностью трехмерная
  IDBAD     = 0x7FF87FF7  // неизвестный вид
};

enum                          // ИДЕНТИФИКАТОРЫ ФАЙЛОВ (Intel)
{
    FILE_SXF  = 0x00465853,   // ДВОИЧНЫЙ SXF ФАЙЛ
    FILE_TXT  = 0x4658532E,   // ТЕКСТОВЫЙ SXF ФАЙЛ (.SXF)
    FILE_DIR  = 0x524944,     // ТЕКСТОВЫЙ DIR ФАЙЛ
    FILE_PCX  = 0x10,         // ФАЙЛ PCX (ОПРЕДЕЛЯЕТСЯ НЕ ЧЕТКО)
    FILE_BMP  = 0x4D42,       // ФАЙЛ BMP
    FILE_TIFF = 0x4949,       // ФАЙЛ TIFF
    FILE_JPEG = 0xD8FF,       // ФАЙЛ JPEG
    FILE_MAP  = 0x00505350,   // ПАСПОРТ РАЙОНА РАБОТ
    FILE_RST  = 0x00545352,   // ФАЙЛ RST
    FILE_RSW  = 0x00575352,   // ФАЙЛ RSW
    FILE_MTR  = 0x0052544D,   // ФАЙЛ MTR
    FILE_MTW  = 0x0057544D,   // ФАЙЛ MTW
    FILE_MTL  = 0x004C544D,   // ФАЙЛ MTL
    FILE_SIT  = 0x5449532E,   // ТЕКСТОВЫЙ SXF(.SIT) ФАЙЛ
    FILE_DXF  = 0x00465844,   // ФАЙЛ DXF
    FILE_MIF  = 0x0046494D,   // ФАЙЛ MAPINFO
    FILE_S57  = 0x00003000,   // ФАЙЛ S57(КАТАЛОГ)
    FILE_DGN  = 0x004E4744,   // ФАЙЛ Macrostation(DGN)   // 23/03/04 Sh.
    FILE_MPT  = 0x0054504D,   // ФАЙЛ MPT(ПРОЕКТ)
    FILE_RSC  = 0x00435352,   // ФАЙЛ RSC
    FILE_MTQ  = 0x0051544D,   // ФАЙЛ MTQ
    FILE_PLN  = 0x004E4C50,   // ФАЙЛ PLN (Talka)    // 15/12/02
    FILE_SHP  = 0x00504853,   // ФАЙЛ SHP (ArcView)  // 23/07/03
    FILE_PLS  = 0x00534C50,   // ФАЙЛ PLS (Список растров)          // 05/07/04
    FILE_TEXT = 0x00545854,   // Файл TXT(геодезические приборы)    // 23/11/04
    FILE_GPS  = 0x47504724,   // Файл GPS/NMEA ($GPG)               // 07/12/04
    FILE_GRD  = 0x00445247,   // ФАЙЛ GRD (матрицы формата FOTOMOD) // 10/12/04
    FILE_DBF  = 0x00464244,   // ФАЙЛ DBF (База данных)             // 16/12/04 Sh.
    FILE_TIN  = 0x004E4954,   // ФАЙЛ TIN                           // 31/03/05


                              // ИДЕНТИФИКАТОРЫ ФАЙЛОВ (Sparc, Mips)

    FILE_MAP_TURN = 0x50535000, // ПАСПОРТ РАЙОНА РАБОТ
    FILE_MTW_TURN = 0x4D545700, // ФАЙЛ MTW
    FILE_SXF_TURN = 0x53584600, // ДВОИЧНЫЙ SXF ФАЙЛ    //03/11/03
    FILE_DIR_TURN = 0x44495200, // ТЕКСТОВЫЙ DIR ФАЙЛ   //05/12/03
    FILE_RSW_TURN = 0x52535700, // ФАЙЛ RSW  // 20/01/04
    FILE_RSC_TURN = 0x52534300, // ФАЙЛ RSC
};

typedef struct FRAME MAPFRAME;

typedef struct DFRAME MAPDFRAME;

typedef struct MAPADJACENTSECTION  // ОПИСАНИЕ СМЕЖНОГО УЧАСТКА
{
  long int number;                 // номер участка
  long int first;                  // первая точка участка
  long int last;                   // последняя точка участка
}
  MAPADJACENTSECTION;

typedef struct MAPADJACENTLISTEX
{
  char      ListName[32];           // имя листа
  long int  List;                   // номер листа в районе
  long int  Key;                    // номер объекта
  long int  Object;                 // последовательный номер объекта на листе
  long int  Excode;                 // классификационный код объекта
  long int  First;                  // первая точка участка
  long int  Last;                   // последняя точка участка
}
  MAPADJACENTLISTEX;

typedef enum how       // КОДЫ УСЛОВИЙ ПОИСКА ПО СЕМАНТИКЕ
{
    CMBAD      = 0,    // ОШИБКА В ДАННЫХ
    CMPASS     = 0,    // ОТСУТСТВИЕ КОДА СЕМАНТИКИ  //11/12/03
      LESS     = 1,    // МЕНЬШЕ
    CMLESS     = 1,    // МЕНЬШЕ
    CMLESSEQ   = 3,    // МЕНЬШЕ ИЛИ РАВНО
      EQUAL    = 2,    // РАВНО
    CMEQUAL    = 2,    // РАВНО
    CMNOTEQ    = 5,    // НЕ РАВНО
      MORE     = 4,    // БОЛЬШЕ
    CMMORE     = 4,    // БОЛЬШЕ
    CMMOREEQ   = 6,    // БОЛЬШЕ ИЛИ РАВНО
    CMANY      = 7,    // ЛЮБОЕ ЗНАЧЕНИЕ

    // КОДЫ ОБОБЩАЮЩИХ УСЛОВИЙ
    CMOR       = 16,   // "ИЛИ" - ХОТЯ БЫ ОДНО ВЫПОЛНЯЕТСЯ
    CMAND      = 32,   // "И"   - ВСЕ ДОЛЖНЫ ВЫПОЛНИТЬСЯ
}
    HOW;

// Флажки, определяющие порядок поиска объектов
// Если указано WO_INMAP - номер карты определяется
// из HSELECT !

enum SEEKTYPE        // ПОРЯДОК ПОИСКА ОБ'ЕКТОВ
{
   WO_FIRST  = 0,    // Первый в цепочке
   WO_LAST   = 2,    // Последний в цепочке
   WO_NEXT   = 4,    // Следующий за найденным ранее
   WO_BACK   = 8,    // Предыдущий от ранее найденного
   WO_CANCEL = 16,   // Включая удаленные объекты
   WO_INMAP  = 32,   // Только по одной карте (соответствующей HSELECT)
   WO_VISUAL = 64,   // Поиск только среди видимых объектов
};

enum SELECTTYPEFLAG  // СПОСОБ ВЫДЕЛЕНИЯ ОБЪЕКТОВ
{
   STF_CONTOUR = 0,  // Выделение контуров
   STF_OBJECT  = 1,  // Выделение всего изображения объекта
};

enum SELECTLISTCODE           // ПРАВИЛО ФОРМИРОВАНИЯ СПИСКА УСЛОВИЙ ПОИСКА
{
   SELECTLIST_EXCLUSIVE = 0,  // Добавляемое условие единственное в списке
   SELECTLIST_UNION     = 1,  // Условие логически складывается с остальными
   SELECTLIST_CROSS     = 2,  // Условие логически умножается с остальными
};

enum SELECTMEASURE            // ТИП ИЗМЕРЕНИЙ ОБ"ЕКТОВ ДЛЯ ПОИСКА  25/04/02
{
   MEASURE_LENGTH      = 1,   // Длина (м)
   MEASURE_SQUARE      = 2,   // Площадь (кв.м)
   MEASURE_PERIMETER   = 3,   // Периметр (м)
   MEASURE_HEIGHT      = 10,  // Высота (м)
};

enum PPLACE           // ПРИМЕНЯЕМАЯ СИСТЕМА КООРДИНАТ
{
   PP_MAP     = 1,    // КООРДИНАТЫ ТОЧЕК В СИСТЕМЕ КАРТЫ В ДИСКРЕТАХ
   PP_PICTURE = 2,    // КООРДИНАТЫ ТОЧЕК В СИСТЕМЕ ИЗОБРАЖЕНИЯ В ПИКСЕЛАХ
   PP_PLANE   = 3,    // КООРДИНАТЫ ТОЧЕК В ПЛОСКОЙ ПРЯМОУГОЛЬНОЙ СИСТЕМЕ
                      // НА МЕСТНОСТИ В МЕТРАХ
   PP_GEO     = 4,    // КООРДИНАТЫ ТОЧЕК В ГЕОДЕЗИЧЕСКИХ КООРДИНАТАХ
                      // В РАДИАНАХ
};

enum VTYPE               // ТИП ОТОБРАЖЕНИЯ КАРТЫ     // 13/09/00
{
   // ЭКРАННЫЙ ВЫВОД
   VT_SCREEN          = 1, // ЭКРАННЫЙ (ЧЕРЕЗ DIB)
   VT_SCREENCONTOUR   = 2, // ЭКРАННЫЙ КОНТУРНЫЙ

   // ПРИНТЕРНЫЙ ВЕКТОРНЫЙ ВЫВОД
   VT_PRINT           = 3, // ПРИНТЕРНЫЙ ВЕКТОРНЫЙ (ЧЕРЕЗ WIN API)
   VT_PRINTGLASS      = 4, // ПРИНТЕРНЫЙ БЕЗ ЗАЛИВКИ ПОЛИГОНОВ
   VT_PRINTCONTOUR    = 5, // ПРИНТЕРНЫЙ КОНТУРНЫЙ, БЕЗ УСЛОВНЫХ ЗНАКОВ

   // ПРИНТЕРНЫЙ РАСТРИЗОВАННЫЙ ВЫВОД
   VT_PRINTRST        = 6, // ПРИНТЕРНЫЙ РАСТРИЗОВАННЫЙ (ЧЕРЕЗ WIN API)
   VT_PRINTGLASSRST   = 7, // ПРИНТЕРНЫЙ БЕЗ ЗАЛИВКИ ПОЛИГОНОВ
   VT_PRINTCONTOURRST = 8, // ПРИНТЕРНЫЙ КОНТУРНЫЙ, БЕЗ УСЛОВНЫХ ЗНАКОВ

   // ПРИНТЕРНЫЙ РАСТРИЗОВАННЫЙ (СПЕЦИАЛЬНЫЙ) ВЫВОД        // 13/02/03
   VT_PRINTRSTSQUARE  = 9, // ПРИНТЕРНЫЙ (ЗАЛИВКИ ПЛОЩАДНЫХ, ПОДПИСИ С ФОНОМ,
                           //             РАСТРЫ, МАТРИЦЫ)
   VT_PRINTRSTLINE    =10, // ПРИНТЕРНЫЙ (ЛИНИИ, ТОЧЕЧНЫЕ, ВЕКТОРНЫЕ,
                           //             ПОДПИСИ С ФОНОМ, ПОЛЬЗОВАТЕЛЬСКИЕ)
   VT_PRINTRSTTEXT    =11, // ПРИНТЕРНЫЙ (ПОДПИСИ, ШАБЛОНЫ)

   // ПРИНТЕРНЫЙ ВЕКТОРНЫЙ (СПЕЦИАЛЬНЫЙ) ВЫВОД. ИСПОЛЬЗУЕТСЯ ДЛЯ ЭКСПОРТА
   // ГРАФИКИ (POSTSCRIPT, WMF, EMF)                       // 16/12/04
   VT_PRINTEX         =15, // ПРИНТЕРНЫЙ ВЕКТОРНЫЙ (ЧЕРЕЗ WIN API)
};

enum OUTPUTAREA            // РЕЖИМЫ ВЫБОРА ОБЛАСТИ ВЫВОДА
{
  AREA_ALL            = 0, // Открытие : область вывода - весь район
                           // Закрытие : область вывода не сохранять

  AREA_FRAME          = 1, // Открытие : область вывода - из RectMetr
                           // Закрытие : область вывода -> в RectMetr

  AREA_SELECT_FRAME   = 2, // Открытие : область вывода - из RectMetr
                           // Закрытие : для выбора прямоугольного фрагмента

  AREA_CHANGE_FRAME   = 3, // Открытие : область вывода - из RectMetr
                           // Закрытие : для изменения фрагмента

  AREA_MOVE_FRAME     = 4, // Открытие : область вывода - из RectMetr
                           // Закрытие : для перемещения фрагмента

  AREA_SELECT_OBJECT  = 5, // Открытие : область вывода - из RectMetr
                           // Закрытие : для выбора области вывода по объекту

  AREA_SELECT_CONTOUR = 6, // Открытие : область вывода - из RectMetr
                           // Закрытие :  для выбора области вывода по контуру

  AREA_SELECT_TURN_FRAME = 10, // Флаг выбора повернутого фрагмента
};

enum CHARCODE         // ОПИСАНИЕ КОДИРОВКИ ТЕКСТОВ
{
  CC_ASCIIZ  = 0  ,   // CТРОКА СИМВОЛОВ (ASCIIZ), ОГРАНИЧЕННАЯ НУЛЕМ
  CC_KOI8    = 125,   // CТРОКА (KOI8), ОГРАНИЧЕННАЯ НУЛЕМ
  CC_ANSI    = 126,   // CТРОКА (ANSI, WINDOWS), ОГРАНИЧЕННАЯ НУЛЕМ
  CC_UNICODE = 127,   // CТРОКА СИМВОЛОВ (UNICODE), ОГРАНИЧЕННАЯ НУЛЕМ
};

enum SPLINETYPE           // ТИПЫ СПЛАЙНОВ
{
  SPLINETYPE_NONE   = 0,  // Ломаная линия
  SPLINETYPE_SMOOTH = 2,  // Сглаживающий сплайн (срезает углы)
  SPLINETYPE_POINTS = 4,  // Огибающий сплайн (проходит через точки)
};

enum POINTPOSITION        // РАЗМЕЩЕНИЕ ТОЧКИ ОТНОСИТЕЛЬНО ОТРЕЗКА
{
  PS_FIRST   = 1,         // Совпадает с первой точкой отрезка
  PS_SECOND  = 2,         // Совпадает со второй точкой отрезка
  PS_BEHIND  = 3,         // Лежит позади первой точки отрезка
  PS_BEYOND  = 4,         // Лежит впереди второй точки отрезка
  PS_BETWEEN = 5,         // Лежит на отрезке (между точками)
  PS_LEFT    = 6,         // Слева
  PS_RIGHT   = 7          // Справа
};


typedef struct GEODEGREE   // КООРДИНАТЫ ТОЧКИ В ГРАДУСАХ
{
  long int Degree;         // Градусы
  long int Minute;         // Минуты
  float    Second;         // Секунды
}
  GEODEGREE;

typedef struct SIGNDEGREE  // КООРДИНАТЫ ТОЧКИ В ГРАДУСАХ
{
  long int Degree;         // Градусы
  long int Minute;         // Минуты
  float    Second;         // Секунды
  long int Sign;           // Знак числа (+1 или -1)
}
  SIGNDEGREE;



typedef struct MTRDESCRIBE   // ОПИСАНИЕ ОТКРЫТОЙ МАТРИЦЫ
{
  char   Name[256];      // Имя файла
  double MinValue;       // Минимальное значение элемента в матрице
  double MaxValue;       // Максимальное значение элемента в матрице
  double ElementInPlane; // Размер элемента в метрах на местности
  DFRAME FrameMeters;    // Габариты матрицы (метры)
  long int ReliefType;   // Тип матрицы (0 - абсолютные высоты,
                         //  1 - абсолютные + относительные)
  long   UserType;       // Тип пользовательских данных
  long   View;           // Признак отображаемости
}
  MTRDESCRIBE;

typedef struct MTRCOLORDESCEX  // ОПИСАНИЕ ДИАПАЗОНА ВЫСОТ
                               // МАТРИЦЫ
{
  double MinHeight;            // Минимальная высота дипазона
  double MaxHeight;            // Максимальная высота дипазона
  COLORREF Color;              // Цвет,соответствующий диапазону высот
}
  MTRCOLORDESCEX;

typedef struct MTR3DVIEW     // ПАРАМЕТРЫ 3D-ОТОБРАЖЕНИЯ МАТРИЦЫ ВЫСОТ
{
  double AreaCenterX;        // Центр отображаемой области X,Y
  double AreaCenterY;        //   (в метрах на местности)
  double ViewPointX;         // Точка наблюдения X,Y,H
  double ViewPointY;         //   (в метрах на местности)
  double ViewPointH;         //
  unsigned long ShowScale;   // Знаменатель масштаба
  unsigned char Style;       // Cтиль (0 - серый, 1 - цветной)
  unsigned char ShowGrid;    // Наличие сетки (0 - нет, 1 - есть)
  unsigned char GridStep;    // Шаг сетки в пикселах (2 - 255)
  unsigned char ModelHeight; // Высота модели в пикселах (2 - 127)
}
  MTR3DVIEW;

enum CUTSHAPE                // Форма разреза
{
  CS_NONE          =   0,    // Отсутствует
  CS_VERTICALANGLE =   1,    // Вертикальный угловой разрез
                             //   с вершиной в точке CutX,CutY
  CS_VOLUMETRICAL  =  16,    // Объемный вырез
                             //   с вершиной в точке CutX,CutY,CutZ
  CS_HORIZONTAL    = 128,    // Горизонтальный срез по высоте CutH
};

enum SCALETYPE               // Тип шкалы
{
  ST_NONE          =   0,    // Отсутствует
  ST_ABSOLUTE      =   1,    // Абсолютная
  ST_FROMRELIEF    =   2,    // Относительная от рельефа
  ST_WITHOUTRELIEF =   3,    // Относительная без учета рельефа
};

#define MTL3D_MAXMODEL 0x01FF  // Максимальная высота модели матрицы слоев
                               // (является маской выделения высоты)

typedef struct MTR3DVIEWEX   // ПАРАМЕТРЫ 3D-ОТОБРАЖЕНИЯ МАТРИЦ (MTW и MTL)
{
  double AreaCenterX;        // Центр отображаемой области X,Y
  double AreaCenterY;        //   (в метрах на местности)
  double CutX;               // Координаты вершины разреза/выреза X,Y,Z
  double CutY;               //   (в метрах на местности)      - для MTL
  double CutZ;
  double CutH;               // Высота горизонтального среза (в метрах)

    long ShowScale;          // Знаменатель масштаба отображения местности
    long ModelHeight;        // Высота модели в пикселах (2 - MTL3D_MAXMODEL)
    long GridStep;           // Шаг сетки в пикселах (2 - 100)
    long CutShape;           // Форма разреза (см. CUTSHAPE)   - для MTL

   short ViewAngle;          // Угол наблюдения/наклона (в градусах)
   short RotationAngle;      // Угол поворота относительно центра AreaCenter
                             //   (в градусах)
    char Style;              // Cтиль (0 - серый, 1 - цветной)
    char ShowGrid;           // Наличие сетки (0 - нет, 1 - есть)
    char Shadow;             // Наличие тени (0 - нет, 1 - есть)
    char ScaleType;          // Тип шкалы (см. SCALETYPE)      - для MTL

    char CoverMatrix;        // Наличие матрицы высот   (0 - нет, 1 - есть)
    char CoverMap;           // Наличие карты           (0 - нет, 1 - есть)
    char CoverRaster;        // Наличие растра          (0 - нет, 1 - есть)
    char AccordScale;        // Согласование масштабов  (0 - нет, 1 - есть)
    char CoverMtq;           // Наличие матрицы качества(0 - нет, 1 - есть)  // 06/10/04
    char IsUpdate ;          // Перерисовка изображения (0 - нет, 1 - да)    // 21/10/05

    char Reserve[26];

  double CursorX;            // Координаты указателя X,Y
  double CursorY;            //   (в метрах на местности)

    long Width;              // Ширина изображения
    long Height;             // Высота изображения

    char Name[256];          // Имя файла отображаемой матрицы
                             //   (0 - все матрицы слоев)    - для MTL
}
  MTR3DVIEWEX;

                             // ПАРАМЕТРЫ 3D-ОТОБРАЖЕНИЯ МАТРИЦ СЛОЕВ (MTL)
typedef struct MTR3DVIEWEX MTL3DVIEW;                   // 16/10/03


typedef struct METAFILEBUILDPARM  // ПАРАМЕТРЫ СОЗДАНИЯ МЕТАФАЙЛА
{
  long CenterX;     // Координаты центра выводимой области
  long CenterY;     // (в метрах на местности)
  long Width;       // Ширина фрагмента (в миллиметрах)
  long Height;      // Высота фрагмента (в миллиметрах)
  long Scale;       // Масштаб изображения
  long VisualType;  // Тип визуализации
   // ЭКРАННЫЙ ВЫВОД
   //   VT_SCREEN          = 1, // ЭКРАННЫЙ (ЧЕРЕЗ DIB)
   //   VT_SCREENCONTOUR   = 2, // ЭКРАННЫЙ КОНТУРНЫЙ

   // ПРИНТЕРНЫЙ ВЕКТОРНЫЙ ВЫВОД
   //   VT_PRINT           = 3, // ПРИНТЕРНЫЙ ВЕКТОРНЫЙ (ЧЕРЕЗ WIN API)
   //   VT_PRINTGLASS      = 4, // ПРИНТЕРНЫЙ БЕЗ ЗАЛИВКИ ПОЛИГОНОВ
   //   VT_PRINTCONTOUR    = 5, // ПРИНТЕРНЫЙ КОНТУРНЫЙ, БЕЗ УСЛОВНЫХ ЗНАКОВ

   // ПРИНТЕРНЫЙ РАСТРИЗОВАННЫЙ ВЫВОД
   //   VT_PRINTRST        = 6, // ПРИНТЕРНЫЙ РАСТРИЗОВАННЫЙ (ЧЕРЕЗ WIN API)
   //   VT_PRINTGLASSRST   = 7, // ПРИНТЕРНЫЙ БЕЗ ЗАЛИВКИ ПОЛИГОНОВ
   //   VT_PRINTCONTOURRST = 8, // ПРИНТЕРНЫЙ КОНТУРНЫЙ, БЕЗ УСЛОВНЫХ ЗНАКОВ
}
  METAFILEBUILDPARM;


typedef struct METAFILEBUILDPARMEX  // ПАРАМЕТРЫ СОЗДАНИЯ EMF-ФАЙЛА
{
  DFRAME Frame;     // Габариты (метры)
  long Scale;       // Масштаб изображения
  char VisualType;  // Тип визуализации
                    //  1 - экранный (BITMAP)
                    //  2 - схематичный (BITMAP)
                    //  3 - принтерный
                    //  4 - прозрачный принтерный
                    //  5 - контурный принтерный
  char Border;      // Флаг рисования рамки
  char Intensity;   // Интенсивность заливки % (0-100)   // 15/02/00
  char Black;       // Флаг черно-белого изображения(1 - есть, 0 - нет)

  char DontClip;    // Не обрезать выбранный фрагмент по рамке (!= 0)
                    // (например, Corel9 не понимает ::SelectClipRgn() )
  char Reserve[7];  // Резерв (должен быть обнулен)
}
  METAFILEBUILDPARMEX;


typedef struct XIMAGEDESC   // Описатель битовой области XImage
{                           // (для применения с XWindow)    // 25/09/00
  char *    Point;          // Адрес начала области пикселов
  long int  Width;          // Ширина строки в пикселах
  long int  Height;         // Число строк
  long int  Depth;          // Размер элемента в битах (8,15,16,24,32)
  long int  CellSize;       // Размер элемента(пиксела) в байтах
  long int  RowSize;        // Ширина строки в байтах
}
  XIMAGEDESC;


enum GRIDTYPE                // ТИП СЕТКИ
{
  GRT_NONE  =   0,           // Отсутствует
  GRT_LINE  =   1,           // Сетка линий
  GRT_NODE  =   2,           // Сетка точек
  GRT_CROSS =   3,           // Сетка крестов
};

typedef struct GRIDPARM     // СТРУКТУРА ПАРАМЕТРОВ ПРЯМОУГОЛЬНОЙ СЕТКИ
{
  double    Step;           // Шаг сетки в метрах на местности
  long int  Type;           // Тип элемента (сетка, точки, кресты)
  struct
  {
   long int Color;
   long int Thick;
  }
            Image;          // Цвет и толщина линий (RGB, мкм)
  long int  Size;           // Размер элемента типа "крест" в мкм (1:250)
  long int  Shadow;         // Признак полупрозрачного отображения
  long int  Under;          // Признак отображения под картой 
}
  GRIDPARM;

// ПАРАМЕТРЫ ПОСТРОЕНИЯ ЗОНЫ ВИДИМОСТИ
typedef struct TBUILDZONEVISIBILITY                    // 18/05/05
{
  DOUBLEPOINT PointCenter;      // Исходная точка 
  double      RadiusMeter;      // Расстояние (в метрах на местности)
  double      Azimuth;          // Направление (в радианах)
  double      Angle;            // Угол обзора (в радианах)
  double      DeltaHight;       // Высота наблюдения (в метрах)
  double      DeltaObservation; // Приращение наблюдаемой точки (в метрах)
  long int    VisionRst;        // Видимость зон пересечения
                                // 0-со всех точек, 1-хотя бы с одной   
  long int    StyleRst;         // Степень видимости растра
                                // 0-прозрачный, 1-полупрозрачный
                                // 2-заполненный
  long int    ColorRst;         // Цвет растра
  long int    Inversion;        // Инверсия видимости

}
  TBUILDZONEVISIBILITY;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++ СТРУКТУРЫ ДЛЯ СОЗДАНИЯ ПЛАНОВ, КАРТ И ++++++++++++++++++
//++++++++ ПОЛЬЗОВАТЕЛЬСКИХ КАРТ                 ++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

typedef struct APPENDPLANELIST
{
long Length;              // Длина записи структуры APPENDLIST

char Nomenclature[32];    // Номенклатура листа
char ListName[32];        // Условное название листа
char FileName[256];       // Имя файла по которому в районе будет
                          // создан лист с данным именем и расширениями
                          // HDR,DAT,SEM ...

long Reserv;              // Резерв для выравнивания, должен быть 0
                          // 17/10/01

// Прямоугольные координаты листа в метрах
// (для пользовательской карты (SITE) должны быть 0)

double XSouthWest   ;  // X ю-з
double YSouthWest   ;  // Y ю-з
double XNorthWest   ;  // X с-з
double YNorthWest   ;  // Y с-з
double XNorthEast   ;  // X с-в
double YNorthEast   ;  // Y с-в
double XSouthEast   ;  // X ю-в
double YSouthEast   ;  // Y ю-в
}
  APPENDPLANELIST;


typedef struct CREATEPLANE
{
long Length;              // Длина записи структуры CREATEPLANE

char MapName[32];         // Имя района
long Scale;               // Знаменатель масштаба карты

APPENDPLANELIST List;     // Описание листа плана
}
  CREATEPLANE;


typedef struct CREATESITE
{
 long     Length;             // Длина записи структуры CREATESITE
 char     MapName[32];        // Имя района
 long int MapType;            // Обобщенный тип карты
 long int MaterialProjection; // Проекция исх. материала
 long     Scale;              // Знаменатель масштаба карты

                              // В радианах
 double FirstMainParallel;    // Первая главная параллель
 double SecondMainParallel;   // Вторая главная параллель
 double AxisMeridian;         // Осевой меридиан
 double MainPointParallel;    // Параллель главной точки
}
  CREATESITE;

typedef struct CREATESITEEX   // 11/05/07
{
 long     Length;             // Длина записи структуры CREATESITE
 char     MapName[256];       // Имя района в кодировке ANSI (UNICODE - для функций "Un")
 long int MapType;            // Обобщенный тип карты
 long int MaterialProjection; // Проекция исх. материала
 long int EllipsoideKind;     // Тип эллипсоида (1 - Красовского, 9 - WGS84,...)
 long     Scale;              // Знаменатель масштаба карты
 long     Reserve;            // Резерв (должен быть 0)

                              // В радианах
 double FirstMainParallel;    // Первая главная параллель
 double SecondMainParallel;   // Вторая главная параллель
 double AxisMeridian;         // Осевой меридиан
 double MainPointParallel;    // Параллель главной точки
 double PoleLatitude;         // Широта полюса проекции
 double PoleLongitude;        // Долгота полюса проекции
}
  CREATESITEEX;

typedef struct CREATESITEUN   // 11/05/07
{
 long     Length;             // Длина записи структуры CREATESITE
 WCHAR    MapName[128];       // Имя района в кодировке UNICODE (для функций "Un")
 long int MapType;            // Обобщенный тип карты
 long int MaterialProjection; // Проекция исх. материала
 long int EllipsoideKind;     // Тип эллипсоида (1 - Красовского, 9 - WGS84,...)
 long     Scale;              // Знаменатель масштаба карты
 long     Reserve;            // Резерв (должен быть 0)

                              // В радианах
 double FirstMainParallel;    // Первая главная параллель
 double SecondMainParallel;   // Вторая главная параллель
 double AxisMeridian;         // Осевой меридиан
 double MainPointParallel;    // Параллель главной точки
 double PoleLatitude;         // Широта полюса проекции
 double PoleLongitude;        // Долгота полюса проекции
}
  CREATESITEUN;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++ СТРУКТУРА РАЗДЕЛЕНИЯ 4 БАЙТОВ НА СОСТАВЛЯЮЩИЕ ++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



typedef union
{
  struct
  {
    unsigned char b1;
    unsigned char b2;
    unsigned char b3;
    unsigned char b4;
  }
    Byte;              // Представление в виде 8-битовых полей

  struct
  {
    unsigned short w1;
    unsigned short w2;
  }
    Word;              // Представление в виде 16-битовых полей

  ULONG Long;  // Представление в виде 32-битового поля

#ifdef __cplusplus
  long Value() { return (long) Long; }

  // Запросить значение (long)
  long GetLong(long & value)
  {
    return (long)(Long = (ULONG)value);
  }

  // Запросить значение (long)
  long GetLong(unsigned long & value)
  {
    return (long)(Long = (ULONG)value);
  }

  // Запросить значение (long) по адресу address (4 байта)
  long GetLong(const char* address)
  {
#ifdef RISCCPU
    Byte.b1 = address[0];
    Byte.b2 = address[1];
    Byte.b3 = address[2];
    Byte.b4 = address[3];
#else
    Long = *((ULONG *)address);
#endif
    return (long)Long;
  }

  // Запросить значение (long) по адресу address (4 байта)
  // в обратной последовательности байт
  long GetTurnLong(long & value)
  {
    return GetTurnLong((char *)&value);
  }

  // Запросить значение (long) по адресу address (4 байта)
  // в обратной последовательности байт
  long GetTurnLong(unsigned long & value)
  {
    return GetTurnLong((char *)&value);
  }

  // Запросить значение (long) по адресу address (4 байта)
  // в обратной последовательности байт
  long GetTurnLong(char* address)
  {
    Byte.b4 = address[0];
    Byte.b3 = address[1];
    Byte.b2 = address[2];
    Byte.b1 = address[3];
    return (long)Long;
  }

  // Установить значение (long) по адресу address (4 байта)
  long PutLong(long & value)
  {
    return (value = (long)Long);
  }

  // Установить значение (long) по адресу address (4 байта)
  long PutLong(unsigned long & value)
  {
    return (long)(value = (unsigned long)Long);
  }

  // Установить значение (long) по адресу address (4 байта)
  long PutLong(char* address)
  {
#ifdef RISCCPU
    address[0] = Byte.b1;
    address[1] = Byte.b2;
    address[2] = Byte.b3;
    address[3] = Byte.b4;
#else
    *((ULONG *)address) = Long;
#endif
    return (long)Long;
  }

  // Запросить значение (short int)
  int GetShort(short int & value)
  {
    return GetShort((char *)&value);
  }

  // Запросить значение (short int)
  int GetShort(unsigned short int & value)
  {
    return GetShort((char *)&value);
  }

  // Запросить значение (int) по адресу address (2 байта)
  int GetShort(char* address)
  {
    Long = 0;
#ifdef RISCCPU
#ifdef NUMBERTURN              // 04/03/00
    Byte.b3 = address[0];
    Byte.b4 = address[1];
#else
    Byte.b1 = address[0];
    Byte.b2 = address[1];
#endif
#else
    Word.w1 = *((unsigned short *)address);
#endif
    return (int)Long;
  }

  // Запросить значение (int) по адресу address (2 байта)
  // в обратной последовательности байт
  int GetTurnShort(short int & value)
  {
    return GetTurnShort((char *)&value);
  }

  // Запросить значение (int) по адресу address (2 байта)
  // в обратной последовательности байт
  int GetTurnShort(unsigned short int & value)
  {
    return GetTurnShort((char *)&value);
  }

  // Запросить значение (int) по адресу address (2 байта)
  // в обратной последовательности байт
  int GetTurnShort(char* address)
  {
    Long = 0;
#ifdef NUMBERTURN
    Byte.b4 = address[0];
    Byte.b3 = address[1];
#else
    Byte.b2 = address[0];
    Byte.b1 = address[1];
#endif
    return (int)Long;
  }

  // Установить значение (short int)
  int PutShort(short int & value)
  {
    return PutShort((char *)&value);
  }

  // Установить значение (short int)
  int PutShort(unsigned short int & value)
  {
    return PutShort((char *)&value);
  }

  // Установить значение (int) по адресу address (2 байта)
  int PutShort(char* address)
  {
#ifdef RISCCPU
#ifdef NUMBERTURN              // 04/03/00
    address[0] = Byte.b3;
    address[1] = Byte.b4;
#else
    address[0] = Byte.b1;
    address[1] = Byte.b2;
#endif
#else
    *((unsigned short *)address) = Word.w1;
#endif
    return (int)Long;
  }
#endif  // __cplusplus
}
  REGISTER;

// Определения для С (REGISTER , char*) :

#if defined(__BORLANDC__) // Для Borland C++

#define LongToRegister(register, point) register.Long = ((long *)point)[0];

#else

#define LongToRegister(register, point) { register.Byte.b1 = ((char *)point)[0]; \
                                          register.Byte.b2 = ((char *)point)[1]; \
                                          register.Byte.b3 = ((char *)point)[2]; \
                                          register.Byte.b4 = ((char *)point)[3]; }
#endif

#define TurnLongToRegister(register, point) { register.Byte.b4 = ((char *)point)[0]; \
                                              register.Byte.b3 = ((char *)point)[1]; \
                                              register.Byte.b2 = ((char *)point)[2]; \
                                              register.Byte.b1 = ((char *)point)[3]; }

#define RegisterToLong(register, point) { ((char *)point)[0] = register.Byte.b1; \
                                          ((char *)point)[1] = register.Byte.b2; \
                                          ((char *)point)[2] = register.Byte.b3; \
                                          ((char *)point)[3] = register.Byte.b4; }

#define TurnRegisterToLong(register, point) { ((char *)point)[0] = register.Byte.b4; \
                                              ((char *)point)[1] = register.Byte.b3; \
                                              ((char *)point)[2] = register.Byte.b2; \
                                              ((char *)point)[3] = register.Byte.b1; }

#ifdef NUMBERTURN
#define ShortToRegister(register, point) {register.Long    = 0;        \
                                          register.Byte.b3 = ((char *)point)[0]; \
                                          register.Byte.b4 = ((char *)point)[1]; }

#define RegisterToShort(register, point) {((char *)point)[0] = register.Byte.b3; \
                                          ((char *)point)[1] = register.Byte.b4; }

#else
#define ShortToRegister(register, point) {register.Long    = 0;        \
                                          register.Byte.b1 = ((char *)point)[0]; \
                                          register.Byte.b2 = ((char *)point)[1]; }

#define RegisterToShort(register, point) {((char *)point)[0] = register.Byte.b1; \
                                          ((char *)point)[1] = register.Byte.b2; }
#endif

#ifdef NUMBERTURN
#define TurnShortToRegister(register, point) {register.Long    = 0;    \
                                          register.Byte.b4 = ((char *)point)[0]; \
                                          register.Byte.b3 = ((char *)point)[1]; }
#else
#define TurnShortToRegister(register, point) {register.Long    = 0;    \
                                          register.Byte.b2 = ((char *)point)[0]; \
                                          register.Byte.b1 = ((char *)point)[1]; }
#endif

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//++++++++ СТРУКТУРА РАЗДЕЛЕНИЯ 8 БАЙТОВ НА СОСТАВЛЯЮЩИЕ ++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

typedef union
{
  struct
  {
    unsigned char b1;
    unsigned char b2;
    unsigned char b3;
    unsigned char b4;
    unsigned char b5;
    unsigned char b6;
    unsigned char b7;
    unsigned char b8;
  }
    Byte;              // Представление в виде 8-битовых полей

  double Double;  //  Представление в виде 64-битового поля

#ifdef __cplusplus
  double Value() { return Double; }

  // Запросить значение (double) по адресу address (8 байт)
  double GetDouble(double & value)
  {
    return GetDouble((char *)&value);
  }

  // Запросить значение (double) по адресу address (8 байт)
  double GetDouble(const char* address)
  {
#ifdef RISCCPU
    Byte.b1 = address[0];
    Byte.b2 = address[1];
    Byte.b3 = address[2];
    Byte.b4 = address[3];
    Byte.b5 = address[4];
    Byte.b6 = address[5];
    Byte.b7 = address[6];
    Byte.b8 = address[7];
#else
    Double = *((double *)address);
#endif
    return (double)Double;
  }

  // Запросить значение (double) по адресу address (8 байт)
  // в обратной последовательности байт
  double GetTurnDouble(double & value)
  {
    return GetTurnDouble((char *)&value);
  }

  // Запросить значение (double) по адресу address (8 байт)
  // в обратной последовательности байт
  double GetTurnDouble(const char* address)
  {
    Byte.b8 = address[0];
    Byte.b7 = address[1];
    Byte.b6 = address[2];
    Byte.b5 = address[3];
    Byte.b4 = address[4];
    Byte.b3 = address[5];
    Byte.b2 = address[6];
    Byte.b1 = address[7];
    return (double)Double;
  }

  // Установить значение (double) по адресу address (8 байт)
  double PutDouble(double & value)
  {
    return PutDouble((char *)&value);
  }

  // Установить значение (double) по адресу address (8 байт)
  double PutDouble(char* address)
  {
#ifdef RISCCPU
    address[0] = Byte.b1;
    address[1] = Byte.b2;
    address[2] = Byte.b3;
    address[3] = Byte.b4;
    address[4] = Byte.b5;
    address[5] = Byte.b6;
    address[6] = Byte.b7;
    address[7] = Byte.b8;
#else
    *((double *)address) = Double;
#endif
    return (double)Double;
  }
#endif  // __cplusplus
}
  DOUBLEREGISTER;

// Определения для С (DOUBLEREGISTER , char*) :

#define DoubleToRegister(register, point) { register.Byte.b1 = ((char *)point)[0]; \
                                          register.Byte.b2 = ((char *)point)[1]; \
                                          register.Byte.b3 = ((char *)point)[2]; \
                                          register.Byte.b4 = ((char *)point)[3]; \
                                          register.Byte.b5 = ((char *)point)[4]; \
                                          register.Byte.b6 = ((char *)point)[5]; \
                                          register.Byte.b7 = ((char *)point)[6]; \
                                          register.Byte.b8 = ((char *)point)[7]; }

#define TurnDoubleToRegister(register, point) { register.Byte.b8 = ((char *)point)[0]; \
                                              register.Byte.b7 = ((char *)point)[1]; \
                                              register.Byte.b6 = ((char *)point)[2]; \
                                              register.Byte.b5 = ((char *)point)[3]; \
                                              register.Byte.b4 = ((char *)point)[4]; \
                                              register.Byte.b3 = ((char *)point)[5]; \
                                              register.Byte.b2 = ((char *)point)[6]; \
                                              register.Byte.b1 = ((char *)point)[7]; }

#define RegisterToDouble(register, point) { ((char *)point)[0] = register.Byte.b1; \
                                          ((char *)point)[1] = register.Byte.b2; \
                                          ((char *)point)[2] = register.Byte.b3; \
                                          ((char *)point)[3] = register.Byte.b4; \
                                          ((char *)point)[4] = register.Byte.b5; \
                                          ((char *)point)[5] = register.Byte.b6; \
                                          ((char *)point)[6] = register.Byte.b7; \
                                          ((char *)point)[7] = register.Byte.b8; }

// Запросить значение (short int)

#if !defined(WINCE) && !defined(NUMBERTURN)    // 07/06/02
  #define GetWordValue(value) ((int)((unsigned short) value))
#else
 #ifdef __cplusplus
  inline int GetWordValue(long int value) // 25/04/01
   {
     REGISTER Register;
     return Register.GetShort((char *)&value);
   }
 #else
  #define GetWordValue(value) ((int)((unsigned short) value))
 #endif
#endif


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++++++   CТРУКТУРА ОПИСАНИЯ СТАНДАРТНОЙ ПАЛИТРЫ   ++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

typedef struct PALETTE256
{
  WORD         palVersion;
  WORD         palNumEntries;
  PALETTEENTRY palPalEntry[256];
}
  PALETTE256;

typedef ULONG CELL4;              // 28/07/06
typedef unsigned short CELL2;
typedef unsigned char  CELL1;

// ФОРМАТ ЗАПОЛНЯЕМОГО ЭЛЕМЕНТА DIB
#ifdef  WIN32API

#ifndef WINCE
  typedef CELL4  CELL;
  #define CELLSIZE 4
#else
  typedef CELL2  CELL;
  #define CELLSIZE 2
#endif

#else

#if defined(MINIDATA) || defined(TYNIDATA)
  typedef CELL1  CELL;
  #define CELLSIZE 1
#else
//#ifdef NUMBERTURN
  typedef CELL4  CELL;
  #define CELLSIZE 4
//#else
//  typedef CELL2  CELL;
//  #define CELLSIZE 2
//#endif  // NUMBERTURN
#endif

#endif // !WIN32API


// ----------------------------------------------------------------
// Cтруктура размеров и свойств изображения объектов
// все размеры даны в мкм. (см. MAPGDI.H)
// Для шрифтов и шаблонов - размеры одной буквы
// Если объект "векторный" - TwoPoint = 1, иначе - 0;
// Для "неограниченного" объекта - размеры 0;
// ----------------------------------------------------------------

typedef struct IMAGESIZE
{           // 11/10/02
   unsigned long Number;          // номер функции отображения
   unsigned long Base  ;          // размер базы объекта
            long DeltaH;          // расстояние от левого верхнего
            long DeltaV;          // угла габаритов до базы(точки
                                  // отсчета) объекта
   unsigned long HorizontalSize;  // размеры по горизонтали
   unsigned long VerticalSize  ;  // размеры по вертикали

   unsigned long Horizontal : 1;  // расположен горизонтально
   unsigned long Vertical   : 1;  // расположен вертикально
   unsigned long TwoPoint   : 1;  // метрика из 2 точек
   unsigned long AlignV     : 2;  // выравнивание по вертикали
   unsigned long AlignH     : 2;  // выравнивание по горизонтали
   unsigned long Wide       : 2;  // ширина шрифта
   unsigned long Type       : 8;  // тип шрифта (0-4)
   unsigned long Italic     : 1;  // наклон символов    // 13/06/06
   unsigned long Rezerv     :14;  // резерв
}
  IMAGESIZE;

// ----------------------------------------------------------------
// Cтруктура описывающая габаритную рамку изображения объекта
// в виде развернутого прямоугольника. Все размеры даны в мкм
// на изображении карты в базовом масштабе относительно первой
// точки метрики объекта. Направление осей картографическое (X вверх,
// Y вправо).
// ----------------------------------------------------------------

typedef struct IMAGEFRAME
{
   DOUBLEPOINT LeftTop;          // Координаты первой точки в мкм
   DOUBLEPOINT RightTop;         // Координаты второй точки в мкм
   DOUBLEPOINT RightBottom;      // Координаты третьей точки в мкм
   DOUBLEPOINT LeftBottom;       // Координаты четвертой точки в мкм
}
  IMAGEFRAME;

// ----------------------------------------------------------------
// Функции обратного вызова
// ----------------------------------------------------------------
#ifdef WIN32API
typedef long int (WINAPI * BREAKCALL)(long int parm);
typedef long int (WINAPI * BEFOREPAINT)
                 (long int parm, HDC hdc, RECT * rect);
typedef long int (WINAPI * MASKCALL)(long int parm);     // 15/02/05
#else
typedef long int (*BREAKCALL)(long int parm);
typedef long int (*BEFOREPAINT)
                 (long int parm, HDC hdc, RECT * rect);
typedef long int (* MASKCALL)(long int parm);            // 15/02/05
#endif

#ifdef LINUXAPI        // 04/04/02
// ----------------------------------------------------------------
// Обработчик сообщений
// ----------------------------------------------------------------
typedef long int (* MSGHANDLER)
    (long int hwnd, long int code, long int p1, long int p2, long int typemsg);  // 04/04/02

// ------------------------------------------------------------------
//  Функция MessageBox для LINUX
// ------------------------------------------------------------------
typedef int (* MESSAGEBOX)(HWND hwnd, const TCHAR * message,
                           const TCHAR * title, int flag);
#endif

// ----------------------------------------------------------------
//  КОДЫ ЯЗЫКОВ СООБЩЕНИЙ И ПУНКТОВ МЕНЮ
// ----------------------------------------------------------------

enum MAPAPILANGUAGE
{
  ML_ENGLISH = 1,  // АНГЛИЙСКИЙ
  ML_RUSSIAN = 2   // РУССКИЙ
};

// ----------------------------------------------------------------
//  ИДЕНТИФИКАТОРЫ КОМАНД (WM_COMMAND)
// ----------------------------------------------------------------

#define WM_OBJECT       0x585    // Смена объекта
#define WM_LIST         0x586    // Смена листа
#define WM_INFOLIST     0x584    // Информация о листе
#define WM_ERRORCOORD   0x583    // Информация о ошибках паспорта
#define WM_ERROR        0x587    // Информация об ошибках
#define WM_MAP          0x588    // Смена текущей карты

#define WM_PROGRESSBAR  0x590    // Сообщение о соотоянии процесса
#define WM_MAPEVENT     0x591    // Сообщение о событиях карты

// ----------------------------------------------------------------
//  ИДЕНТИФИКАТОРЫ СООБЩЕНИЙ (MESSAGE)
// ----------------------------------------------------------------

#define WM_LEFTTOPPOINT 0x600    // Cообщение окну карты из задачи
                                 // Запрос координат верхнего левого
                                 // угла окна карты в пикселах изображения
                                 // wparam : (POINT * point)         //28/11/02
                                 // lparam : 0
                                 // result : 0x600

#define WM_MOVEDOC      0x601    // Cообщение окну карты из задачи
                                 // Указание на необходимость
                                 // переместить изображение карты в заданную
                                 // точку, координаты верхнего левого угла окна
                                 // карты в пикселах изображения
                                 // wparam : (POINT * point)         //28/11/02
                                 // lparam : 0 или (POINT * marker)  //28/11/02
                                 // координаты маркера,обрабатывать не обязательно
                                 // result : 0x601

#define WM_OPENDOC      0x602    // Cообщение окну приложения или карты из задачи
                                 // Указание на необходимость
                                 // открыть карту по имени файла (MAP,MTW,RSW,...)
                                 // wparam : (const char * name)
                                 // lparam : 0 или (DOUBLEPOINT * point),
                                 // координаты в метрах точки, которую нужно
                                 // показать в центре окна карты
                                 // result : 0x602

// --------------------------------------------------------------
//  Загрузить библиотеку DLL
//  При поиске DLL проверяется и директория приложения
//  При ошибке возвращает ноль и выдает сообщение на экран
// --------------------------------------------------------------

#ifdef __cplusplus
FARPROC LoadMapLibrary(const char * dllname,
                       HINSTANCE&   libinst,
                       const char * funcname,
                       int message = 1);
#else
FARPROC LoadMapLibrary(const char * dllname,
                       HINSTANCE    libinst,
                       const char * funcname,
                       int message );
#endif


// --------------------------------------------------------------
//  Структуры для вызова прикладных задач
// --------------------------------------------------------------

typedef struct TASKPARM        // ПАРАМЕТРЫ ПРИКЛАДНОЙ ЗАДАЧИ
{
  long int    Language;        // Код языка диалогов (1 - ENGLISH,
                               // 2 - RUSSIAN, ...)
  HINSTANCE   Resource;        // Модуль ресурсов приложения
  const char* HelpName;        // Полное имя файла ".hlp"
  const char* IniName;         // Полное имя файла ".ini" приложения
  const char* PathShell;       // Каталог приложения (exe,dll,...)
  const char* ApplicationName; // Имя приложения
#ifdef WIN32API
  HWND        Handle;          // Идентификатор главного окна приложения
#else
  MSGHANDLER  Handle;          // Идентификатор обработчика команд главного окна приложения
#endif
}
  TASKPARM;

typedef struct DROMPARM
{
  int Precision; // Точность вычислений (0 - 0.  1 - 0.00  2 - 0.0000  3 - 0.000000  4 - 0.00000000)
  int Value;     // Единица измерения (0 - дм, 1 - м, 2 - км, 3 - мм)
}
  DromParm;

typedef struct TASKPARMEX      // ПАРАМЕТРЫ ПРИКЛАДНОЙ ЗАДАЧИ
{
  long int    Language;        // Код языка диалогов (1 - ENGLISH,
                               // 2 - RUSSIAN, ...)
  HINSTANCE   Resource;        // Модуль ресурсов приложения
  const char* HelpName;        // Полное имя файла ".hlp"
  const char* IniName;         // Полное имя файла ".ini" приложения
  const char* PathShell;       // Каталог приложения (exe,dll,...)
  const char* ApplicationName; // Имя приложения
#ifdef WIN32API
  HWND        Handle;          // Идентификатор главного окна приложения
#else
  MSGHANDLER  Handle;          // Идентификатор обработчика команд главного окна приложения
#endif
  HWND        DocHandle;       // Идентификатор окна карты (документа)
  long int    StayOnTop;       // Признак выставления форме свойтсва StayOnTop  // 14/05/05
}
  TASKPARMEX;


// --------------------------------------------------------------
// Выдать сообщение об ошибке
// code - код ошибки (см. MAPERR.RH)
// --------------------------------------------------------------
#ifdef __cplusplus
extern "C"
{
#endif
  void _MAPAPI ErrorMessage(int code,const char * filename);
#ifdef __cplusplus
}
#endif

enum MESSAGETYPE
{
  MT_INFO     = 0,    // Информационное сообщение
  MT_ERROR    = 1,    // Сообщение об ошибке
  MT_WARNING  = 2,    // Информационное сообщение
  MT_CONTINUE = 4,    // Продолжение предыдущего сообщения
                      // (на той же строке)
};

// --------------------------------------------------------------
// Описание структур для работы с меню
// --------------------------------------------------------------

#define MENUEXTENDIDENT   0x7FFF7FFF

typedef struct MENUEXTEND         // ОПИСАНИЕ РАЗДЕЛА МЕНЮ
{
  long int Ident;                 // Метка начала записи 0x7FFF7FFF
  long int Count;                 // Число пунктов меню
  struct
  {
   long int Command;              // Идентификатор команды (-1 для разделителя)
   long int Check;                // Признак выделения пункта галочкой (0/1)
   char     Text[32];             // Текст строки меню
  }
   Item[32];
}
  MENUEXTEND;

typedef struct COMMANDENABLER     // ЗАПРОС СОСТОЯНИЯ ПУНКТА МЕНЮ ИЛИ КНОПКИ
{
  long int     Command;           // Идентификатор команды (-1 для разделителя)
  long int     Enable;            // Признак активности
  long int     Check;             // Признак выставления "галочки" - 1, снятия - 0
  MENUEXTEND * Menu;              // Раздел меню, который добавляется за текущим
  char         Text[256];         // Новый текст пункта меню
}
  COMMANDENABLER;

typedef struct VIEWHELPEX         // ЗАПРОС НА ОТОБРАЖЕНИЕ HELP (AW_VIEWHELPEX)
{
  const char * HelpName;          // Имя файла HELP
  long int     Topic;             // Номер раздела
}
  VIEWHELPEX;


typedef struct CONTROLMENU        // ДОБАВИТЬ/УДАЛИТЬ/ОТОБРАЗИТЬ/ЗАПРОСИТЬ... ПУНКТ ГЛАВНОГО МЕНЮ (AW_MENUCONTROL)
{                                 // WPARAM=MC_APEENDMENU,MC_DELETEMENU...,LPARAM=CONTROLMENU*  // 12/01/05
  char Name[32];                  // Имя пункта меню (идентификатор)
  char Caption[64];               // Название пункта меню (отображается на панели)      // 23/03/05
  char After[32];                 // Имя пункта меню, за которым вставляется данный пункт ("MenuFile","MenuView"...)
}                                 // Если равно 0, то в конец, если символ #, то за ним порядковый номер с 1,
  CONTROLMENU;                    // которым будет размещен данный пункт

typedef struct CONTROLITEM        // ДОБАВИТЬ/УДАЛИТЬ... ПОДПУНКТ ГЛАВНОГО МЕНЮ (AW_MENUCONTROL)
{                                 // WPARAM=MC_APPENDMENUITEM..,LPARAM=CONTROLITEM*
  char Name[32];                  // Имя пункта меню (идентификатор) ("MenuFile","MenuView"...,"MenuTask"...)
  char Caption[64];               // Название подпункта меню (отображается на панели)    // 23/03/05
  long int Item;                  // Числовой идентификатор команды (посылается задаче при выборе пункта меню)
  long int SubItem;               // Числовой идентификатор команды (посылается задаче при выборе подпункта меню)
  long int After;                 // Идентификатор пункта/подпункта за которым добавляется пункт меню,
}                                 // 0 - в конце, -1 - в начале, -2 - вторым и т.д.
  CONTROLITEM; 





//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++  Описание структур классификатора (RSC)                   +++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// ЛОКАЛИЗАЦИЯ ОБ'ЕКТА (ТИП)
enum OBJECT_LOCAL { LOCAL_LINE = 0,  LOCAL_SQUARE = 1, LOCAL_POINT = 2,
                    LOCAL_TITLE = 3, LOCAL_VECTOR = 4, LOCAL_MIXED = 5 };

// НАПРАВЛЕНИЕ ЦИФРОВАНИЯ ОБ'ЕКТА
enum OBJECT_DIRECT
{
   OD_UNDEFINED = 1,        // ВДОЛЬ КОНТУРА ИЛИ ПРОИЗВОЛЬНО
   OD_RIGHT     = 2,        // ОБ'ЕКТ СЛЕВА ОТ КОНТУРА
   OD_LEFT      = 4,        // ОБ'ЕКТ СЛЕВА ОТ КОНТУРА
};

// РЕЖИМЫ ЗАМЫКАНИЯ ОБ'ЕКТА      //01/03/01

enum { ABR_APPEND   = 0,  // Добавить точку в конце объекта
                            // не добавляет, если объект замкнут
       ABR_LAST     = 1,  // Обновить последнюю точку
       ABR_FIRST    = 2,  // Обновить первую точку
       ABR_ADDLAST  = 3,  // Добавить точку в конце объекта
       ABR_ADDFIRST = 4   // Добавить первую точку
     };

#define  OTHERSCALERSC  10000L
#define  MAXSCALERSC  40000000L

// СТРУКТУРА ДЛЯ СОЗДАНИЯ КЛАССИФИКАТОРА
typedef struct RSCCREATE
{
  char Name[32]; // Название классификатора
  char Type[32]; // Тип классификатора
  char Code[8];  // Код классификатора 
  LONG Scale;    // Знаменатель масштаба
  LONG Language; // Язык (MAPAPILANGUAGE)
}
  RSCCREATE;

typedef struct RSCCREATEUN
{
  WCHAR Name[32]; // Название классификатора
  WCHAR Type[32]; // Тип классификатора
  WCHAR Code[8];  // Код классификатора
  LONG Scale;     // Знаменатель масштаба
  LONG Language;  // Язык (MAPAPILANGUAGE)
}
  RSCCREATEUN;

// ОПИСАНИЕ ОБ'ЕКТОВ
typedef struct RSCOBJECT
{
   ULONG Length   ; // РАЗМЕР СТРУКТУРЫ
   ULONG Code     ; // КЛАССИФИКАЦИОННЫЙ КОД
   ULONG Local    ; // ХАРАКТЕР ЛОКАЛИЗАЦИИ  (OBJECT_LOCAL)
   ULONG Segment  ; // Н0МЕР СЛОЯ ( НЕ БОЛЕЕ 255)
   ULONG Scale    ; // 1 - ОБ'ЕКТ МАСШТАБИРУЕТСЯ
                            // 0 - ОБ'ЕКТ НЕ МАСШТАБИРУЕТСЯ
   ULONG Direct   ; // НАПРАВЛЕНИЕ ЦИФРОВАНИЯ ОБ'ЕКТА (OBJECT_DIRECT)
   ULONG Bot      ; // НИЖНЯЯ ГРАНИЦА ВИДИМОСТИ (ЗНАМЕНАТЕЛЬ МАСШТАБА)
   ULONG Top      ; // ВЕРХНЯЯ ГРАНИЦА ВИДИМОСТИ (ЗНАМЕНАТЕЛЬ МАСШТАБА)
   unsigned char Name[32] ; // НАЗВАНИЕ ( НЕ БОЛЕЕ 30)
}
   RSCOBJECT;

typedef struct RSCOBJECTEX                              // 02/04/03
{
   ULONG Length   ; // РАЗМЕР СТРУКТУРЫ
   ULONG Code     ; // КЛАССИФИКАЦИОННЫЙ КОД
   ULONG Local    ; // ХАРАКТЕР ЛОКАЛИЗАЦИИ  (OBJECT_LOCAL)
   ULONG Segment  ; // Н0МЕР СЛОЯ ( НЕ БОЛЕЕ 255)
   ULONG Scale    ; // 1 - ОБ'ЕКТ МАСШТАБИРУЕТСЯ
                            // 0 - ОБ'ЕКТ НЕ МАСШТАБИРУЕТСЯ
   ULONG Direct   ; // НАПРАВЛЕНИЕ ЦИФРОВАНИЯ ОБ'ЕКТА (OBJECT_DIRECT)
   ULONG Bot      ; // НИЖНЯЯ ГРАНИЦА ВИДИМОСТИ (ЗНАМЕНАТЕЛЬ МАСШТАБА)
   ULONG Top      ; // ВЕРХНЯЯ ГРАНИЦА ВИДИМОСТИ (ЗНАМЕНАТЕЛЬ МАСШТАБА)
   unsigned char Name[32] ; // НАЗВАНИЕ
   unsigned char Key [32] ; // УНИКАЛЬНЫЙ СИМВОЛЬНЫЙ КЛЮЧ ОБЪЕКТА
}
   RSCOBJECTEX;


// ОПИСАНИЕ СЛОЕВ
typedef struct RSCSEGMENT
{
   ULONG Order;     // ПОРЯДОК ВЫВОДА СЛОЯ НА ПЕЧАТЬ
   unsigned char Name[32];  // НАЗВАНИЕ ( НЕ БОЛЕЕ 30)
}
   RSCSEGMENT;

// ОПИСАНИЕ СЕМАНТИКИ
typedef struct RSCSEMANTICEX  // РАСШИРЕННОЕ ОПИСАНИЕ СЕМАНТИЧЕСКОЙ
                              // ХАРАКТЕРИСТИКИ ОБ'ЕКТА
{
  LONG Code;         // внешний код
  LONG Type;         // тип значения
  LONG Reply;        // разрешается повторение (1)
  LONG Enable;       // допустимая(1),обязательная(2)
                         // (при создании семантики поле не учитывается)
  LONG Service;      // служебная,допустима для всех объектов (1)
  LONG Reserv;       // резерв (должен быть равен 0)
  char     Name[32];     // название характеристики
  char     Unit[8];      // единица измерения
  double   Minimum;      // минимальное значение
  double   Default;      // умалчиваемое значение
  double   Maximum;      // максимальное значение
  LONG Size;         // общий размер поля значения семантики
  LONG Decimal;      // точность поля значения семантики
  char     ShortName[16];// короткое имя семантики (связь с полем БД)
}
  RSCSEMANTICEX;

enum FRAMEINCODE                   // 06/04/06
{
   FIRSTSERVEXCODE  = 1000000000l, // Начало внешних кодов служебных
   LINESERVEXCODE   = 1000000001l, // Внешний код служебного линейного
   LINESERVINCODE   = 1          , // Внутренний код служебного линейного
   SQUARESERVEXCODE = 1000000002l, // Внешний код служебного площадного
   SQUARESERVINCODE = 2          , // Внутренний код служебного площадного
   POINTSERVEXCODE  = 1000000003l, // Внешний код служебного  точечного
   POINTSERVINCODE  = 3          , // Внутренний код служебного точечного
   TEXTSERVEXCODE   = 1000000004l, // Внешний код служебного текста
   TEXTSERVINCODE   = 4          , // Внутренний код служебного текста
   VECTSERVEXCODE   = 1000000005l, // Внешний код служебного векторного
   VECTSERVINCODE   = 5          , // Внутренний код служебного векторного
   COMSERVEXCODE    = 1000000006l, // Внешний код служебного шаблона
   COMSERVINCODE    = 6          , // Внутренний код служебного шаблона
   SERVOBJECT       = 15         , // Количество служебных объектов
};

enum SEMTYPE           // ТИПЫ ЗНАЧЕНИЯ СЕМАНТИКИ
{
   TUNDEFINED = -1,    // Значение не установлено
   TSTRING    = 0,     // Символьная строка
   TNUMBER    = 1,     // Числовое значение
   TANYFILE   = 9,     // Имя файла зарегистрированного типа
   TBMPFILE   = 10,    // Имя файла BMP
   TOLEFILE   = 11,    // Имя файла,обрабатываемого OLE-сервером
   TREFER     = 12,    // Ссылка на произвольный объект карты
                       // (уникальный номер объекта)
   TMAPFILE   = 13,    // Имя файла-паспорта района
   TTXTFILE   = 14,    // Имя текстового файла
   TPCXFILE   = 15,    // Имя файла PCX
   TCODE      = 16,    // Значение в виде числового кода
                       // из классификатора значений
   TDATE      = 17,    // Значение даты в числовом виде (ГГГГММДД)
   TANGLE     = 18,    // Угловая величина в радианах
   TTIME      = 19,    // Значение времени в числовом виде (ЧЧММСС)
   TFONT      = 20,    // Имя шрифта ("Arial", "Courier"...)
   TCOLOR     = 21,    // Числовое значение цвета в RGB
   TLAST      = 21     // ВЕРХНЯЯ ГРАНИЦА СПИСКА КОДОВ
};

// ЗАРЕЗЕРВИРОВАННЫЕ КОДЫ СЕМАНТИЧЕСКИХ ХАРАКТЕРИСТИК,
// ВЛИЯЮЩИЕ НА ВИД ЗНАКА                                     // 22/03/04
// ---------------------------------------------------
#define EXTSEMANTIC         31001  // НАЧАЛО ДИАПАЗОНА СЕРВИСНЫХ СЕМАНТИК
#define SEMIMAGESCALE       31001  // МАСШТАБ ОТОБРАЖЕНИЯ ЗНАКА В ПРОЦЕНТАХ
#define SEMIMAGECOLOR       31002  // ЦВЕТ ОТОБРАЖЕНИЯ ЗНАКА RGB
#define SEMIMAGEHIGHT       31003  // ВЫСОТА ШРИФТА          // 24/09/04
#define SEMIMAGEFONT        31004  // НАЗВАНИЕ ШРИФТА        // 11/05/05
#define SEMIMAGETHICK       31005  // ТОЛЩИНА ЛИНИИ В ММ            // 05/05/06
#define SEMIMAGETHICK2      31006  // ТОЛЩИНА ОКОНЧАНИЯ ЛИНИИ В ММ  // 05/05/06
#define SEMCOLORWEIGHT      31007  // ВЕС ЦВЕТА ОБЪЕКТА В ПРОЦЕНТАХ // 25/12/08
#define SEMFONTCOLOR        31008  // ЦВЕТ ПОДПИСИ 
#define SEMTRANSLUCENCY     31009  // ПОЛУПРОЗРАЧНОСТЬ
#define SEMIMAGEBRIGHT      31010  // ЯРКОСТЬ
#define SEMIMAGECONTRAST    31011  // КОНТРАСТНОСТЬ
#define SEMFONTNUMBER       31012  // НОМЕР ШРИФТА
#define EXTSEMANTICEND      31012  // КОНЕЦ ДИАПАЗОНА 


// ЗАРЕЗЕРВИРОВАННЫЕ КОДЫ СЕМАНТИЧЕСКИХ ХАРАКТЕРИСТИК
// ---------------------------------------------------
#define OBJEXCODEINSEMANTIC 32800  // КЛАССИФИКАЦИОННЫЙ КОД ОБ'ЕКТА
#define SEMOBJEXCODE        32800  // КЛАССИФИКАЦИОННЫЙ КОД ОБ'ЕКТА

#define GROUPLEADER         32801  // ПРИЗНАК ОБ'ЕКТА, ИМЕЮЩЕГО ССЫЛКУ
#define SEMGROUPLEADER      32801  // НА ПОДЧИНЕННЫЙ ОБ'ЕКТ

#define GROUPSLAVE          32802  // ПРИЗНАК ОБ'ЕКТА, НА КОТОРЫЙ
#define SEMGROUPSLAVE       32802  // ИМЕЕТСЯ ССЫЛКА ОТ ГЛАВНОГО ОБ'ЕКТА;

#define GROUPPARTNER        32803  // ПРИЗНАК ОБ'ЕКТА, ВХОДЯЩЕГО
#define SEMGROUPPARTNER     32803  // В ГРУППУ РАВНОПРАВНЫХ ОБ'ЕКТОВ

#define SEMOBJECTTOTEXT     32804  // ССЫЛКА НА ПОДПИСЬ ОТ ОБ'ЕКТА
#define SEMOBJECTFROMTEXT   32805  // ССЫЛКА НА ОБ'ЕКТ ОТ ПОДПИСИ

#define SEMLAYERSHORTNAME   32810  // КОРОТКОЕ ИМЯ СЛОЯ ОБ'ЕКТА
#define SEMOBJECTSHORTNAME  32811  // КОРОТКОЕ ИМЯ ОБ'ЕКТА (КЛЮЧ)

#define SEMOBJECTDATE       32820  // ДАТА СОЗДАНИЯ ОБ'ЕКТА
#define SEMOBJECTTIME       32821  // ВРЕМЯ СОЗДАНИЯ ОБ'ЕКТА
#define SEMOBJECTAUTHOR     32822  // ИМЯ ОПЕРАТОРА

#define SEMSERVICEFIRST     32800  // НАЧАЛО ДИАПАЗОНА СПЕЦИАЛЬНЫХ СЕМАНТИК
#define SEMSERVICELAST      32822  // КОНЕЦ  ДИАПАЗОНА СПЕЦИАЛЬНЫХ СЕМАНТИК

#define SHEETFRAMEINCODE    15l       // ВНУТРЕННИЙ КОД РАМКИ ЛИСТА  05/02/02
#define SHEETFRAMEEXCODE    91000000l // ВНЕШНИЙ КОД РАМКИ ЛИСТА

enum SEMANTIC_FOR_OBJECT   // Использование семантики для объектов
{
  NONE_SEMANTIC     = 0,   // не используется
  POSSIBLE_SEMANTIC = 1,   // возможная
  MUST_SEMANTIC     = 2,   // обязательная
  IMAGE_SEMANTIC    = 3,   // влияет на вид отображения
  ALL_SEMANTIC      = 4    // все семантики
};


// ОПИСАНИЕ ИСПОЛЬЗОВАНИЯ СЕМАНТИКИ ДЛЯ ОБ'ЕКТОВ
typedef struct APPLYSEMANTIC
{                           // КОЛИЧЕСТВО ОБ'ЕКТОВ,ИСПОЛЬЗУЮЩИХ СЕМАНТИКУ
  long Possible;            // КАК ОБЯЗАТЕЛЬНУЮ
  long Must;                // КАК ВОЗМОЖНУЮ
  long Image;               // СЕМАНТИКА ИСПОЛЬЗУЕТСЯ ДЛЯ ИЗМЕНЕНИЯ ВИДА
}
  APPLYSEMANTIC;

// ОПИСАНИЕ ШРИФТА
typedef struct RSCFONT
{
  char    Font[32];     // НАЗВАНИЕ
  char    Name[32];     // УСЛОВНОЕ НАЗВАНИЕ
  long    CharSet ;     // КОДОВАЯ СТРАНИЦА
}
  RSCFONT;

// ОПИСАНИЕ ПОДПИСИ ОБ ЕКТА ПО ЗНАЧЕНИЮ СЕМАНТИКИ ("МЕТКА ОБ'ЕКТА")
typedef struct RSCRELATION                                 // 01/11/01
{
  unsigned long  ObjectCode   ; // ВНУТРЕННИЙ КОД ПОДПИСИ СЕМАНТИКИ
  unsigned long  SemanticCode ; // КОД ПОДПИСЫВАЕМОЙ СЕМАНТИКИ
  char           Prefix[7]    ; // ПОСТОЯННЫЙ ПРЕФИКС (ТЕКСТ) ДЛЯ ПОДПИСИ
  char           Decimal      ; // КОЛИЧЕСТВО ЗНАКОВ ПОСЛЕ ЗАПЯТОЙ
}
  RSCRELATION;

// РЕЖИМ ПОИСКА ОБЪЕКТОВ КЛАССИФИКАТОРА                  // 14/04/06
enum SEEK_RSCOBJECT
{
   SEEK_EXCODE = 1,        // ПОИСК ПО КОДУ
   SEEK_KEY    = 2,        // ПОИСК ПО КЛЮЧУ
   SEEK_NAME   = 4,        // ПОИСК ПО ИМЕНИ
};


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+++++++ ВСПОМОГАТЕЛЬНЫЕ СТРУКТУРЫ +++++++++++++++++++++++++++++++
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// ОШИБОЧНАЯ ВЫСОТА
#define ERRORHEIGHT  -111111.0

// ОШИБОЧНАЯ МОЩНОСТЬ СЛОЯ
#define ERRORPOWER   -1111111.0

typedef struct BUILDMTW    //  ПАРАМЕТРЫ СОЗДАНИЯ МАТРИЦЫ ВЫСОТ
{
  unsigned
  long int StructSize;     // Размер данной структуры :
                           //  sizeof (BUILDMTW)
  long int Free;           // Должен быть ноль

  double   BeginX;         // Прямоугольные координаты начала
  double   BeginY;         // (юго-западного угла) матрицы в метрах

  double   Width;          // Ширина матрицы в метрах
  double   Height;         // Высота матрицы в метрах

  double   ElemSizeMeters; // Размер стороны элементарного участка
                           // в метрах на местности

  long int ElemSizeBytes;  // Pазмер элемента матрицы в байтах
                           // (допустимые значения : 1,2,4,8)
                           // При создании матрицы по векторной
                           // карте значение данного поля
                           // должно быть равно 4

  long int Unit;           // Eдиница измерения высоты
                           // (0 - метры, 1 - дециметры,
                           //  2 - сантиметры, 3 - миллиметры )

  long int ReliefType;     // Тип матрицы (0 - абсолютные высоты,
                           //  1 - абсолютные + относительные,
                           //  2 - относительные)

  long int UserType;       // Произвольное число, связываемое
                           // с создаваемой матрицей

  long int Scale;          // Знаменатель масштаба создаваемой
                           // матричной карты (при создании матрицы
                           // по векторной карте значение данного
                           // поля будет заменено на знаменатель
                           // масштаба векторной карты)

  long int HeightSuper;    // Высота при попадании в элемент более
                           // одного объекта с абсолютной высотой :
                           //  0 - средняя
                           //  1 - максимальная
                           //  2 - минимальная

  long int FastBuilding;   // УСТАРЕВШЕЕ ПОЛЕ
                           // Режим создания матрицы (при Method = 0) :
                           //  0 - средневзвешенная интерполяция по 16 направлениям,
                           //    без формирования локальных экстремумов
                           //  1 - средневзвешенная интерполяция по 8 направлениям,
                           //    без формирования локальных экстремумов
                           //  2 - средневзвешенная интерполяция по 16 направлениям,
                           //    с формированием локальных экстремумов
                           //  3 - средневзвешенная интерполяция по 8 направлениям,
                           //    с формированием локальных экстремумов

  long int Method;    // Метод построения поверхности :
                      //  0 - метод определяется режимом FastBuilding
                      //  1 - средневзвешенная интерполяция по 16 направлениям
                      //  2 - средневзвешенная интерполяция по 8 направлениям
                      //  3 - средневзвешенная интерполяция по 16 направлениям,
                      //      сглаживание поверхности
                      //  8 - линейная интерполяция по сетке треугольников
                      //     (в методе используются только точечные объекты)
                      //  16 - плоская поверхность с нулевой высотой
                      //       для ReliefType = 2

  long int Extremum;  // Флаг формирования локальных экстремумов
                      //     (при Method = 1,2,3) :
                      //  0 - локальные экстремумы не формируются
                      //  1 - локальные экстремумы формируются

  HOBJ Border;        // Идентификатор замкнутого объекта карты,
                      // по которому устанавливается рамка создаваемой
                      // матрицы (если объект расположен вне габаритов
                      // матрицы, определяемых значениями полей
                      // BeginX, BeginY, Width, Height данной
                      // структуры, то рамка не устанавливается)

  long int LimitMatrixFrame;
                      // Флаг ограничения габаритов матрицы
                      // при Method = 1,2,3,8 (габариты матрицы
                      // определяются значениями полей BeginX,
                      // BeginY, Width, Height данной структуры) :
                      //  0 - ограничение не выполняется
                      //  1 - габариты матрицы ограничиваются
                      //      габаритами района
                      //  2 - габариты матрицы ограничиваются
                      //      габаритами области расположения
                      //      объектов с абсолютной высотой


  long int NotUse3DMetric;
                      // Флаг - не использовать трехмерную метрику
                      // объектов :
                      //  0 - трехмерная метрика используется
                      //  1 - трехмерная метрика не используется

  long int SurfaceSquare3DObject;
                      // Флаг - строить поверхность внутри площадного
                      // объекта по его трехмерной метрике :
                      //  0 - не строить поверхность
                      //  1 - строить поверхность
                      // Если параметр NotUse3DMetric равен 1,
                      // то поверхность не строится

  long int AltitudeMarksNet;  // 03/10/06
                      // Флаг дополнительной обработки высотных точек при
                      // средневзвешенной интерполяции (Method = 1,2,3) :
                      //  0 - для каждой высотной точки выполняется построение и
                      //      занесение в матрицу лучей влияния высоты (луч влияния
                      //      высоты - 3D-отрезок,выходящий из точки по одному из
                      //      16 радиальных направлений; высоты элементов отрезка
                      //      определяются высотой точки и высотой, найденной при
                      //      сканировании матрицы из точки по данному направлению.
                      //      Лучи влияния высоты компенсируют промахи мимо точки
                      //      с абсолютной высотой при поиске значащих высот в процессе
                      //      вычисления незаполненых элементов матрицы.
                      //  1 - по набору высотных точек создаётся триангуляция,
                      //      рёбра триангуляции (или части рёбер) заносятся в матрицу
                      //      в виде 3D-отрезков (если ребро не пересекает объекты
                      //      с абсолютной высотой, то оно выводится целиком,
                      //      если пересекает, то выводится часть ребра, ограниченная
                      //      его вершиной и точкой пересечения с объектом);
                      //  2 - дополнительная обработка высотных точек не выполняется,
                      //      высота точки заносится в один элемент матрицы,
                      //      обычно применяется при построении поверхности
                      //      по набору отметок высот

  long int LimitMatrixByFramesOfSheets;
                      // Флаг ограничения матрицы рамками листов
                      // (при Method = 1,2,3,8) :
                      //  0 - ограничение матрицы не выполняется,
                      //      информативные элементы могут располагаться
                      //      вне рамок листов
                      //  1 - ограничение матрицы выполняется,
                      //      информативные элементы располагаются
                      //      только внутри габаритов рамок листов

  char Reserve[20];   // Должны быть нули
}
  BUILDMTW;


typedef struct MTRPROJECTIONDATA  //  ПАРАМЕТРЫ СОЗДАНИЯ МАТРИЦЫ ВЫСОТ
{                                 //   (ДАННЫЕ О ПРОЕКЦИИ)
  long int  StructSize;         // Размер данной структуры : 128 байт
                                //  sizeof (MTRPROJECTIONDATA)

  long int  Free;               // Должен быть ноль

  long int  MapType;            // Тип карты (задавать в соответствии
                                //   с MAPTYPE, файл MAPCREAT.H)

  long int  ProjectionType;     // Тип проекции (задавать в соответствии
                                //   с MAPPROJECTION, файл MAPCREAT.H)
                                // long  MaterialProjection; // Проекция исх. материала

                                // В радианах
  double    FirstMainParallel;  // Первая главная параллель
  double    SecondMainParallel; // Вторая главная параллель
  double    AxisMeridian;       // Осевой меридиан
  double    MainPointParallel;  // Параллель главной точки
  double    PoleLatitude;       // Широта полюса проекции                 // 27/06/05
  double    PoleLongitude;      // Долгота полюса проекции                // 27/06/05

  long      EllipsoideKind;     // Вид эллипсоида                         // 01/07/05
  long      HeightSystem;       // Система высот                          // 01/07/05
  long      CoordinateSystem;   // Система координат                      // 01/07/05

  char      Reserve[52];        // Должны быть нули
}
  MTRPROJECTIONDATA;

// ПАРАМЕТРЫ ПОСТРОЕНИЯ МАТРИЦЫ ПОВЕРХНОСТИ (МАТРИЦЫ КАЧЕСТВ ИЛИ МАТРИЦЫ ВЫСОТ)

typedef struct BUILDSURFACE  // 29/05/07
{
 unsigned
 long int StructSize; // Размер данной структуры : sizeof (BUILDSURFACE) = 320 байт
 long int FileMtw;    // Флаг расширения создаваемого файла :
                      //   0 - создание файла матрицы качеств (*.mtq)
                      //   1 - создание файла матрицы высот (*.mtw)

 double BeginX;    // Прямоугольные координаты начала
 double BeginY;    // (юго-западного угла) матрицы в метрах

 double Width;     // Ширина матрицы в метрах
 double Height;    // Высота матрицы в метрах

 double MinValue;  // Диапазон значений характеристики качества создаваемой матрицы,
 double MaxValue;  // если MinValue >= MaxValue в матрицу заносится фактический диапазон значений

 double ElemSizeMeters;  // Размер стороны элементарного участка
                         // в метрах на местности (дискрет матрицы)

 long int UserType;      // Произвольное число, связываемое с создаваемой матрицей
                         //  (тип, характеристика матрицы)

 long int Free;          // Должен быть ноль

 char UserName[32];      // Условное имя матрицы (название характеристики качества)

 HOBJ Border;  // Идентификатор замкнутого объекта карты, ограничивающего область
               // заполняемых элементов матрицы (если равен нулю, то не используется)
               // Если объект расположен вне габаритов матрицы, определяемых значениями
               // полей BeginX, BeginY, Width, Height данной структуры, то не используется

 HWND Handle;  // Идентификатор окна диалога, которому посылается
               // сообщение 0x0581 о проценте выполненных работ (в WPARAM),
               // если процесс должен быть принудительно завершен, в ответ
               // должно вернуться значение 0x0581.
               // Если Handle равно нулю - сообщения не посылаются.

 COLORREF* Palette;      // Адрес палитры создаваемой матрицы качеств(*.mtq),
                         // если равен нулю - используется палитра по умолчанию
 long int PaletteCount;  // Kоличество цветов в палитре (от 1 до 256)

 long int Method;        // Метод построения поверхности :
                         //  8 - Линейная интерполяция по сетке треугольников
                         //      ( используются точки массива PointArray )
                         //  9 - Логарифмическая интерполяция по локальной поверхности
                         //       вокруг определяемого элемента
                         //      ( используются точки метрики объектов карты )

 XYHDOUBLE* PointArray;  // Адрес массива значений характеристики качества (для Method = 1)
 long int PointCount;    // Число точек в массиве PointArray (для Method = 1)

 long int SemanticCode;  // Код семантики моделируемой характеристики (для Method = 2)

 long int LocalSurfacePointCount;  // Kоличество точек для построения локальной поверхности
                                   // вокруг определяемого элемента (для Method = 2)

 long int LocalSurfaceRebuildPointCount;  // Kоличество обновлённых точек при переходе
                                          // к очередному определяемому элементу,
                                          // при котором перестраивается локальная
                                          // поверхность (для Method = 2)
 double MaxMetricCutLength;  // Максимальная длина в метрах отрезка метрики
                             // без добавляемых точек (для Method = 2)

 char Reserve[168];          // Должны быть нули
}
  BUILDSURFACE;


 // СОКРАЩЕННОЕ ОПИСАНИЕ НАЙДЕННОГО ОБ'ЕКТА  // 01/02/02
 typedef struct
 {
   int         ListNumber;        // НОМЕР ЛИСТА ВЫБРАННОГО ОБ'ЕКТА
   int         ObjectNumber;      // НОМЕР ВЫБРАННОГО ОБ'ЕКТА В ЛИСТЕ
   HSITE       Map;               // ОПИСАНИЕ ЭЛЕКТРОННОЙ КАРТЫ
 }
  MAPOBJDESCEX;

typedef struct
{
  DOUBLEPOINT XY;     // Координата точки пересечения
  double       H;     // Высота точки пересечения
                      // (из метрики)
  HOBJ Info1;
  long int Number1;   // За какой точкой объекта Info1
                      // находится точка пересечения
  long int Subject1;  // Номер объекта/подобъекта объекта info2
  HOBJ Info2;
  long int Number2;   // За какой точкой объекта Info2
                      // находится точка пересечения
  long int Subject2;  // Номер объекта/подобъекта объекта info2
}
  CROSSPOINT;


// СТРУКТУРА ОПИСЫВАЮЩАЯ ПАНЕЛЬ ПРИКЛАДНОЙ ЗАДАЧИ
// Указатель на нее используется в качестве второго
// параметра в сообщении AW_CREATETASKPANEL
typedef struct PANELINFO
{
  HINSTANCE hInst;     // Идентификатор библиотеки содержащей кнопки панели
  long int  Count;     // Количество передоваемых идентификаторов(кнопок) в
                       // первом параметре сообщении AW_CREATETASKPANEL
  char      Name[32];  // Собственное название панели
}
  PANELINFO;

typedef struct PANELPOS   // Параметр LPARAM сообщения AW_MOVEPANEL
{
  RECT Rect;              // Координаты нового положения панели
  long int  Position;     // Расположение панели в окне (см. LOCAL)
  long int  Layout;       // Признак немедленного обновления окна
}
  PANELPOS;

typedef struct BUTTONINFO   // Параметр LPARAM сообщения AW_INSERTBUTTON
{
  long int Command;         // Идентификатор создаваемой кнопки,
                            // если Command = (-1) - вставляется разделитель
  HBITMAP  hBitmap;         // Идентификатор картинки на кнопке
                            // Для Linux - указатель на структуру BUTTONINFOLX
  long int Sibling;         // Идентификатор кнопки в панеле инструментов,
                            // после которой вставляется создаваемая кнопка.
                            // Если Sibling = NULL - вставляется в конец
}
  BUTTONINFO;

#ifdef LINUXAPI                   // 07/06/05
typedef struct BUTTONINFOLX // Параметр hBitmap структуры BUTTONINFO
{
  HBITMAP  hBitmap;         // Идентификатор картинки на кнопке

  char     Hint[80];        // Подсказка
}
  BUTTONINFOLX;
#endif


typedef struct CONTRINFO  // Параметр LPARAM сообщения AW_INSERTBUTTON
{
  long int CtrlId;          // Идентификатор создаваемого элемента управления,
                            // если CtrlId = (-1) - вставляется разделитель
  HWND     hWindow;         // Идентификатор окна элемента управления

  long int Sibling;         // Идентификатор элемента управления в панеле
                            // инструментов, после которого вставляется
                            // создаваемый элемент управления.
                            // Если Sibling = NULL - добавляется в конец
}
  CONTRINFO;

typedef struct HITCONTROLINFO // Параметр LPARAM событии MT_PANELRBUTTONUP
{
  POINT    Position;          // Положение курсора на экране

  long int CtrlID;            // Идентификатор элемента управления панели,
                              // над которым быля нажата клавиша
}
  HITCONTROLINFO;        //03/07/00

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++ ВЕДЕНИЕ ПРОТОКОЛА ТРАНЗАКЦИЙ +++++++++++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

typedef enum READLOG   // УСЛОВИЯ СЧИТЫВАНИЯ ТРАНЗАКЦИЙ
{
  READ_ANYACTION = 0,  // СЧИТАТЬ ПОСЛЕДНЮЮ ТРАНЗАКЦИЮ
  LOG_ANYACTION  = 0,  // ОБРАБОТАТЬ ПОСЛЕДНЮЮ ТРАНЗАКЦИЮ
  READ_MYACTION  = 1,  // СЧИТАТЬ СВОЮ ПОСЛЕДНЮЮ ТРАНЗАКЦИЮ
                       // (ПО ИМЕНИ ПОЛЬЗОВАТЕЛЯ)
  LOG_MYACTION   = 1,  // ОБРАБОТАТЬ СВОЮ ТРАНЗАКЦИЮ
}
 READLOG;

// ЗАРЕЗЕРВИРОВАННЫЕ ТИПЫ ТРАНЗАКЦИЙ
enum ACTION_TYPE
{
  AT_OPEN     = 60000,     // Журнал открыт
  AT_CLOSE    = 60001,     // Журнал закрыт
  AT_LOGON    = 60002,     // Запись в журнал включена
  AT_LOGOFF   = 60003,     // Запись в журнал отключена
  AT_CLEAR    = 60004,     // Файлы отката очищены (сортировка,...)
  AT_FIRST    = AT_OPEN,   // Первый зарезервированный код
  AT_LAST     = AT_CLEAR,  // Последний зарезервированный код
  AT_UNDO     = 60005,     // Отмена какой-либо предыдущей транзакции
  AT_NEXT     = 60006,     // Продолжение предыдущей транзакции
};

// Если Type == AT_OPEN, после заголовка идет
// описание источника транзакций, строка 16 байт
// (имя компьютера в сети).

typedef struct ACTIONHEAD  // ЗАГОЛОВОК ОПИСАНИЯ ТРАНЗАКЦИИ
{
  short int      Ident;    // 0x7FFF
  unsigned short Task;     // Идентификатор задачи,выполнившей транзакцию
  unsigned short Count;    // Число операций (Length = 16+Count*16)
  unsigned short Type;     // Тип транзакции (код задачи)
  long  int      Date;     // Дата выполнения транзакции
  long  int      Time;     // Время выполнения транзакции
}
 ACTIONHEAD;

// ТИПЫ ОПЕРАЦИЙ НАД ОБ'ЕКТОМ
enum OBJECT_OPERATION
{
   OO_APPEND    = 1,        // СОЗДАНИЕ ОБ' ЕКТА
   OO_DELETE    = 2,        // УДАЛЕНИЕ ОБ'ЕКТА
   OO_UPDATE    = 4,        // ОБНОВЛЕНИЕ ОБ'ЕКТА
   OO_UNDO      = 8,        // ВОССТАНОВЛЕНИЕ ОБ'ЕКТА
};

// МАСКА ОБРАБОТАННЫХ ЭЛЕМЕНТОВ ОБ'ЕКТА
enum ACTION_MASK
{
   AM_HEAD      = 1,        // ИЗМЕНЕНЫ СПРАВОЧНЫЕ ДАННЫЕ
   AM_METRIC    = 2,        // ИЗМЕНЕНА МЕТРИКА ОБ'ЕКТА
   AM_SEMANTIC  = 4,        // ИЗМЕНЕНА СЕМАНТИКА
   AM_DRAW      = 8,        // ИЗМЕНЕНО ГРАФИЧЕСКОЕ ОПИСАНИЕ
};

typedef struct ACTIONRECORD // ОПИСАНИЕ ОТДЕЛЬНОЙ ОПЕРАЦИИ
{                           // (Для AT_OPEN - это строка 16 байт)
  long int      Key;        // Уникальный номер объекта в листе
  long int      Number;     // Последовательный номер в момент обработки
  long int      Back;       // Номер записи в файле отката (служебный)
  unsigned char Type;       // Тип операции
  unsigned char Mask;       // Маска обработанных элементов объекта
  short         List;       // Номер листа
}
 ACTIONRECORD;

// Типы цветовой модели палитры
enum COLORMODEL
{
   MODEL_RGB       = 0,
   MODEL_CMYKINDEX = 1,     // отображение индексами цветов CMYK палитры
   MODEL_CMYKCOLOR = 2,     // отображение цветами CMYK палитры
};

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++ ОПОВЕЩЕНИЕ О ИЗМЕНЕНИИ ОБ ЕКТА КАРТЫ  ++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#ifdef WIN32API
typedef long int (WINAPI * CHANGECALL)(long int parm, long int value);
#else
typedef long int (*CHANGECALL)(long int parm, long int value);
#endif

typedef struct CHANGEINFO
{
  HSITE    hSite;     // Идентификатор карты в документе
  short int List;     // Номер листа карты
  unsigned char Type; // Тип операции (OBJECT_OPERATION)
  unsigned char Mask; // Маска обработанных элементов объекта (ACTION_MASK)
  long  int Key;      // Уникальный номер объекта в листе
  long  int Object;   // Последовательный номер объекта в листе
}
  CHANGEINFO;


// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ++++++++++ ПОДДЕРЖКА ОТОБРАЖАЕМЫХ В ПАМЯТЬ ФАЙЛОВ +++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

typedef struct FILEMAPPING  // ПАРАМЕТРЫ ОТОБРАЖЕНИЯ ФАЙЛА В ПАМЯТИ
{
  HANDLE   hFile;           // Идентификатор открытого файла
  HANDLE   hMapping;        // Идентификатор отображения (в UNIX = 0)
  char *   Address;         // Адрес области памяти для отображения данных
  unsigned long int Offset; // Смещение в файле на первый байт данных
  unsigned long int Size;   // Размер отображаемой области в файле
  unsigned long int Shift;  // Поправка на первый байт в области памяти
                            // для учета кратности размеру страницы (64 Кб)
}
  FILEMAPPING;

// 20/05/04
// Флаг проверки входимости объекта, который режут, в объект - РЕЗАК
// (см. mapCreateObjectsCross(...) в seekapi.h)
#define FLAGINSIDEOBJECTS  32

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++++++++++ НАНЕСЕНИЕ ОБ ЕКТА НА КАРТУ  +++++++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
typedef struct PUTTOMAPINFO
{
  long int Incode;     // Внутренний код объекта
  long int MapNumber;  // Номер карты
  long int Regime;     // Способ нанесения объекта

}
  PUTTOMAPINFO;

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++++++++++ ИНФОРМАЦИЯ О ТОЧКЕ ПЕРЕСЕЧЕНИЯ ++++++++++++
// +++++++++++++  ОТРЕЗКА С МЕТРИКОЙ ПОДОБЪЕКТА ++++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
typedef struct NUMBERPOINT
{
  DOUBLEPOINT Point;   // Координаты точки
  long int Number;     // Номер точки метрики, за которой следует point
  long int Update;     // Предложение замены точки метрики
  long int Equal;      // Номер точки совпадения в метрике
  long int Reserve;
}
  NUMBERPOINT;

#endif  // MAPTYPE_H

