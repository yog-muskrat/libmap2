

#ifndef MAPAPI_H
#define MAPAPI_H

#if defined(__BORLANDC__)
#ifndef MAPVERSN_H
 #include "mapversn.h"
#endif
#endif

#ifndef MAPGDI_H
  #include "mapgdi.h"    // Параметры функций визуализации
#endif

#ifndef MAPTYPE_H
  #include "maptype.h"   // Описание структур интерфейса MAPAPI
#endif

#ifndef MAPCREAT_H
  #include "mapcreat.h"   // Описание структур данных для создания карты
#endif

// Версия библиотеки MapAccess
// (если применяется "mapacces.h" и т.п.)
#define MAPACCESSVERSION  20090123

// Версия интерфейса MAPAPI
#define MAPAPIVERSION  0x100200

//enum PPLACE             // ПРИМЕНЯЕМАЯ СИСТЕМА КООРДИНАТ
//    {
//      PP_MAP     = 1,    // КООРДИНАТЫ ТОЧЕК В СИСТЕМЕ КАРТЫ В ДИСКРЕТАХ
//      PP_PICTURE = 2,    // КООРДИНАТЫ ТОЧЕК В СИСТЕМЕ ИЗОБРАЖЕНИЯ В ПИКСЕЛАХ
//      PP_PLANE   = 3,    // КООРДИНАТЫ ТОЧЕК В ПЛОСКОЙ ПРЯМОУГОЛЬНОЙ СИСТЕМЕ
//                         // НА МЕСТНОСТИ В МЕТРАХ
//      PP_GEO     = 4,    // КООРДИНАТЫ ТОЧЕК В ГЕОДЕЗИЧЕСКИХ КООРДИНАТАХ
//                         // В РАДИАНАХ
//    };

//enum VTYPE              // ТИП ОТОБРАЖЕНИЯ КАРТЫ
//    {
//      VT_SCREEN        = 1, // ЭКРАННЫЙ (ЧЕРЕЗ DIB)
//      VT_SCREENCONTOUR = 2, // ЭКРАННЫЙ КОНТУРНЫЙ
//      VT_PRINT         = 3, // ПРИНТЕРНЫЙ (ЧЕРЕЗ WIN API)
//      VT_PRINTCONTOUR  = 4, // ПРИНТЕРНЫЙ КОНТУРНЫЙ
//    };


#ifndef SEEKAPI_H
  #include "seekapi.h"     // Описание методов поиска и отбора объектов карты
#endif

#ifndef SITAPI_H
  #include "sitapi.h"      // Описание методов доступа к обстановке
#endif

#ifndef MTRAPI_H
  #include "mtrapi.h"      // Описание методов доступа к матрицам
#endif

#ifndef RSTAPI_H
  #include "rstapi.h"      // Описание методов доступа к растрам
#endif

#ifndef TINAPI_H
  #include "tinapi.h"      // Описание методов доступа к тин моделям
#endif

#ifndef RSCAPI_H
  #include "rscapi.h"      // Описание методов доступа к классификатору
#endif

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++ ОПИСАНИЕ ФУНКЦИЙ ДОСТУПА К ЭЛЕКТРОННОЙ КАРТЕ ++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#ifdef __cplusplus
extern "C"
{
#endif

  /*********************************************************
  *                                                        *
  *          ОТКРЫТЬ/ЗАКРЫТЬ ДОСТУП К ДАННЫМ КАРТЫ         *
  *                                                        *
  *********************************************************/

  // Открыть данные с автоматическим определением их типа
  // (векторные,растровые,матричные...)
  // name - имя открываемого файла (MAP, SIT, MTW, RSW, MPT)
  // mode - режим чтения/записи (GENERIC_READ, GENERIC_WRITE или 0)
  // GENERIC_READ - все данные только на чтение, при этом не открываются
  // файлы \Log\name.log и \Log\name.tac - протокол работы и журнал транзакций
  // При ошибке возвращает ноль

_MAPIMP HMAP _MAPAPI mapOpenData(const char * name,
								 long int mode = 0);

  // Открыть данные с автоматическим определением их типа
  // (векторные,растровые,матричные...)
  // name - имя открываемого файла (MAP, SIT, MTW, RSW, MPT) в кодировке UNICODE
  // mode - режим чтения/записи (GENERIC_READ, GENERIC_WRITE или 0)
  // GENERIC_READ - все данные только на чтение, при этом не открываются
  // файлы \Log\name.log и \Log\name.tac - протокол работы и журнал транзакций
  // При ошибке возвращает ноль

_MAPIMP HMAP _MAPAPI mapOpenDataUn(const WCHAR * name,
								   long int mode = 0);

  // Открыть векторные данные (аналогично mapOpenData)
  // Возвращает идентификатор открытой векторной карты (TMapAccess*)
  // mapname - имя файла MAP,
  // mode - режим чтения/записи (GENERIC_READ, GENERIC_WRITE или 0)
  // GENERIC_READ - все данные только на чтение, при этом не открываются
  // файлы \Log\name.log и \Log\name.tac - протокол работы и журнал транзакций
  // При ошибке возвращает ноль

_MAPIMP HMAP _MAPAPI mapOpenMap(const char * mapname,
								long int mode = 0);

  // Запрос/установка разрешения выполнять структурный контроль карты
  // после сбоев программы
  // flag - нулевое значение запрещает выполнение контроля структуры
  //        при открытии карты, ненулевое - разрешает
  // Возвращает старое значение флага

  long int _MAPAPI mapSetStructureControlFlag(long int flag);

  // Добавить данные к открытой карте (карту, растр, матрицу)
  // name - имя открываемого файла (SIT, MTW, MTQ, RSW, MPT)
  // mode - режим чтения/записи (GENERIC_READ, GENERIC_WRITE или 0)
  // Возвращает идентификатор типа данных (FILE_MAP - для пользовательской
  // карты, FILE_RSW - для растра, FILE_MTW - для матрицы, FILE_MTL - для
  // матрицы слоев, FILE_MTQ - для матрицы качеств), данные добавляются в
  // список последними, если данные уже были открыты, число открытых данных
  // (карт, растров, матриц) не меняется
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapAppendData(HMAP hMap, const char * name,
									   long int mode = 0);

  // Добавить данные к открытой карте (карту, растр, матрицу)
  // name - имя открываемого файла (SIT, MTW, MTQ, RSW, MPT) в кодировке UNICODE
  // mode - режим чтения/записи (GENERIC_READ, GENERIC_WRITE или 0)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapAppendDataUn(HMAP hMap, const WCHAR * name,
										 long int mode);

  // Запросить размер данных по имени файла
  // При ошибке возвращает ноль

  double _MAPAPI mapGetDataSize(const char * name);  // 06/12/05

  //Признак файла wfs
  long int _MAPAPI mapGetFlagWfs(const char * name);

  // Запросить имя главной карты в проекте
  // При ошибке возвращает пустую строку

_MAPIMP const char * _MAPAPI mapGetMainName(HMAP hMap);

  // Запросить имя главной карты в проекте в кодировке UNICODE
  // name - адрес буфера для записи результата
  // size - длина строки
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMainNameUn(HMAP hMap, WCHAR * name,
										  long int size);

  // Проверка корректности паспортных данных и, если надо, то заполнение
  // координат по признаку приоритета 0 - расчет прямоугольных координат
  //                                  1 - геодезических
  // Струтктуры MAPREGISTEREX, LISTREGISTER описаны в mapcreate.h
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapCheckAndUpdate(MAPREGISTEREX * mapreg, LISTREGISTER * listreg,
										   long int priority);

_MAPIMP long int _MAPAPI CheckAndUpdate(MAPREGISTER * mapreg,LISTREGISTER * listreg,
										long int priority);


  // Заполнение справочных данных в зависимости от типа карты           // 22/12/05
  // Струтктуры MAPREGISTEREX, LISTREGISTER описаны в mapcreate.h
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapRegisterFromMapType(int maptype, MAPREGISTEREX * mapreg);

  // Заполнение справочных данных о системе координат по коду EPSG(v.8.3).
  // epsgcode - код EPSG (4326, 3857(900913), 2492-2522(28462-28492), 32601-32660).
  // Структура MAPREGISTEREX описана в mapcreate.h.
  // Для геодезических систем координат возвращает 2,
  // для плоских прямоугольных возвращает 1,
  // при ошибке возвращает ноль.


_MAPIMP long int _MAPAPI mapRegisterFromEPSG(long int epsgcode, MAPREGISTEREX * mapreg);



  // Запросить габариты района в системе координат, заданной кодом EPSG(v.8.3),
  // в метрах на местности и/или радианах
  // hMap - идентификатор открытых данных
  // frameplane - указатель на заполняемую структуру в метрах
  // framegeo - указатель на заполняемую структуру в радианах
  // epsgcode - код EPSG (4326, 3857(900913), 2492-2522(28462-28492), 32601-32660).
  // Для геодезических систем координат возвращает 2,
  // для плоских прямоугольных возвращает 1,
  // при ошибке возвращает ноль.


_MAPIMP long int _MAPAPI mapGetMapTotalBorderByEPSG(HMAP hMap, DFRAME * frameplane, DFRAME * framegeo, long int epsgcode);


  // Запросить габариты листа в системе координат, заданной кодом EPSG(v.8.3),
  // в метрах на местности и/или радианах
  // hMap - идентификатор открытых данных
  // list - номер листа в районе
  // listreg - указатель на заполняемую структуру
  // epsgcode - код EPSG (4326, 3857(900913))
  // Для геодезических систем координат возвращает 2,
  // для плоских прямоугольных возвращает 1,
  // при ошибке возвращает ноль.

_MAPIMP long int _MAPAPI mapSetListBorderFromEPSG(HMAP hMap, int list, LISTREGISTER * listreg,  long int epsgcode);


  // Создать новый район (новую векторную карту)
  // mapname - полное имя файла карты
  // rscname - полное имя файла ресурсов
  // Возвращает идентификатор открытой векторной карты (TMapAccess*)
  // Структуры MAPREGISTER и LISTREGISTER описаны в mapcreat.h
  // При ошибке возвращает ноль

_MAPIMP HMAP _MAPAPI mapCreateMap(const char * mapname,
								  const char * rscname,
								  MAPREGISTER * map,
								  LISTREGISTER * sheet);

_MAPIMP HMAP _MAPAPI mapCreateMapEx(const char * mapname,
									const char * rscname,
									MAPREGISTEREX * mapreg,
									LISTREGISTER * listreg);

  // Создать план
  // (карта в местной системе координат)
  // mapname - полное имя файла карты
  // rscname - полное имя файла ресурсов
  // Струтктуры MAPREGISTEREX, LISTREGISTER описаны в mapcreate.h
  // Возвращает идентификатор открытой векторной карты (TMapAccess*)
  // Структура CREATEPLAN описана в maptype.h
  // При ошибке возвращает ноль

_MAPIMP HMAP _MAPAPI mapCreatePlane(const char * mapname,
									const char * rscname,
									CREATEPLANE * createplane);

  // Создать пользовательскую карту
  // mapname - полное имя файла карты
  // rscname - полное имя файла ресурсов
  // Возвращает идентификатор открытой векторной карты (TMapAccess*)
  // Структура CREATESITE описана в maptype.h
  // При ошибке возвращает ноль

_MAPIMP HMAP _MAPAPI mapCreateSite(const char * mapname,
								   const char * rscname,
								   CREATESITE * createsite);

_MAPIMP HMAP _MAPAPI mapCreateSiteEx(const char * mapname,   // 11/05/07
									 const char * rscname,
									 CREATESITEEX * createsite);

  // Создать пользовательскую карту
  // mapname - полное имя файла карты в кодировке UNICODE
  // rscname - полное имя файла ресурсов в кодировке UNICODE
  // Возвращает идентификатор открытой векторной карты (TMapAccess*)
  // Структура CREATESITEUN описана в maptype.h
  // При ошибке возвращает ноль

_MAPIMP HMAP _MAPAPI mapCreateSiteUn(const WCHAR * mapname,  // 11/05/07
									 const WCHAR * rscname,
									 CREATESITEUN * createsite);

  // Создать пользовательскую карту по открытой карте
  // hmap -  идентификатор открытых данных
  // mapname - полное имя файла карты
  // rscname - полное имя файла ресурсов
  // Структура CREATESITE описана в maptype.h
  // Возвращает идентификатор открытой пользовательской карты
  // При ошибке возвращает ноль

_MAPIMP HSITE _MAPAPI mapCreateAndAppendSite(HMAP hmap,
											 const char * mapname,
											 const char * rscname,
											 CREATESITE * createsite);

  // Создать пользовательскую карту по открытой карте
  // hmap -  идентификатор открытых данных
  // mapname - полное имя файла карты в кодировке UNICODE
  // rscname - полное имя файла ресурсов в кодировке UNICODE
  // Структура CREATESITEUN описана в maptype.h
  // Возвращает идентификатор открытой пользовательской карты
  // При ошибке возвращает ноль

_MAPIMP HSITE _MAPAPI mapCreateAndAppendSiteUn(HMAP hmap,               // 11/05/07
											   const WCHAR *  mapname,
											   const WCHAR * rscname,
											   CREATESITEUN * createsite);

  // Создать временную пользовательскую карту
  // rscname - полное имя файла ресурсов
  // Файлы карты размещаются в рабочей директории системы
  // и имеют уникальные имена, генерируемые автоматически
  // При закрытии карты все файлы данных удаляются
  // При ошибке возвращает ноль

_MAPIMP HMAP _MAPAPI mapCreateTempSite(const char * rscname);


  // Создать временную пользовательскую карту по открытой карте   // 12/01/07
  // hmap    -  идентификатор открытых данных
  // rscname - полное имя файла ресурсов, если равно 0 - выбирается
  // из открытой карты
  // Файлы карты размещаются в рабочей директории системы
  // и имеют уникальные имена, генерируемые автоматически
  // При закрытии пользовательской карты все файлы данных автоматически удаляются
  // Возвращает идентификатор открытой пользовательской карты
  // При ошибке возвращает ноль

_MAPIMP HSITE _MAPAPI mapCreateAndAppendTempSite(HMAP hmap, const char * rscname);

  // Переоткрыть главную карту           // 02/02/05
  // Для специальных случаев. HMAP остается прежний, а
  // карта открывается новая
  // При ошибке возвращает ноль (в этом случае может остаться
  // открытой прежняя карта или никакой)

_MAPIMP long int _MAPAPI mapReOpenMap(HMAP hMap, const char * mapname);

  // Закрыть все данные электронной карты
  // hmap -  идентификатор открытых данных
  // Идентификатор HMAP становится недействительным !

_MAPIMP void _MAPAPI mapCloseData(HMAP hMap);

  // Закрыть все данные электронной карты
  // hmap -  идентификатор открытых данных
  // Идентификатор HMAP становится недействительным !

_MAPIMP void _MAPAPI mapCloseMap(HMAP hMap);

  // Копирование района работ         // 09/01/07
  // oldname - старое имя района
  // newname - новое имя района
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapCopyMap(const char * oldname, const char * newname);

  // Закрыть и Удалить векторную карту (все файлы данных)
  // hmap - идентификатор открытых данных
  // После удаления идентификатор hMap не должен использоваться,
  // как после mapCloseData()
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapDeleteMap(HMAP hMap);

  // Удаление района работ            // 09/01/07
  // name - имя района
  // Классификатор необходимо удалить отдельно
  // При ошибке возвращает ноль

_MAPIMP  long int _MAPAPI mapDeleteMapByName(const char * name);

#ifdef WIN32API
  // Открыть проект данных (карта, обстановки, растры, матрицы...)
  // name - имя файла проекта (MPT : структура, как в INI)
  // При ошибке возвращает ноль

_MAPIMP HMAP _MAPAPI mapOpenProject(const char * name);

  // Добавить проект данных (карта, обстановки, растры, матрицы...)
  // name - имя файла проекта (MPT : структура, как в INI)
  // При ошибке возвращает ноль

_MAPIMP int _MAPAPI mapAppendProject(HMAP hMap, const char * name);  // 20/05/05

  // Запросить имя открытого проекта
  // При ошибке возвращает пустую строку

_MAPIMP const char * _MAPAPI mapGetProjectName(HMAP hMap);

  // Сохранить текущее описание данных в проекте данных
  // hmap -  идентификатор открытых данных
  // name - имя файла проекта (MPT : структура, как в INI)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSaveProject(HMAP hMap, const char * name);
#endif

  // Сохранить текущие параметры окна карты в INI-файл карты,   // 03/10/06
  // имя файла можно запросить через mapGetMapIniName()
  // Вызывается перед закрытием окна карты
  // Сохраняет описание открытых данных, масштаб, палитру, признаки видимости,
  // редактируемости, состав отображаемых объектов...
  // hmap  -  идентификатор открытых данных
  // point -  координаты центра окна в метрах (может быть 0)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSaveMapState(HMAP hMap, DOUBLEPOINT * point);

  // Восстановить параметры окна карты из INI-файла карты,      // 03/10/06
  // имя файла можно запросить через mapGetMapIniName()
  // Вызывается после открытия карты
  // Восстанавливает описание списка данных, масштаб, палитру, признаки видимости,
  // редактируемости, состав отображаемых объектов...
  // hmap  -  идентификатор открытых данных
  // point -  координаты центра окна в метрах (может быть 0)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapRestoreMapState(HMAP hMap, DOUBLEPOINT * point);

  // Запросить - есть ли какие-либо открытые данные
  // Данные - векторные, растровые, матричные...
  // hmap -  идентификатор открытых данных
  // Если открытых данных нет или ошибка - возвращает ноль

_MAPIMP long int _MAPAPI mapIsActive(HMAP hMap);

  // Выполнить согласование данных электронной карты
  // в памяти и на диске (при многопользовательском доступе
  // к данным)
  // hmap -  идентификатор открытых данных
  // Если состояние данных в памяти изменилось (по данным
  // с диска) - возвращает ненулевое значение, иначе 0
  // Если состояние изменилось - необходимо перерисовать
  // изображение карты
  // Опрос состояния целесообразно выполнять периодически
  // в процессе работы приложения

_MAPIMP long int _MAPAPI mapAdjustData(HMAP hMap);

  // Установить доступность для выполнения команды Adjust
  // mode - признак доступности обработки команды Adjust,
  //        если равен 0 - команда не обрабатывается.
  // При выполнении длительных процедур (отмена длинных
  // транзакций, трансформирование данных и т.п.) целесообразно
  // отключать команду Adjust, если она может быть вызвана из
  // других потоков приложения. Команда Adjust может вызывать
  // переоткрытие карт и перераспределение памяти.
  // Возвращает прежнее значение

_MAPIMP long int _MAPAPI mapSetAdjustMode(HMAP hMap, int mode);       // 25/04/08

  // Сохранить данные на диск                              // 10/08/07
  // при работе на Sparc-платформе также сохраняет данные в файлы Intel-платформы
  // hMap - идентификатор базовой карты
  // hSite - идентификатор пользовательской карты
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapFlushData(HMAP hMap, HSITE hSite);


  // Создать(добавить) новый лист в районе
  // hmap -  идентификатор открытых данных
  // Структура LISTREGISTER описана в mapcreat.h
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapCreateList(HMAP hMap,
									   LISTREGISTER * sheet);

  // Удалить указанный лист карты
  // list - номер листа (с 1)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapDeleteList(HMAP hmap, long int list);

  // Добавить листы из другого района работ в данный
  // hmap -  идентификатор открытых данных
  // mapname - добавляемый район,
  // handle - идентификатор окна,которое будет извещаться
  // о ходе процесса (0x585 - 0x588)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapAppendMapToMap(HMAP hMap,
										   const char * mapname,
										   HWND handle);

  // Cоздать пустой объект векторной карты
  // (создание подобъекта - см. редактирование метрики)
  // По умолчанию метрика FLOAT 2-ух мерная
  // hmap - идентификатор открытых данных
  // sheetnumber - номер листа в котором будет расположен
  // kind - тип создаваемой метрики, описан в maptype.h
  // создаваемый объект
  // text - признак метрики с текстом (объекты типа "подпись")
  // (устанавливается автоматически при вызове mapPutText(...))
  // После вызова функций типа What...() и Seek...() все параметры
  // полученного объекта могут измениться (text,kind,list и т.п.)
  // При ошибке возвращает ноль

#ifndef HIDEFORMAT
_MAPIMP HOBJ _MAPAPI mapCreateObject(HMAP hMap,long int sheetnumber = 1,
									 long int kind = IDFLOAT2,
									 long int text = 0);
#endif

  // Очистить содержимое объекта
  // (для повторного заполнения, как пустого объекта)
  // hmap - идентификатор открытых данных
  // sheetnumber - номер листа в котором будет расположен
  // kind - тип создаваемой метрики, описан в maptype.h
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapClearObject(HOBJ info,
								  long int sheetnumber = 1,
								  long int kind = IDFLOAT2);


  // Cоздать копию объекта векторной карты
  // hmap - идентификатор открытых данных
  // info - идентификатор объекта карты в памяти
  // Для каждого полученного и больше не используемого
  // идентификатора HOBJ необходим вызов функции mapFreeObject()
  // При ошибке возвращает ноль

_MAPIMP HOBJ _MAPAPI mapCreateCopyObject(HMAP hMap,HOBJ info);

  // Считать копию объекта векторной (src) карты в другой объект (dest)
  // Для каждого полученного и больше не используемого
  // идентификатора HOBJ необходим вызов функции mapFreeObject()
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapReadCopyObject(HOBJ dest, HOBJ src);

  // Cоздать копию объекта векторной карты, как нового объекта (!)
  // hmap - идентификатор открытых данных
  // info - идентификатор объекта карты в памяти
  // Для каждого полученного и больше не используемого
  // идентификатора HOBJ необходим вызов функции FreeObject()
  // При ошибке возвращает ноль

_MAPIMP HOBJ _MAPAPI mapCreateCopyObjectAsNew(HMAP hMap,HOBJ info);

  // Cоздать копию объекта векторной карты, как нового объекта
  // Для каждого полученного и больше не используемого
  // идентификатора HOBJ необходим вызов функции FreeObject()
  // src  - исходный объект,
  // dest - копия объекта (при сохранении - будет создан новый)
  // Предполагается, что до сохранения в копии что-то поменяют.
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapCopyObjectAsNew(HOBJ dest, HOBJ src);

  // Удалить описание объекта векторной карты из памяти
  // info - идентификатор объекта карты в памяти
  // Для сохранения объекта на карте необходимо
  // до вызова mapFreeObject(...) выполнить функцию
  // mapCommitObject(...)
  // При ошибке возвращает ноль

_MAPIMP void _MAPAPI mapFreeObject(HOBJ info);

  // Запросить код ошибки последней операции доступа к данным
  // Коды ошибок - см. maperr.rh

_MAPIMP long int _MAPAPI mapGetAccessError();

 // Считать объект, который отображался последним перед возникновением
 // сбоя отображения карт
 // Применяется при попадании в секцию catch(..) при вызове отображения
 // карты для вывода диагностической информации
 // hmap - идентификатор открытых данных;
 // info - идентификатор существующего объекта,
 // в котором будет размещен результат поиска.
 // Если такой объект не установлен - возвращает ноль

 long int _MAPAPI mapReadLastViewObject(HMAP hMap, HOBJ info);    // 16/10/06


  /*********************************************************
  *                                                        *
  *    ФУНКЦИИ ОТОБРАЖЕНИЯ И ПЕЧАТИ ЭЛЕКТРОННОЙ КАРТЫ      *
  *  ПАРАМЕТРЫ КОНТЕКСТА ПОДГОТОВЛЕНЫ (HDC) И УСТАНОВЛЕНО  *
  *  СМЕЩЕНИЕ НА ОБЛАСТЬ ВЫВОДА В ОКНЕ ::SetViewportOrgEx()*
  *                                                        *
  *  Размер картинки, рисуемой за один вызов на экран или  *
  *  в память, не более текущих размеров экрана!           *
  *  Произвольный размер - см. PaintToDib,PaintToImage,    *
  *                            PaintToXImage               *
  *                                                        *
  *********************************************************/

 // Запросить размеры общего изображения карты в пикселах
 // для текущего масштаба
 // hmap - идентификатор открытых данных
 // В переменную width заносится ширина изображения (dx),
 // в переменную height - высота (dy)

_MAPIMP void _MAPAPI mapGetPictureSize(HMAP hmap, long int * width,
									   long int * height);

_MAPIMP long int _MAPAPI mapGetPictureHeight(HMAP hMap);
_MAPIMP long int _MAPAPI mapGetPictureWidth(HMAP hMap);

 // Запросить ширину пиксела изображения карты в метрах на местности
 // для текущего масштаба изображения                  // 22/11/06
 // При ошибке возвращает ноль

_MAPIMP double _MAPAPI mapGetPixelWidth(HMAP hMap);

 // Запросить высоту пиксела изображения карты в метрах на местности
 // для текущего масштаба изображения
 // При ошибке возвращает ноль

_MAPIMP double _MAPAPI mapGetPixelHeight(HMAP hMap);

 // Запросить идентификатор логической палитры карты
 // hmap - идентификатор открытых данных
 // При ошибке возвращает ноль

_MAPIMP HPALETTE _MAPAPI mapGetMapPalette(HMAP hmap);

 // Запросить описание цвета палитры по индексу (index)
 // hmap - идентификатор открытых данных
 // Номер первого индекса равен нулю

_MAPIMP COLORREF _MAPAPI mapGetMapColor(HMAP hmap,long int index);

 // Запросить число цветов логической палитры
 // hmap - идентификатор открытых данных
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetColorCount(HMAP hmap);

 // Отобразить фрагмент карты на заданном устройстве
 // в текущих масштабе и составе объектов
 // hmap - идентификатор открытых данных
 // hdc   - идентификатор контекста устройства вывода,
 // erase - признак стирания фона перед выводом,
 // (0 - фон не стирать, !=0 - очистить фрагмент цветом фона,
 //  для экранного способа вывода (VT_SCREEN) всегда стирает
 //  цветом фона, кроме значения -2 (минус 2))
 // rect  - координаты фрагмента карты (Draw)
 // в изображении (Picture).
 // С изображениями больше 32000х32000 работает только
 // под Windows NT (Windows 95 имеет 16-битовую графику)
 // Размер картинки, рисуемой за один вызов, не более
 // текущих размеров экрана! Иначе - см. PaintToDib,PaintToImage...

_MAPIMP void _MAPAPI mapPaint(HMAP hmap, HDC hdc, long int erase,
							  RECT * rect);

 // Отобразить фрагмент карты на заданном устройстве
 // в текущих масштабе и составе объектов
 // hmap  - идентификатор открытых данных
 // hdc   - идентификатор контекста устройства вывода,
 // erase - признак стирания фона перед выводом,
 //        (0 - фон не стирать, !=0 - очистить фрагмент цветом фона,
 //        для экранного способа вывода (VT_SCREEN) всегда стирает
 //        цветом фона, кроме значения -2 (минус 2))
 // rect - координаты фрагмента карты (Draw) в изображении (Picture)
 // Корректно работает с большими изображениями под Windows95 и NT,
 // но требует перед вызовом установки
 //              ::SetViewportOrgEx(hDC, dx , dy, 0),
 // где dx,dy - положение отображаемого фрагмента в клиентной
 // области !
 // Размер картинки, рисуемой за один вызов, не более
 // текущих размеров экрана! Иначе - см. PaintToDib,PaintToImage...

_MAPIMP void _MAPAPI mapPaint95(HMAP hmap, HDC hdc,
								long int erase, RECT * rect);

 // Отобразить фрагмент карты на заданном устройстве
 // в текущих масштабе и составе объектов и
 // выделить на карте объекты, удовлетворющие заданным условим
 // hMap   - идентификатор открытых данных
 // hdc    - контекст устройства
 // erase  - признак стирания фона перед выводом,
 //          (0 - фон не стирать, !=0 - очистить фрагмент цветом фона,
 //          для экранного способа вывода (VT_SCREEN) всегда стирает
 //          цветом фона, кроме значения -2 (минус 2))
 // rect   - координаты фрагмента карты (Draw) в изображении (Picture)
 // select - условия отбора объектов, если равны 0, то применяются
 //          условия обобщенного поиска\выделения (см. mapTotalPaintSelect95).
 // color  - цвет, которым будут выделяться объекты на карте
 // Корректно работает с большими изображениями под Windows95 и NT,
 // но требует перед вызовом установки
 //              ::SetViewportOrgEx(hDC, dx , dy, 0),
 // где dx,dy - положение отображаемого фрагмента в клиентной области !

_MAPIMP void _MAPAPI mapPaint95AndSelect(HMAP hMap, HDC hDC, long int erase,
										 RECT * rect,
										 HSELECT select, COLORREF color); // 03/11/06

#ifdef WIN32API
 // Установить толщину линии для отрисовки выделенных на карте
 // объектов (при вызове mapPaint95AndSelect и т.п.)                   // 19/10/07
 // thick - толщина линии в mkm (из пикселов - PIX2MKM(pixel))
 // Возвращает установленное ранее значение

_MAPIMP long int _MAPAPI mapSetSelectLineThick(HMAP hmap, long int thick);
#endif

 // Отобразить отдельный объект карты в пределах фрагмента
 // в условных знаках карты
 // Может использоваться для вывода шаблонов объектов
 // С изображениями больше 32000х32000 работает только
 // под Windows NT (Windows 95 имеет 16-битовую графику)
 // hmap - идентификатор открытых данных
 // hdc   - идентификатор контекста устройства вывода,
 // rect  - координаты фрагмента карты (Draw)
 // info - идентификатор объекта карты в памяти
 // При ошибке в параметрах возвращает ноль
 // Размер картинки, рисуемой за один вызов, не более
 // текущих размеров экрана! Иначе - см. PaintToDib,PaintToImage...

_MAPIMP long int _MAPAPI mapPaintObject(HMAP hmap, HDC hdc, RECT * rect,
										HOBJ info);

 // Отобразить отдельный объект карты в пределах фрагмента
 // в условных знаках карты
 // Может использоваться для вывода шаблонов объектов
 // С изображениями больше 32000х32000 работает только
 // под Windows NT (Windows 95 имеет 16-битовую графику)
 // hmap - идентификатор открытых данных
 // hdc   - идентификатор контекста устройства вывода,
 // rect  - координаты фрагмента карты (Draw)
 // info - идентификатор объекта карты в памяти
 // erase -  признак стирания фона перед выводом,
 // (0 - фон не стирать, !=0 - очистить фрагмент цветом фона),
 // dontclip - признак отмены обрезки объектов по рамке при отображении
 // (1 - не обрезать, 0 - выполнить обрезку)            // 21/03/01
 // При ошибке в параметрах возвращает ноль
 // Размер картинки, рисуемой за один вызов, не более
 // текущих размеров экрана! Иначе - см. PaintToDib,PaintToImage...

_MAPIMP long int _MAPAPI mapPaintObjectEx(HMAP hmap, HDC hdc, RECT * rect,
										  HOBJ info,
										  long int erase, long int dontclip);

									// Отобразить отдельный объект карты в пределах фрагмента
 // в условных знаках карты
 // Может использоваться для вывода шаблонов объектов
 // hmap - идентификатор открытых данных
 // hdc   - идентификатор контекста устройства вывода,
 // rect  - координаты фрагмента карты (Draw)
 // info - идентификатор объекта карты в памяти
 // Корректно работает с большими изображениями под Windows95 и NT,
 // При ошибке в параметрах возвращает ноль
 // Размер картинки, рисуемой за один вызов, не более
 // текущих размеров экрана! Иначе - см. PaintToDib,PaintToImage...

_MAPIMP long int _MAPAPI mapPaintObject95(HMAP hmap, HDC hdc, RECT * rect,
										  HOBJ info);

 // Отобразить произвольный объект в пределах фрагмента окна (карты)
 // в условных знаках пользователя
 // hmap - идентификатор открытых данных
 // hdc   - идентификатор контекста устройства вывода,
 // rect  - координаты фрагмента карты (Draw)
 // image - описание вида объекта (см. MAPGDI.H), если объект
 // должен рисоваться своим условным знаком - значение параметра
 // можно установить в ноль
 // info - идентификатор объекта карты в памяти
 // При ошибке в параметрах возвращает ноль
 // Размер картинки, рисуемой за один вызов, не более
 // текущих размеров экрана! Иначе - см. PaintToDib,PaintToImage...

_MAPIMP long int _MAPAPI mapPaintMapObject95(HMAP hmap, HDC hdc,
											 RECT * rect,
											 PAINTPARM * image,
											 HOBJ info);

 // Отобразить произвольный объект в пределах фрагмента
 // в условных знаках пользователя
 // hmap - идентификатор открытых данных
 // hdc   - идентификатор контекста устройства вывода,
 // rect - координаты фрагмента карты (Draw) в изображении (Picture)
 // image - описание вида объекта (см. MAPGDI.H), если объект
 // должен рисоваться своим условным знаком - значение параметра
 // можно установить в ноль,
 // info - идентификатор объекта карты в памяти
 // offset - смещение координат объекта (в соответствии с place)
 // При ошибке в параметрах возвращает ноль

_MAPIMP long int _MAPAPI mapPaintOffsetMapObject95(HMAP hmap, HDC hdc,
												   RECT * rect,
												   PAINTPARM * image,
												   HOBJ info,
												   DOUBLEPOINT * offset,
												   long int place = PP_MAP);


 // Отобразить образец вида объекта по номеру записи       // 18/09/02
 // в классификаторе объектов (incode)
 // hmap - идентификатор открытой карты
 // hrsc - идентификатор классификатора открытой карты
 // hdc  - идентификатор контекста устройства вывода,
 // (0 - фон не стирать, !=0 - очистить фрагмент цветом фона)
 // rect - координаты фрагмента карты (Draw)
 // в изображении (Picture).
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapPaintExampleRscObject(HMAP hmap, HRSC hrsc,
												  HDC hdc, RECT* rect,
												  long int incode);

// Отобразить образец вида объекта
// При ошибке возвращает ноль
_MAPIMP long int _MAPAPI mapPaintExample(HMAP hMap, PAINTEXAMPLE* parm);

#ifdef WIN32API
 // Вывести изображение карты в DIB
 // Данная функция реализована только для платформы Windows !
 // Выводится фрагмент карты, заданный параметром rect.
 // Заполнется палитра,расположенная за BITMAINFOHEADER
 // Изображение строится в текущем масштабе и составе объектов
 // Размер точки 1,2,3 или 4 байт.
 // Если размеры заданного DIB меньше размеров фрагмента -
 // изображение строится в пределах размеров DIB.
 //  hmap      - идентификатор открытых данных
 //  dibinfo   - описатель создаваемого DIB в памяти
 //  lpDibBits - адрес первого байта битовой области.
 //  rect      - координаты фрагмента карты (Draw)
 //              в изображении (Picture).
 // Размер области DIB, задаваемый параметром dibinfo->biSizeImage,
 // должен учитывать то, что каждая строка DIB должна быть
 // кратна 4 байтам (32 битам):
 //  dibinfo->biSizeImage = dibinfo->biHeight *
 //    ((dibinfo->biWidth * dibinfo->biBitCount + 31) / 32) * 4;
 // При ошибке в параметрах возвращает ноль

_MAPIMP long int _MAPAPI mapPaintToDib(HMAP hmap, BITMAPINFOHEADER * dibinfo,
									   char * lpDibBits, RECT * rect);

#ifndef WINCE
 // Вывести изображение карты в Image (массив)
 // Данная функция реализована только для платформы Windows !
 // Выводится фрагмент карты, заданный параметром rect.
 // Заполняется палитра в поле palette.
 // Изображение строится в текущем масштабе и составе объектов
 // Палитра Image только 256 цветов, размер точки 1 байт !
 // Если размеры заданного Image меньше размеров фрагмента -
 // изображение строится в пределах размеров Image.
 //  hmap          - идентификатор открытых данных
 //  palette       - адрес палитры (256 RGBQUAD-цветов)
 //  lpImage       - адрес первого байта области изображения.
 //  width, height - ширина и высота Image.
 //  rect          - координаты фрагмента карты (Draw)
 //                  в изображении (Picture).
 // При ошибке в параметрах возвращает ноль

_MAPIMP long int _MAPAPI mapPaintToImage(HMAP hmap, RGBQUAD * palette,
										 char * lpImage,
										 long int width,long int height,
										 RECT * rect);
#endif  // !WINCE
#endif  // WIN32API

 // Вывести изображение объекта в DIB                 // 25/11/08
 //  hmap      - идентификатор открытых данных
 //  lpDibBits - адрес первого байта буфера изображения (32 бита)
 //  width     - ширина изображения (кратно 32),
 //  height    - высота изображения,
 //  rect      - координаты фрагмента карты (Draw)
 //              в изображении (Picture).
 //  image     - описание вида объекта (см. MAPGDI.H), если объект
 //              должен рисоваться своим условным знаком - значение параметра
 //              можно установить в ноль,
 //  info      - идентификатор объекта карты в памяти
 // При ошибке в параметрах возвращает ноль

_MAPIMP long int _MAPAPI mapPaintMapObjectToDib(HMAP hmap, char * lpImage,
												int width, int heigth, RECT * rect,
												PAINTPARM * image, HOBJ object);
#ifdef LINUXAPI
 // Вывести изображение карты в XImage (массив)
 // Данная функция реализована для XWindow !
 // Описание структуры XIMAGEDESC в maptype.h
 // hmap - идентификатор открытых данных
 // x,y - координаты левого верхнего угла внутри
 // битовой области XImage для размещения изображения
 // rect - выводимый фрагмент карты
 // !!! Только для глубины цвета 24 бит!!! :
 // backTranslucency - прозрачность фона карты (0-100)
 // mapTranslucency - прозрачность объектов карты (0-100)
 // Если backTranslucency или mapTranslucency > 0 - выходной формат изображения - ARGB32
 // Если backTranslucency < 0 и mapTranslucency < 0 - выходной формат изображения - RGB32
 // При ошибке в параметрах возвращает ноль

  long int _MAPAPI  mapPaintToXImage(HMAP hmap,
									 XIMAGEDESC * imagedesc,
									 long int x, long int y,
									 RECT * rect, int backTranslucency = -1, int mapTranslucency = -1);

  // Вывести изображение карты в XImage (массив) и выделить
  // на карте отобранные объекты                                   // 05/11/06
  // Данная функция реализована для XWindow !
  // Описание структуры XIMAGEDESC в maptype.h
  // x,y - координаты левого верхнего угла внутри
  // битовой области XImage для размещения изображения
  // rect - выводимый фрагмент карты
  // select - условия отбора объектов, если равны 0, то применяются
  //          условия обобщенного поиска\выделения (см. mapTotalPaintSelect95).
  // color  - цвет, которым будут выделяться объекты на карте
  // При ошибке в параметрах возвращает ноль

  long int _MAPAPI  mapPaintAndSelectToXImage(HMAP hMap,
											  XIMAGEDESC * imagedesc,
											  long int x, long int y,
											  RECT * rect,
											  HSELECT select, COLORREF color);

  // Вывести изображение карты и объекта в XImage (массив)         // 05/06/08
  // Данная функция реализована для XWindow !
  // Описание структуры XIMAGEDESC в maptype.h
  // x,y - координаты левого верхнего угла внутри
  // битовой области XImage для размещения изображения
  // rect - выводимый фрагмент карты
  // При ошибке в параметрах возвращает ноль
  long int _MAPAPI  mapPaintMapAndObjectToXImage(HMAP hMap, HOBJ hObj,
												 XIMAGEDESC * imagedesc,
												 long int x, long int y,
												 RECT * rect);

 // Вывести изображение карты в XImage (массив)                // 07/02/03
 // Данная функция реализована для XWindow !
 // Описание структуры XIMAGEDESC в maptype.h
 // x,y - координаты левого верхнего угла внутри
 // битовой области XImage для размещения изображения
 // rect - фрагмент для вывода отображения
 // func - функция отображения объекта
 // parm - параметры изображения
 // data - метрика для отображения
 // colors - количество цветов
 // palette - палитра
 // При ошибке в параметрах возвращает ноль
 long int _MAPAPI  mapPaintExampleObjectByFuncDataToXImage(HMAP hMap,
									 XIMAGEDESC * imagedesc,long int x, long int y,RECT * rect,
									 int func, char* parm, POLYDATAEX* data,int colors, COLORREF* palette); // 03/08/05

  // Вывести изображение карты в XImage (массив)                // 18/02/03
  // Данная функция реализована для XWindow !
  // Описание структуры XIMAGEDESC в maptype.h
  // rect - фрагмент для вывода отображения
  // func - функция отображения объекта
  // parm - параметры изображения
  // colors - количество цветов
  // palette - палитра
  // text - необходимый текст
  // local - локализация
  // При ошибке в параметрах возвращает ноль
  long int _MAPAPI  mapPaintExampleObjectByFuncToXImage(HMAP hMap,
									 XIMAGEDESC * imagedesc,RECT * rect,
									 int func, char* parm,int colors, COLORREF* palette,
									 char* text,int local);
#endif // LINUXAPI

#ifdef WIN32API
#ifndef WINCE
 // Вывести изображение объекта в Image
 // Данная функция реализована только для платформы Windows !
 // Выводится фрагмент объекта, заданный параметром rect.
 // Изображение строится в текущем масштабе
 // Палитра Image только 256 цветов, размер точки 1 байт !
 // Если размеры заданного Image меньше размеров фрагмента -
 // изображение строится в пределах размеров Image.
 // hmap - идентификатор открытых данных
 // lpImage - адрес первого байта области изображения.
 // ImageAreaWidth и ImageAreaHeight - ширина и высота Image.
 // rect - координаты фрагмента карты (Draw)
 // в изображении (Picture).
 // info - идентификатор объекта карты в памяти
 // При ошибке в параметрах возвращает ноль

_MAPIMP long int _MAPAPI mapPaintObjectToImage(HMAP hmap,
				   char *lpImage,long int ImageAreaWidth,long int ImageAreaHeight,
				   RECT * rect, HOBJ info);

 // Вывести изображение карты в метафайл
 // Данные функции реализованы только для платформы Windows !
 // При ошибке в параметрах возвращает ноль

_MAPIMP long int _MAPAPI mapPaintToEmf(HMAP hMap, const char * name,
									   METAFILEBUILDPARM * parm);
_MAPIMP long int _MAPAPI mapPaintToEmfEx(HMAP hMap, const char * name,
										 METAFILEBUILDPARMEX * parm);
#endif  // !WINCE
#endif  // WIN32API

 // Отобразить произвольный объект в пределах фрагмента
 // в условных знаках пользователя
 // hmap - идентификатор открытых данных
 // hdc  - идентификатор контекста устройства вывода,
 // rect - координаты фрагмента карты (Draw)
 // в изображении (Picture).
 // image - описание вида объекта (см. MAPGDI.H),
 // data  - координаты объекта.
 // Координаты объекта заданы в соответствии с параметром place
 // С изображениями больше 32000х32000 работает только
 // под Windows NT (Windows 95 имеет 16-битовую графику)
 // При ошибке в параметрах возвращает ноль

_MAPIMP long int _MAPAPI mapPaintUserObject(HMAP hmap,HDC hdc, RECT * rect,
											PAINTPARM * image, PLACEDATA * data,
											long int place/* = PP_MAP*/);

 // Отобразить произвольный объект в пределах фрагмента
 // hmap - идентификатор открытых данных
 // hdc  - идентификатор контекста устройства вывода,
 // rect - координаты фрагмента карты (Draw)
 // в изображении (Picture).
 // image - описание вида объекта (см. MAPGDI.H),
 // data  - координаты объекта.
 // offset - смещение координат объекта (в соответствии с place)
 // Координаты объекта заданы в соответствии с параметром place
 // Корректно работает с большими изображениями под Windows95 и NT,
 // При ошибке в параметрах возвращает ноль

_MAPIMP  long int _MAPAPI mapPaintOffsetUserObject95(HMAP hmap,HDC hdc,
													 RECT * rect,
													 PAINTPARM * image,
													 PLACEDATA * data,
													 DOUBLEPOINT * offset,
													 long int place/* = PP_MAP*/);

 // Отобразить произвольный объект в пределах фрагмента
 // hmap - идентификатор открытых данных
 // hdc  - идентификатор контекста устройства вывода,
 // rect - координаты фрагмента карты (Draw)
 // в изображении (Picture),
 // image - описание вида объекта (см. MAPGDI.H),
 // data  - координаты объекта.
 // Координаты объекта заданы в соответствии с параметром place
 // Корректно работает с большими изображениями под Windows95 и NT,
 // При ошибке в параметрах возвращает ноль

_MAPIMP long int _MAPAPI mapPaintUserObject95(HMAP hmap, HDC hdc,
											  RECT * rect,
											  PAINTPARM * image,
											  PLACEDATA * data,
											  long int place/* = PP_MAP*/);

 // Отобразить образец вида объекта по номеру записи
 // в классификаторе объектов (incode)
 // hmap - идентификатор открытых данных
 // hdc  - идентификатор контекста устройства вывода,
 // rect - координаты фрагмента карты (Draw)
 // в изображении (Picture),
 // Используется в диалогах выбора вида объекта
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapPaintExampleObject(HMAP hmap, HDC hdc,
											   RECT * rect,
											   long int incode);

 // Отобразить образец вида объекта c учетом типа визуализации по
 // номеру записи в классификаторе объектов (incode)
 // Используется в диалогах выбора вида объекта
 // hmap - идентификатор открытых данных
 // hdc  - идентификатор контекста устройства вывода,
 // rect - координаты фрагмента карты (Draw)
 // в изображении (Picture),
 // visualtype - тип визуализации
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapPaintExampleObjectEx(HMAP hmap, HDC hdc,RECT* rect, //06/12/01
												 long int incode,long int visualtype);

 // Отобразить образец вида объекта по номеру функции
 // hmap       - идентификатор открытых данных
 // hdc        - контекст устройства
 // rect       - область отображения
 // func       - номер функции
 // parm       - указатель на параметры функции
 // colors     - число цветов палитры
 // palette    - указатель на палитру
 // visualtype - тип визуализации
 // text       - текст всегда в кодировке WINDOWS, кроме функции IMG_TEXT
 //              (кодировка задана в параметрах структуры IMGTEXT)
 // Параметры colors, palette, visualtype, text - могут быть нулевыми :
 //  colors,palette - если в параметрах функции индексы палитры не используются;
 //  visualtype     - если отображение выполняется в текущем режиме визуализации;
 //  text           - при отображении стандартного текста ("AaBbCc").
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapPaintExampleObjectFunc(HMAP hmap, HDC hdc, RECT rect, // 27/04/01
										long int func, char* parm,
										long int colors, COLORREF* palette,
										long int visualtype, char* text);

 // Отобразить образец вида объекта по заданной метрике
 // в реальных цветах (с интенсивностью заливки - 100%)
 // hmap       - идентификатор открытых данных,
 // hdc        - контекст устройства
 // rect       - область отображения
 // func       - номер функции
 // parm       - указатель на параметры функции
 // data       - метрика изображения в точках устройства вывода
 // colors     - число цветов палитры
 // palette    - указатель на палитру
 // visualtype - тип визуализации
 // text - текст всегда в кодировке WINDOWS
 //        (если data != 0, то text игнорируется)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapPaintExampleObjectRealByFuncData(HMAP hmap, HDC hdc, RECT* rect,
										long int func, char* parm, POLYDATA* data,
										long int colors, COLORREF* palette,
										long int visualtype, char* text);


 // Выделить на карте объекты, удовлетворющие заданным условим
 // hmap   - идентификатор открытых данных
 // hdc    - контекст устройства
 // rect   - область отображения
 // select - условия отбора объектов
 // color  - цвет, которым будут выделяться объекты на карте

_MAPIMP void _MAPAPI mapPaintSelect95(HMAP hmap, HDC hdc, RECT* rect,
									  HSELECT select, COLORREF color);

 // Установить/Запросить способ выделения площадных и линейных
 // объектов на карте
 // type - способ выделения (STF_CONTOUR - контур объекта,
 // STF_OBJECT - весь объект)
 // Возвращает значение, которое было ранее установлено

_MAPIMP long int _MAPAPI mapSetSelectType(long int type);
_MAPIMP long int _MAPAPI mapGetSelectType();

#ifndef LINUXAPI
 // Отобразить фрагмент карты на заданном устройстве с учетом калибровки
 // в текущих масштабе и составе объектов
 // hmap   - идентификатор открытых данных
 // rect - координаты фрагмента карты (Draw) в изображении (Picture)
 // parm - параметры печати, указатель на PRINTPARM (см. prnapi.h)

_MAPIMP void _MAPAPI mapPrint(HMAP hmap, HDC hDC, RECT * rect,
							  const char * parm);  // 15/12/05
#endif

 // Установить пошаговый вывод DIB в окно             // 06/02/06
 // flag - прорисовка окна за несколько проходов (1) или однократная прорисовка (0)
 // По-умолчанию при скроллинге окна карта подрисовывается несколько
 // раз нарастающими порциями. Для больших карт это убирает скачки изображения
 // (белая полоса - картинка). Площадные объекты почти сразу обновляют фон,
 // затем к ним добавляются другие объекты.
 // Но при отрисовке небольших фрагментов такой способ может создавать мерцание,
 // поэтому его лучше отключать.
 // Переключение режима лучше делать непосредственно перед отображением, а затем
 // восстанавливать предыдущее значение.
 // Возвращает предыдущее значение

_MAPIMP  long int _MAPAPI mapSetPaintStep(HMAP hmap, long int flag);


 // Установить режим качественного отображения подписей       // 21/03/08
 // для строгого соблюдения размеров подписи при печати
 // flag - ненулевое значение устанавливает режим качественного вывода
 //        (при этом время отображения отдельной подписи увеличивается
 //         примерно в 2 раза)
 // Возвращает предыдущее значение

_MAPIMP long int _MAPAPI mapSetTextQuality(int flag);


  /*********************************************************
  *                                                        *
  *      ФУНКЦИИ ОТОБРАЖЕНИЯ И ПЕЧАТИ ЭЛЕКТРОННОЙ КАРТЫ    *
  *   ЗАДАН ИДЕНТИФИКАТОР ОКНА, И ПОЗИЦИЯ ФРАГМЕНТА ВЫВОДА *
  *                ЭЛЕКТРОННОЙ КАРТЫ В ОКНЕ                *
  *                                                        *
  *********************************************************/

 // Выделить на карте объекты, удовлетворющие заданным условим
 // hmap   - идентификатор открытых данных
 // hwnd   - идентификатор окна вывода
 // point - координаты верхнего левого угла окна на карте
 // в соответсвующей параметру place системе координат
 // select - условия отбора объектов,
 // color  - цвет, которым будут выделяться объекты на карте

_MAPIMP void _MAPAPI mapViewSelect(HMAP hmap, HWND hwnd,  // 03/12/01
								   DOUBLEPOINT * point,
								   HSELECT select,
								   COLORREF color,
								   long int place = PP_MAP);      //09/09/04


#ifdef WIN32API
 // Отобразить фрагмент карты в клиентной области окна
 // в текущих масштабе и составе объектов
 // erase - признак стирания фона перед выводом,
 // (0 - фон не стирать, !=0 - очистить фрагмент цветом фона),
 // point - координаты верхнего левого угла фрагмента
 // в соответсвующей параметру place системе координат

_MAPIMP void _MAPAPI mapView(HMAP hmap, HWND hwnd, long int erase,
							 DOUBLEPOINT * point,
							 long int place = PP_MAP);

 // Отобразить фрагмент карты в клиентной области окна        // 26/12/07
 // в текущих масштабе и составе объектов
 // hMap   - идентификатор открытых данных
 // hwnd  - идентификатор окна,
 // erase - признак стирания фона перед выводом,
 // (0 - фон не стирать, !=0 - очистить фрагмент цветом фона),
 // rect - координаты фрагмента карты (Draw)
 // в изображении (Picture),
 // point - смещение фрагмента в отображаемом окне

_MAPIMP void _MAPAPI mapViewEx(HMAP hmap, HWND hwnd, long int erase,
							   RECT * rect, POINT * point);


 // Отобразить произвольный объект в пределах
 // клиентной области окна
 // hmap   - идентификатор открытых данных
 // hwnd  - идентификатор окна,
 // point - координаты верхнего левого угла окна на карте
 // в соответсвующей параметру place системе координат
 // info - идентификатор объекта карты в памяти
 // При ошибке в параметрах возвращает ноль

_MAPIMP long int _MAPAPI mapViewObject(HMAP hmap, HWND hwnd,
									   DOUBLEPOINT * point,
									   HOBJ info,
									   long int place = PP_MAP);

#endif  // WIN32API

 // Отобразить произвольный объект в пределах фрагмента окна (карты)
 // в условных знаках пользователя
 // hmap   - идентификатор открытых данных
 // hwnd  - идентификатор окна,
 // point - координаты верхнего левого угла окна на карте
 // в соответсвующей параметру place системе координат
 // image - описание вида объекта (см. MAPGDI.H), если объект
 // должен рисоваться своим условным знаком - значение параметра
 // можно установить в ноль,
 // info - идентификатор объекта карты в памяти
 // При ошибке в параметрах возвращает ноль

_MAPIMP long int _MAPAPI mapViewMapObject(HMAP hmap,HWND hwnd,DOUBLEPOINT * point,
										  PAINTPARM * image,
										  HOBJ info,
										  long int place = PP_MAP);

 // Отобразить произвольный объект в пределах фрагмента окна (карты)
 // в условных знаках пользователя
 // hmap   - идентификатор открытых данных
 // image - описание вида объекта (см. MAPGDI.H), если объект
 // должен рисоваться своим условным знаком - значение параметра
 // можно установить в ноль,
 // info - идентификатор объекта карты в памяти
 // offset - смещение координат объекта (в соответствии с place)
 // При ошибке в параметрах возвращает ноль

_MAPIMP long int _MAPAPI mapViewOffsetMapObject(HMAP hmap,HWND hwnd,DOUBLEPOINT * point,
									 PAINTPARM * image,
									 HOBJ info,
									 DOUBLEPOINT * offset,
									 long int place = PP_MAP);

  // Отобразить произвольный объект в пределах фрагмента окна (карты)
  // hmap   - идентификатор открытых данных
  // hwnd  - идентификатор окна,
  // point - координаты верхнего левого угла окна на карте
  // в соответсвующей параметру place системе координат
  // image - описание вида объекта (см. MAPGDI.H),
  // data  - координаты объекта.
  // offset - смещение координат объекта (в соответствии с place)
  // Координаты объекта заданы в соответствии с параметром place

_MAPIMP long int _MAPAPI mapViewOffsetUserObject(HMAP hmap,HWND hwnd,
									 DOUBLEPOINT * point,
									 PAINTPARM * image,
									 PLACEDATA * data,
									 DOUBLEPOINT * offset,
									 long int place = PP_MAP);


 // Отобразить произвольный объект в пределах фрагмента окна (карты)
 // hmap   - идентификатор открытых данных
 // hwnd  - идентификатор окна,
 // point - координаты верхнего левого угла окна на карте
 // в соответсвующей параметру place системе координат
 // image - описание вида объекта (см. MAPGDI.H),
 // data  - координаты объекта.
 // Координаты объекта заданы в соответствии с параметром place

_MAPIMP long int _MAPAPI mapViewUserObject(HMAP hmap,HWND hwnd,
									 DOUBLEPOINT * point,
									 PAINTPARM * image,
									 PLACEDATA * data,
									 long int place = PP_MAP);

  /*********************************************************
  *                                                        *
  *        ФУНКЦИИ УПРАВЛЕНИЯ ПРОЦЕССОМ ОТОБРАЖЕНИЯ        *
  *                                                        *
  *********************************************************/

  // Установить адрес функции, которая будет периодически
  // вызываться при построении изображения карты и выводе
  // его на экран. Позволяет прервать изображение карты,
  // сменить параметры отображения (масштаб, позиция карты...)
  // и запустить новый процесс отображения. Устанавливать
  // адрес рекомендуется перед каждым вызовом Paint,
  // а по окончании отрисовки карты - отключать
  // (устанавливать нулевой адрес).
  // Вызываемая функция не должна сама вызывать Paint !
  // hmap   - идентификатор открытых данных
  // call - адрес вызываемой функции (см. maptype.h),
  // parm - параметр, который будет передан вызываемой функции.
  // Если вызываемая функция вернет ненулевое значение, то
  // процесс отображения будет прерван (например, при анализе
  // очереди сообщений вызванной функцией найден ввод с
  // клавиатуры команды Esc, функция возвращает 1, отображение
  // прерывается).

_MAPIMP void _MAPAPI mapSetBreakCallAndParm(HMAP hmap, BREAKCALL call,
											long int parm);

  // Установить адрес функции, которая будет вызываться
  // перед формированием изображения карты в области
  // памяти или перед началом отображения карты на экран.
  // Вызываемая функция не должна сама вызывать Paint !
  // hmap   - идентификатор открытых данных
  // call - адрес вызываемой функции (см. maptype.h),
  // parm - параметр, который будет передан вызываемой функции.
  // В вызываемой функции можно рисовать "под картой"
  // с применением графических функций системы или функций
  // типа PaintUserObject.

_MAPIMP void _MAPAPI mapSetBeforePaintCallAndParm(HMAP hmap, BEFOREPAINT call,
												  long int parm);

  /*********************************************************
  *                                                        *
  *     ФУНКЦИИ НАСТРОЙКИ ОТОБРАЖЕНИЯ ЭЛЕКТРОННОЙ КАРТЫ    *
  *                     С ПОВОРОТОМ                        *
  *                                                        *
  *********************************************************/

 // Функция настройки отображения карты с поворотом
 //  hmap     - идентификатор открытых данных
 //  angle    - угол поворота карты в плане с вершиной в
 //             юго-западном углу карты (от -Pi до Pi)
 //  fixation - угол сектора фиксации поворота отображения карты
 //             относительно предыдущего положения (от 0 до Pi/6).
 //             По умолчанию = Pi/18 (10 градусов)
 // Возвращает значение установленного угла поворота
 // При ошибке возвращает 0

_MAPIMP double _MAPAPI mapSetupTurn(HMAP hmap, double angle,
									double fixation);

 // Активен ли поворот ?
 // hmap - идентификатор открытых данных
 // Возвращает (1 - активен, 0 - нет)

_MAPIMP long int _MAPAPI mapTurnIsActive(HMAP hmap);

 // Запросить угол поворота
 // hmap - идентификатор открытых данных
 // Возвращает значения от -Pi до Pi

_MAPIMP double _MAPAPI mapGetTurnAngle(HMAP hmap);

  /*********************************************************
  *                                                        *
  *    ФУНКЦИИ УПРАВЛЕНИЯ ОТОБРАЖЕНИЕМ ЭЛЕКТРОННОЙ КАРТЫ   *
  *                                                        *
  *    ПРИ ИЗМЕНЕНИИ МАСШТАБА ОТОБРАЖЕНИЯ АВТОМАТИЧЕСКИ    *
  *       ИЗМЕНЯЮТСЯ ГАБАРИТЫ ИЗОБРАЖЕНИЯ В ПИКСЕЛАХ !     *
  *                                                        *
  *********************************************************/

  // Установить масштаб отображения (знаменатель масштаба)
  //  Параметры:
  //          hmap - идентификатор открытых данных
  //          x, y - координаты предполагаемого "центра изображения"
  //                 (любой точки привязки) в окне в текущем масштабе
  //         scale - реальный масштаб отображения, который желают получить
  //  Возвращает:   0 - масштаб не изменился,  1 - масштаб изменился
  //          x, y - координаты предполагаемого "центра изображения"
  //                 в окне относительно всей картинки
  //                 в новом масштабе отображения

_MAPIMP long int _MAPAPI mapSetViewScale(HMAP hmap,long int * x,
										 long int * y,
										 float scale);

  // Изменить масштаб отображения относительно текущего
  //  Параметры:
  //          hmap - идентификатор открытых данных
  //          x, y - координаты предполагаемого "центра изображения"
  //                 (любой точки привзки) в окне в текущем масштабе
  //        change - коэффициент изменения текущего масштаба изображения
  //                 0 < change < 1 , для сжатия
  //                 1 < change < N , для увеличения
  //  Возвращает:   0 - масштаб не изменился,  1 - масштаб изменился
  //          x, y - координаты предполагаемого "центра изображения"
  //                 в окне относительно всей картинки
  //                 в новом масштабе отображения

_MAPIMP long int _MAPAPI mapChangeViewScale(HMAP hmap,long int * x,
											long int * y,float change);

  // Запросить округленный масштаб отображения карты
  // hmap - идентификатор открытых данных
  // Возвращает значение знаменателя масштаба

_MAPIMP long int _MAPAPI mapGetShowScale(HMAP hmap);

  // Запросить точный масштаб отображения карты
  // hmap - идентификатор открытых данных
  // Возвращает значение знаменателя масштаба

_MAPIMP double _MAPAPI mapGetRealShowScale(HMAP hmap);

  // Установить точный масштаб отображения карты          // 09/08/07
  // Возвращает значение знаменателя масштаба

_MAPIMP double _MAPAPI mapSetRealShowScale(HMAP hMap, double scale);

  // Запросить текущий коэффициент масштабирования карты
  // Например: 5 - растянута в 5 раз относительно базового масштаба,
  //         0.1 - сжата в 10 раз.

_MAPIMP double _MAPAPI mapGetDrawScale(HMAP hmap);

  // Подобрать "стандартный" масштаб, ближайший к заданному (scale)

_MAPIMP long int _MAPAPI mapScaleToRoundScale(double scale);

// Запросить количество "стандартных" масштабов        // 24/03/08

_MAPIMP long int _MAPAPI mapScaleTableCount();

 // Запросить элемент таблицы "стандартных" масштабов по порядковому // 24/03/08
 // номеру в таблице(с 1)

_MAPIMP long int _MAPAPI mapScaleTableItem(long int number);


  // Установить способ масштабирования объектов карты при отображении
  // method - способ масштабирования
  // (0 - картографический "с запаздыванием увеличения",
  //  1 - чертежный)
  // Возвращает ранее установленное значение

_MAPIMP long int _MAPAPI mapSetScaleMethod(long int method);
_MAPIMP long int _MAPAPI mapGetScaleMethod();

  // Запросить состав отображаемых объектов
  // hmap - идентификатор открытых данных
  // select - идентификатор контекста поиска/отображения
  // в который будут помещены текущие условия отображения
  // см. mapCreateMapSelectContext(...)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetViewSelect(HMAP hmap,HSELECT select);

  // Установить состав отображаемых объектов
  // hmap - идентификатор открытых данных
  // select - идентификатор устанавливаемого контекста поиска/отображения

_MAPIMP void _MAPAPI mapSetViewSelect(HMAP hmap,HSELECT select);


  // Запросить/Установить цвет фона отображаемой карты
  // hmap - идентификатор открытых данных
  // color - цвет фона
  // При изменении цвета фона необходимо перерисовать весь экран
  // При ошибке возвращает 0x0FFFFFF (белый)

_MAPIMP COLORREF _MAPAPI mapGetBackColor(HMAP hmap);

_MAPIMP COLORREF _MAPAPI mapSetBackColor(HMAP hmap,COLORREF color);

  // Запросить/Установить способ отображения карты
  // hmap - идентификатор открытых данных
  // При установке нового способа отображения возвращается
  // предыдущее значение
  // (см. Maptype.h : VT_SCREEN(1), VT_PRINT(3), VT_PRINTRST(6),...)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetViewType(HMAP hmap);
_MAPIMP long int _MAPAPI mapSetViewType(HMAP hmap, long int type);

  // Запросить яркость карты (от -16 до +16)
  // hmap - идентификатор открытых данных

_MAPIMP long int _MAPAPI mapGetBright(HMAP hmap);

  // Установить яркость карты (от -16 до +16)
  // hmap - идентификатор открытых данных

_MAPIMP long int _MAPAPI mapSetBright(HMAP hmap, long int bright);

  // Запросить контрастность (от -16 до +16)
  // hmap - идентификатор открытых данных

_MAPIMP long int _MAPAPI mapGetContrast(HMAP hmap);

  // Установить контрастность (от -16 до +16)
  // hmap - идентификатор открытых данных

_MAPIMP long int _MAPAPI mapSetContrast(HMAP hmap, long int contrast);

  // Запросить интенсивность заливки полигонов для       // 21/07/06
  // принтерного отображения (от 0 до 100)
  // hmap - идентификатор открытых данных

_MAPIMP long int _MAPAPI mapGetIntensity(HMAP hmap);

  // Установить интенсивность заливки полигонов для
  // принтерного отображения (от 0 до 100)
  // hmap - идентификатор открытых данных

_MAPIMP long int _MAPAPI mapSetIntensity(HMAP hmap, long int intensity);


  // Запросить полупрозрачность для векторной карты (от 0 до 100)
  // hmap - идентификатор открытых данных
  // translucency - значение полупрозрачности (от 0 до 100)
  // При ошибке возвращает -1
_MAPIMP long int _MAPAPI mapGetMapTranslucency(HMAP hmap);

  // Установить полупрозрачность для векторной карты
  // hmap - идентификатор открытых данных
  // translucency - значение полупрозрачности (от 0 до 100)
  // При ошибке возвращает -1
_MAPIMP long int _MAPAPI mapSetMapTranslucency(HMAP hmap, long int translucency);


  /*********************************************************
  *                                                        *
  *          ФОРМИРОВАНИЕ БУФЕРА ОКНА КАРТЫ                *
  *                                                        *
  *********************************************************/

  // Создать буфер карты в памяти для исключения мигания
  // перемещаемых по карте объектов
  // width  - ширина клиентской части окна карты в точках,
  // height - высота клиентской части окна карты в точках.
  // Создается первый буфер экрана, второй создается при первом вызове
  // функции отображения объекта в буфер (Draw) -  для оптимального
  // применения функций при отображении карты и без перемещаемых объектов
  // Размер буфера =  (width * height * 4)
  // Всего может быть параллельно открыто до 256 образов экранов одновременно
  // Может применяться в паре с функцией mapChangeImageSizeEx
  // При успешном выполнении возвращает идентификатор образа экрана
  // При ошибке возвращает ноль

_MAPIMP HIMAGE _MAPAPI mapCreateImageEx(long int width, long int height);

  // Создание буфера окна
  // hwnd - идентификатор окна, для определения размеров клиентской области
  // Может применяться в паре с функцией mapChangeImageSize
  // При ошибке возвращает ноль

_MAPIMP HIMAGE _MAPAPI mapCreateImage(HWND hwnd);

  // Удалить буфер окна
  // himage - идентификатор буфера окна

_MAPIMP void _MAPAPI mapCloseImage(HIMAGE image);

  // Запросить контекст буфера окна
  // himage - идентификатор буфера окна
  // При ошибке возвращает ноль

_MAPIMP HDC _MAPAPI mapGetImageDC(HIMAGE image);

  // Запросить контекст буфера окна для отображения объектов
  // himage - идентификатор буфера окна
  // При ошибке возвращает ноль

_MAPIMP HDC _MAPAPI mapGetImageObjectDC(HIMAGE image);

  // Отобразить содержимое буфера окна в заданный контекст
  // himage - идентификатор буфера окна
  // hdc - контекст области отображения (окна),
  // rect - координаты область отображения в буфере и контексте
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapViewImage(HIMAGE image, HDC hdc, RECT * rect);

  // Отобразить содержимое буфера окна в заданный контекст       // 19/12/07
  // himage - идентификатор буфера окна
  // hwnd - идентификатор окна, в которое выводится изображение,
  // rect - координаты область отображения в буфере и контексте
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapViewImageEx(HIMAGE image, HWND hwnd, RECT * rect);

  // Обновить размеры буфера окна
  // himage - идентификатор буфера окна
  // erase  - признак очистки окна, если равен 0 - содержимое сохраняется
  // width  - новая ширина буфера
  // height - новая высота буфера
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapChangeImageSizeEx(HIMAGE image, long int erase,
											  long int width, long int height);

  // Обновить размеры буфера окна
  // himage - идентификатор буфера окна
  // Срабатывает правильно только, если буфер создан через imImage(HWND hwnd);
  // Содержимое буфера теряется !
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapChangeImageSize(HIMAGE image);

  // Скроллинг буфера окна                         // 26/12/07
  // himage - идентификатор буфера окна
  // dx     - величина смещения окна по горизонтали (> 0 - слева направо,
  //                                                 < 0 - справа налево)
  // dy     - величина смещения окна по вертикали   (> 0 - сверху вниз,
  //                                                 < 0 - снизу вверх)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapScrollImage(HIMAGE himage, long dx, long dy);

  // Обновить изображение заданного фрагмента карты в образе экрана
  // После обновления карты изображение перемещаемых объектов стирается
  // в пределах заданного фрагмента (но для стирания объектов текущим
  // видом карты достаточно вызвать mapClearImageObjects).
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapDrawImageMap(HIMAGE image, HMAP hMap, RECT * rect,
										 POINT * position);

  // Отобразить объект поверх карты местности в образе экрана
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapDrawImageMapObject(HIMAGE image, HMAP hMap,
											   PAINTPARM * parm, HOBJ object);

  // Отобразить объект поверх карты местности в образе экрана c учетом
  // заданного сдвига метрики
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapDrawImageOffsetMapObject(HIMAGE image, HMAP hMap,
													 DOUBLEPOINT * offset,
													 PAINTPARM * parm, HOBJ object);

  // Отобразить объект поверх карты местности в образе экрана
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapDrawImageUserObject(HIMAGE image, HMAP hMap,
												PAINTPARM * parm,
												PLACEDATA * data,
												long int place);
  // Отобразить объект поверх карты местности в образе экрана c учетом
  // заданного сдвига метрики
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapDrawImageOffsetUserObject(HIMAGE image, HMAP hMap,
													  DOUBLEPOINT * offset,
													  PAINTPARM * parm,
													  PLACEDATA * data,
													  long int place);

  // Отобразить графические данные                    // 11/07/08
  // hScreen  - идентификатор образа экрана,
  // points   - координаты в пикселах
  // count    - число координат
  // image    - тип графического примитива (см. mapgdi.h)
  // parm     - параметры графического примитива

_MAPIMP long int _MAPAPI mapDrawImageGraphics(HIMAGE image, HMAP hMap,
											  DRAWPOINT * points, long int count,
											  long int type, const char * parm);

  // Стереть изображение объектов на заданном фрагменте образа
  // экрана (используется копия фона карты в отдельном буфере)
  // При ошибке возвращает ноль

_MAPIMP void _MAPAPI mapClearImageObjects(HIMAGE image, RECT * rect);


#ifdef WIN32API
  // Создать BITMAP с помощью функции CreateDIBSection
  // Размер элемента - 4 байта
  // hdc    - произвольный контекст
  // width  - ширина изображения
  // height - высота изображения
  // memory - адрес изображения в памяти
  // При ошибке возвращает ноль

_MAPIMP HBITMAP _MAPAPI mapCreateBitmap(HDC hdc, long int width, long int height,
										void ** memory);

_MAPIMP HBITMAP _MAPAPI mapCreateBitmapEx(long int width, long int height);

  // Удалить BITMAP, созданный mapCreateBitmap

_MAPIMP void _MAPAPI mapCloseBitmap(HBITMAP hbitmap);

  // Отрисовать карту в Bitmap
  // Размер изображения не больше размеров экрана
  // Для увеличения размеров отрисовываемого изображения
  // (до разумных размеров) можно вызвать mapSetScreenImageSize()
  // erase - признак стирания фона перед выводом,
  //        (0 - фон не стирать, !=0 - очистить фрагмент цветом фона,
  //        для экранного способа вывода (VT_SCREEN) всегда стирает
  //        цветом фона, кроме значения -2 (минус 2))
  // rect - координаты фрагмента карты (Draw) в изображении (Picture)
  // При ошибке в параметрах возвращает 0

 long int _MAPAPI mapPaintToBitmap(HMAP hmap, HBITMAP hbitmap, int erase,
								   RECT * rect);                       // 15/10/07

#endif

  /*********************************************************
  *                                                        *
  *       ФУНКЦИИ ЗАПРОСА ИНФОРМАЦИИ О ВЕКТОРНОЙ КАРТЕ     *
  *                                                        *
  *********************************************************/

  // Запросить базовый масштаб карты
  // hmap - идентификатор открытых данных
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMapScale(HMAP hmap);

  // Запросить название карты
  // hmap - идентификатор открытых данных
  // name - адрес буфера для результата запроса
  // size - размер буфера
  // При ошибке возвращает пустую строку

_MAPIMP const char * _MAPAPI mapGetMapName(HMAP hmap);
_MAPIMP long int _MAPAPI mapGetMapNameEx(HMAP hmap, char * name, long int size);

  // Запросить название карты в формате UNICODE              // 07/12/06
  // name - строка в кодировке UNICODE (2 байта на символ)
  // size - размер строки в байтах
  // При ошибке возвращает пустую строку

_MAPIMP long int _MAPAPI mapGetMapNameUn(HMAP hMap, WCHAR * name, long int size);

  // Запросить путь к паспорту карты
  // hmap - идентификатор открытых данных
  // При ошибке возвращает пустую строку

_MAPIMP const char * _MAPAPI mapGetMapPath(HMAP hmap);

  // Запросить тип карты
  // hmap - идентификатор открытых данных
  // Типы карт - см. mapcreat.h, MAPTYPE
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMapType(HMAP hmap);

  // Запросить - является ли карта пользовательской
  // Пользовательская карта состоит из одно листа переменных
  // размеров без рамки
  // В структуре MAPREGISTEREX пользовательская карта в поле
  // FlagRealPlace имеет ненулевое значение
  // Если карта пользовательская - возвращается ненулевое значение

_MAPIMP long int _MAPAPI mapIsMapSite(HMAP hmap);

  // Запросить прямоугольные координаты габаритов карты
  // в метрах (система координат PLANE)
  // X - снизу вверх, Y - слева направо
  // т.1 - нижний левый угол,
  // т.2 - верхний правый
  // hmap - идентификатор открытых данных

_MAPIMP double _MAPAPI mapGetMapX1(HMAP hmap);
_MAPIMP double _MAPAPI mapGetMapY1(HMAP hmap);
_MAPIMP double _MAPAPI mapGetMapX2(HMAP hmap);
_MAPIMP double _MAPAPI mapGetMapY2(HMAP hmap);

  // Запросить паспортные данные векторной карты
  // Структуры MAPREGISTER и LISTREGISTER описаны в mapcreat.h
  // hmap - идентификатор открытых данных
  // sheetnumber - номер листа карты для
  // которого запрашиваются паспортные данные
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMapInfo(HMAP hmap,long int sheetnumber,
								 MAPREGISTER * map,
								 LISTREGISTER * sheet);
_MAPIMP long int _MAPAPI mapGetMapInfoEx(HMAP hmap,long int sheetnumber,   //15/09/03
								 MAPREGISTEREX * map,
								 LISTREGISTER * sheet);

  // Запросить паспортные данные векторной карты
  // по имени файла - паспорта карты (MAP,SIT) (name)
  // Структуры MAPREGISTER и LISTREGISTER описаны в mapcreat.h
  // sheetnumber - номер листа карты для
  // которого запрашиваются паспортные данные
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMapInfoByName(const char * name,
									   long int sheetnumber,
									   MAPREGISTER * map,
									   LISTREGISTER * sheet);

#ifdef WIN32API
_MAPIMP long int _MAPAPI mapGetMapInfoByNameEx(const char * name,
									   long int sheetnumber,
									   MAPREGISTEREX * map,
									   LISTREGISTER * sheet);
#endif
  // Запросить имя классификатор карты по имени карты   21/02/06
  // name    - имя файла паспорта карты (MAP,SIT)
  // rscname - имя файла RSC
  // size    - размер буфера для размещения имени RSC
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetRscByName(const char * name,
										 char * rscname, long int size);

  // Контроль номенклатуры карты
  // nomenclature - строка с номенклатурой
  // length - длина строки
  // type - тип карты (из MAPTYPE)
  // scale - масштаб  (1000000,500000,200000 и т.д.
  //                   соответствующий типу карты)

_MAPIMP long int _MAPAPI mapCheckNomenclature(const char *nomenclature,
										long int length,
										long int type, long int scale);

  // Формирование имени файла по номенклатуре (удаляет точки, пробелы, -)
  // filename - место под имя файла
  // filelength - длина строки под имя файла
  // nomenclature - номенклатура листа
  // при ошибке возвращает 0
  // 04/09/02
_MAPIMP long int _MAPAPI mapSetFileNameFromNomenclature(char *filename, int filelength,
												  char *nomenclature);

  // Расчет данных на лист топографической карты
  // Равноугольная проекция Гаусса-Крюгера
  // hmap - идентификатор открытых данных
  // Структуры MAPREGISTER и LISTREGISTER описаны в mapcreat.h
  // входные данные   заполнены  поля в mapreg:
  //                - тип карты
  //                - масштаб
  //                - проекции исходного материала
  //                  заполнены  поля в sheet:
  //                - номенклатура
  // выходные данные  заполнены  поля в mapreg:
  //                 - осевой меридиан (при создании карты( hMap = 0))
  //                  заполнены  поля в sheet:
  //                 - геодезические координаты,
  //                 - прямоугольные координаты,
  //                 - сближение меридианов
  // Если mapreg и sheet заполняются для создания карты (самый первый лист)
  //  - hmap = 0
  // Если mapreg заполняется для добавления листа в карту
  //  - hmap != 0

_MAPIMP long int _MAPAPI mapCalcTopographicSheet(HMAP hmap,
										   MAPREGISTER *mapreg,
										   LISTREGISTER *sheet);

  // Установить признак повышенной точности хранения координат
  // Вызывается после создания карты (Map) или плана (Plane)
  // для установки максимальной точности хранения координат
  // hmap -  идентификатор открытых данных
  // Объем метрики вдвое больше, точность хранения - максимальная
  // Нормальная точность хранения зависит от масштаба - для 100 000 - не
  // хуже 0,5 метра, для 10 000 - не хуже 0,05 метра
  // Все пользовательские карты, карты и планы местности
  // масштабов 5 000 и крупнее - всегда повышенной точности
  // Степень точности устанавливается при создании карты в поле DeviceCapability
  // структуры MAPREGISTEREX отрицательным значением (см. mapcreat.h),
  // в этом случае вызов mapSetMapPrecision не нужен

_MAPIMP void _MAPAPI mapSetMapPrecision(HMAP hmap);              // 26/12/06

  // Запросить признак повышенной точности хранения координат
  // hmap -  идентификатор открытых данных
  // Возвращает значения:
  // 1 - максимальная точность хранения,
  // 2 - с точностью 2 знака (сантиметры),
  // 3 - с точностью 3 знака (миллиметры)
  // При ошибке или нормальной точности хранения координат возвращает ноль

_MAPIMP long int _MAPAPI mapGetMapPrecision(HMAP hmap);              // 26/12/06

  // Запросить габариты карты по файктически существующим объектам на карте
  //  dframe - адрес области для размещения результата
  //  При ошибке возвращает 0, иначе - dframe
_MAPIMP long int _MAPAPI mapGetMapObjectFrame(HMAP hMap, DFRAME *dframe);

  /*********************************************************
  *                                                        *
  *       ФУНКЦИИ ЗАПРОСА ИНФОРМАЦИИ О СЛОЯХ КАРТЫ         *
  *                                                        *
  *********************************************************/

 // Запросить число слоев на карте
 // hmap - идентификатор открытых данных
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetLayerCount(HMAP hmap);

 // Запросить название слоя по его номеру (number)
 // hmap - идентификатор открытых данных
 // name - адрес буфера для результата запроса
 // size - размер буфера
 // Номер первого слоя 0
 // При ошибке возвращает ноль

_MAPIMP const char * _MAPAPI mapGetLayerName(HMAP hmap,long int number);
_MAPIMP long int _MAPAPI mapGetLayerNameEx(HMAP hmap,long int number,
										   char * name,long int size);

 // Запросить название слоя в кодировке UNICODE по его номеру (number)
 // hmap - идентификатор открытых данных
 // name - адрес буфера для результата запроса
 // size - размер буфера
 // Номер первого слоя 0
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetLayerNameUn(HMAP hmap,long int number,
										   WCHAR * name,long int size);


  /*********************************************************
  *                                                        *
  *       ФУНКЦИИ ЗАПРОСА ИНФОРМАЦИИ О ЛИСТАХ КАРТЫ        *
  *                                                        *
  *********************************************************/

 // Определить собственный номер листа по заданным координатам (x,y).
 // Система координат задана переменной place.
 // Если лист не найден - возвращает ноль.
 // Если в одной точке несколько листов :
 // hmap - идентификатор открытых данных
 // number - порядковый номер листа в перекрытии (начина с 1).
 // Поиск всегда дает одинаковый порядок листов
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapWhatListNumber(HMAP hmap,double x,double y,
										   long int number,long int place/* = PP_MAP*/);

 // Запросить имя листа по заданным координатам (x,y).
 // hmap - идентификатор открытых данных
 // name - адрес буфера для результата запроса
 // size - размер буфера
 // Система координат задана переменной place.
 // Если лист не найден - возвращает ноль

_MAPIMP const char * _MAPAPI mapWhatListName(HMAP hmap,double x, double y,
								   long int number,long int place/* = PP_MAP*/);

_MAPIMP long int _MAPAPI mapWhatListNameEx(HMAP hmap,double x, double y,
									long int number,long int place,
									char * name,long int size);

 // Запросить имя листа (ANSI) по его номеру (number)
 // hmap - идентификатор открытых данных
 // name - адрес буфера для результата запроса
 // size - размер буфера
 // При ошибке возвращает ноль

_MAPIMP const char * _MAPAPI mapGetListName(HMAP hmap,long int number);
_MAPIMP long int _MAPAPI mapGetListNameEx(HMAP hmap,long int number,
										  char * name,long int size);

 // Запросить имя листа в кодировке UNICODE по его номеру (number)
 // hmap - идентификатор открытых данных
 // name - адрес буфера для результата запроса
 // size - размер буфера
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetListNameUn(HMAP hmap, long int number,
										  WCHAR * name, long int size);

 // Запросить общее число листов в районе
 // hmap - идентификатор открытых данных
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetListCount(HMAP hmap);

 // Запросить общее число объектов в листе
 // hmap - идентификатор открытых данных
 // list - номер листа
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetObjectCount(HMAP hmap, long int list);

 // Определить по имени листа его принадлежность карте
 // hmap - идентификатор открытых данных
 // listname - имя листа (номенклатура)
 // Возвращает номер карты в цепочке карт,которой принадлежит
 // лист по имени listname
 // (0-фоновая карта, 1-первая пользовательская карта и т.д.)
 // При ошибке возвращает "-1"

_MAPIMP long int _MAPAPI mapWhatListLayoutIs(HMAP hmap, char* listname);

 // Запросить объект "Рамка листа"
 // hmap - идентификатор открытых данных
 // list - номер листа (c 1)
 // info - идентификатор объекта карты в памяти
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetListFrameObject(HMAP hmap,long int list,
											   HOBJ info);

 // Запросить габариты объекта "Рамка листа" (если рамки нет -
 // заполняются по габаритам из паспорта)
 // hmap  - идентификатор открытых данных
 // list  - номер листа
 // frame - указатель на габариты листа в метрах
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetListFrame(HMAP hmap, int list, DFRAME * frame);

 // Создать объект "Рамка листа"
 // hmap - идентификатор открытых данных
 // list - последовательный номер листа карты (c 1)
 // info - идентификатор объекта карты в памяти
 // HOBJ должен быть создан вызовом mapCreateObject
 // при успешном выполнении HOBJ будет содержать созданную
 // или существующую рамку листа
 // Для пользовательской карты рамка создается, но не записывается
 // Для карты местности созданная рамка сохраняется на карте
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapCreateListFrameObject(HMAP hmap, long int list,
												  HOBJ info);

  /*********************************************************
  *                                                        *
  * ФУНКЦИИ ЗАПРОСА ИНФОРМАЦИИ ИЗ КЛАССИФИКАТОРА ОБ'ЕКТОВ  *
  *                                                        *
  *********************************************************/

 // Запросить число объектов описанных в классификаторе
 // hmap - идентификатор открытых данных
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapRscObjectCount(HMAP hmap);

 // Запросить число объектов описанных в классификаторе
 // в заданном слое
 // hmap - идентификатор открытых данных
 // layer - номер слоя в классификаторе
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapRscObjectCountInLayer(HMAP hmap,long int layer);

 // Запросить название объекта по порядковому номеру (number)
 // в заданном слое
 // hmap - идентификатор открытых данных
 // layer - номер слоя в классификаторе
 // При ошибке возвращает ноль или пустую строку

_MAPIMP const char * _MAPAPI mapRscObjectNameInLayer(HMAP hmap,
													 long int layer,
													 long int number);

 // Запросить название объекта по порядковому номеру
 // в заданном слое
 // name - адрес строки для размещения результата
 // size - размер строки
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapRscObjectNameInLayerEx(HMAP hMap,          // 08/05/07
												   long int layer,
												   long int number,
												   char * name, long int size);

 // Запросить классификационный код объекта
 // по порядковому номеру в заданном слое (number)
 // hmap - идентификатор открытых данных
 // layer - номер слоя в классификаторе
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapRscObjectExcodeInLayer(HMAP hmap,
											long int layer,
											long int number);

 // Запросить код локализации объекта
 // по порядковому номеру в заданном слое (number)
 // hmap - идентификатор открытых данных
 // layer - номер слоя в классификаторе
 // При ошибке возвращает ноль (ноль допустим)

_MAPIMP long int  _MAPAPI mapRscObjectLocalInLayer(HMAP hmap,
												   long int layer,
												   long int number);

 // Запросить внутренний код (индекс) объекта
 // по порядковому номеру в заданном слое (number)
 // hmap - идентификатор открытых данных
 // layer - номер слоя в классификаторе
 // При ошибке возвращает ноль

_MAPIMP long int  _MAPAPI mapRscObjectCodeInLayer(HMAP hmap,
										  long int layer,
										  long int number);

 // Запросить внутренний код (индекс) объекта
 // по внешнему коду (excode) и локализации (local)
 // hmap - идентификатор открытых данных
 // При ошибке возвращает ноль

_MAPIMP long int  _MAPAPI mapRscObjectCode(HMAP hMap,
									long int excode,
									long int local);


 // Запросить число семантических характеристик в классификаторе
 // hmap - идентификатор открытых данных
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapRscSemanticCount(HMAP hmap);

 // Запросить код семантической характеристики объекта
 // hmap - идентификатор открытых данных
 // number - последовательный номер характеристики в классификаторе (c 1)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapRscSemanticCode(HMAP hmap,long int number);

 // Запросить код семантической характеристики объекта
 // по короткому имени семантики               // 09/02/05
 // hmap - идентификатор открытых данных
 // key  - короткое имя семантики (ключ) в классификаторе
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapRscSemanticCodeByKey(HMAP hmap, const char * key);

 // Запросить название семантической характеристики объекта
 // hmap - идентификатор открытых данных
 // code    - код характеристики
 // При ошибке возвращает ноль или пустую строку

_MAPIMP const char * _MAPAPI mapRscSemanticName(HMAP hmap,long int code);

 // Запросить тип семантической характеристики объекта
 // hmap - идентификатор открытых данных
 // code    - код характеристики
 // При ошибке возвращает ноль
_MAPIMP long int _MAPAPI mapRscSemanticType(HMAP hMap,long int code);

  /*********************************************************
  *                                                        *
  *           ПРЕОБРАЗОВАНИЕ КООРДИНАТ ТОЧКИ               *
  *                                                        *
  *********************************************************/

 // Запросить габариты района (всех видов карт)
 // hmap - идентификатор открытых данных
 // dframe - указатель на заполняемую структуру
 // place  - запрашиваемая система координат (PP_PLANE, PP_GEO,...)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetTotalBorder(HMAP hmap, DFRAME * dframe,
										   long int place);

 // Преобразование из дискретов на карте (районе работ)
 // в пикселы на изображении
 // hmap - идентификатор открытых данных
 // x,y  - преобразуемые координаты
 // на входе дискреты, на выходе - пикселы.
 // Применение :
 // xpix = xdis; ypix = ydis;
 // mapMapToPicture(xpix,ypix);

_MAPIMP void _MAPAPI mapMapToPicture(HMAP hmap,double * x, double * y);

 // Преобразование из дискретов на карте (районе работ)
 // в метры на местности
 // на входе дискреты, на выходе - метры.

_MAPIMP void _MAPAPI mapMapToPlane(HMAP hmap,double * x, double * y);

 // Преобразование из пикселов в изображении в координаты
 // карты (района работ) в дискретах
 // hmap - идентификатор открытых данных
 // x,y  - преобразуемые координаты

_MAPIMP void _MAPAPI mapPictureToMap(HMAP hmap,double * x, double * y);

 // Преобразование из пикселов в изображении в координаты
 // на местности в метрах
 // Применение :
 // xmet = xdis; ymet = ydis;
 // mapPictureToPlane(xmet,ymet);
 // hmap - идентификатор открытых данных
 // x,y  - преобразуемые координаты

_MAPIMP void _MAPAPI mapPictureToPlane(HMAP hmap,double * x, double * y);

 // Преобразование из метров на местности в дискреты
 // на карте (районе работ)
 // hmap - идентификатор открытых данных
 // x,y  - преобразуемые координаты

_MAPIMP void _MAPAPI mapPlaneToMap(HMAP hmap,double * x, double * y);

 // Преобразование из метров на местности в пикселы на
 // изображении
 // hmap - идентификатор открытых данных
 // x,y  - преобразуемые координаты

_MAPIMP void _MAPAPI mapPlaneToPicture(HMAP hmap,double * x, double * y);

 // Преобразование из метров на местности в геодезические
 // координаты в радианах в соответствии с проекцией карты
 // (поддерживаетс не для всех карт !)
 // Применение :
 // if (mapIsGeoSupported())   |  или :
 //   {                        |  if (mapIsGeoSupported())
 //     B = Xmet; L = Ymet;    |    {
 //     mapPlan2Geo(B,L);      |      mapPlan2Geo(B=Xmet,L=Ymet);
 //   }                        |    }
 // hmap - идентификатор открытых данных
 // Bx,Ly  - преобразуемые координаты
 // на входе метры, на выходе - радианы
 // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapPlaneToGeo(HMAP hmap,double *Bx, double *Ly);

 // Преобразование из геодезических координат в радианах
 // в метры на местности в соответствии с проекцией карты
 // (поддерживается не для всех карт !)
 // hmap - идентификатор открытых данных
 // Bx,Ly  - преобразуемые координаты
 // на входе радианы, на выходе - метры
 // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapGeoToPlane(HMAP hmap,double *Bx, double *Ly);

 // Преобразование координат в метрах на местности из одной зоны в другую
 // source - номер исходной зоны системы 1942г
 // target - нужной зоны
 // x,y  - преобразуемые координаты
 // на входе метры в одной зоне 42г.,на выходе - другой.
 // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapPlaneToPlaneByZone(long int source, long int target,
										 double * x, double * y);


 // Преобразование координат в метрах на местности из заданной зоны
 // в геодезические координаты в системе 42г.
 // zone - номер исходной зоны системы 1942г
 // x,y  - преобразуемые координаты
 // на входе метры в одной зоне 42г.,на выходе - радианы.
 // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapPlaneToGeo42ByZone(long int zone, double * x, double * y);


 // Преобразование координат в метрах на местности из заданной зоны UTM
 // в геодезические координаты в системе WGS-84.         // 03/07/06
 // zone - номер исходной зоны системы UTM
 // x,y  - преобразуемые координаты
 // на входе метры в одной зоне UTM, на выходе - радианы WGS-84.
 // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapPlaneUTMToGeoWGS84ByZone(long int zone, double * x, double * y);

 // Запрос - поддерживается ли пересчет к геодезическим
 // координатам из плоских прямоугольных и обратно
 // hmap - идентификатор открытых данных
 // Если нет - возвращает ноль

_MAPIMP long int _MAPAPI mapIsGeoSupported(HMAP hmap);

 // Преобразование из метров на местности (проекция карты)
 // в геодезические координаты в радианах (общеземной эллипсоид WGS84)
 // (поддерживается не для всех карт !)
 // Наличие высоты повышает точность расчетов,
 // функция mapPlaneToGeoWGS84() пытается
 // определить высоту из матрицы
 // Применение :
 // if (mapIsGeoSupported())
 //   {
 //     B = Xmet; L = Ymet;
 //     mapPlaneToGeoWGS84(hMap,B,L);
 //   }
 // hmap  - идентификатор открытых данных
 // Bx,Ly - преобразуемые координаты
 // на входе метры, на выходе - радианы
 // H     - высота в точке (метры)
 // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapPlaneToGeoWGS84(HMAP hmap,double *Bx, double *Ly);
_MAPIMP long int _MAPAPI mapPlaneToGeoWGS843D(HMAP hmap,double *Bx, double *Ly,
											  double *H);

 // Преобразование из метров на местности (проекция карты)
 // в геодезические координаты в радианах (эллипсоид Красовского, СК-42)
 // (поддерживается не для всех карт !)
 // hmap  - идентификатор открытых данных
 // Bx,Ly - преобразуемые координаты
 // на входе метры, на выходе - радианы
 // H     - высота в точке (метры)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapPlaneToGeo42(HMAP hmap,double *Bx, double *Ly);
_MAPIMP long int _MAPAPI mapPlaneToGeo423D(HMAP hmap,double *Bx, double *Ly,
										   double *H);

 //  Преобразование из геодезических координат в радианах
 // (общеземной эллипсоид WGS84)
 //  в метры на местности в системе 1942г (эллипсоид Красовского)
 // (поддерживается не для всех карт !)
 // Применение :
 // if (mapIsGeoSupported())
 //   {
 //     B = Xmet; L = Ymet;
 //     mapGeo84ToPlane42(hMap,B,L);
 //   }
 // hmap - идентификатор открытых данных
 // Bx,Ly  - преобразуемые координаты
 // на входе радианы, на выходе - метры
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGeoWGS84ToPlane42(HMAP hmap,double *Bx, double *Ly);

 //  Преобразование из геодезических координат в радианах
 // (общеземной эллипсоид WGS84)
 //  в метры на местности в проекции карты
 // (поддерживается не для всех карт !)
 // hmap - идентификатор открытых данных
 // Bx,Ly,H  - преобразуемые координаты
 // на входе радианы, на выходе - метры
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGeoWGS84ToPlane3D(HMAP hmap, double *Bx, double *Ly,
											  double * H);

 //  Преобразование из геодезических координат в радианах
 // (общеземной эллипсоид ПЗ-90)
 //  в метры на местности в проекции карты
 // (поддерживается не для всех карт !)
 // hmap - идентификатор открытых данных
 // Bx,Ly,H  - преобразуемые координаты
 // на входе радианы, на выходе - метры
 // При ошибке возвращает ноль

//_MAPIMP long int _MAPAPI mapGeoEP90ToPlane3D(HMAP hmap, double *Bx, double *Ly,
//                                             double * H);


 //  Преобразование из геодезических координат в радианах
 // (общеземной эллипсоид ГСК-2011)
 //  в метры на местности в проекции карты
 // (поддерживается не для всех карт !)
 // hmap - идентификатор открытых данных
 // Bx,Ly,H  - преобразуемые координаты
 // на входе радианы, на выходе - метры
 // При ошибке возвращает ноль

//_MAPIMP long int _MAPAPI mapGeoGSK2011ToPlane3D(HMAP hmap, double *Bx, double *Ly,
//                                             double * H);


 // Преобразование геодезических координаты в радианах из системы 1942г
 // (эллипсоид Красовского) в геодезические координаты в радианах
 // (общеземной эллипсоид WGS84) (поддерживается не для всех карт !)
 // hmap - идентификатор открытых данных
 // Bx,Ly  - преобразуемые координаты
 // на входе радианы в 42г., на выходе - радианы в WGS84
 // H     - высота в точке (метры)
 // Параметр hmap может быть равен нулю

_MAPIMP void _MAPAPI mapGeo42ToGeoWGS84Ex(double *Bx, double *Ly, double *H);
_MAPIMP long int _MAPAPI mapGeo42ToGeoWGS84(HMAP hmap,double *Bx, double *Ly);
_MAPIMP long int _MAPAPI mapGeo42ToGeoWGS843D(HMAP hmap,double *Bx, double *Ly,
											  double *H);

 // Преобразование геодезических координат в радианах из системы NAHRWAN
 // (эллипсоид Кларка 1880г) в геодезические координаты в радианах
 // системы WGS84 (общеземной эллипсоид WGS-84)         // 24/01/05
 // на входе радианы в NAHRWAN, на выходе - радианы в WGS84
 // H     - высота в точке (метры)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGeoNahrwanToGeoWGS843D(double *B, double *L, double *H);


 // Преобразование геодезических координаты в радианах из системы WGS 84
 // (общеземной эллипсоид WGS84) (поддерживается не для всех карт !)
 // в геодезические координаты в радианах в систему 1942 г (эллипсоид Красовского)
 // hmap - идентификатор открытых данных
 // Bx,Ly  - преобразуемые координаты
 // на входе радианы в WGS84, на выходе - радианы в 42г.
 // H     - высота в точке (метры)
 // Параметр hmap может быть равен нулю

_MAPIMP long int _MAPAPI mapGeoWGS84ToGeo42Ex(double *Bx, double *Ly, double *H);     // 03/05/05
_MAPIMP long int _MAPAPI mapGeoWGS84ToGeo42(HMAP hmap,double *Bx, double *Ly);
_MAPIMP long int _MAPAPI mapGeoWGS84ToGeo423D(HMAP hmap,double *Bx, double *Ly,
											  double *H);

 // Преобразование геодезических координат в радианах из системы ПЗ-90
 // (общеземной эллипсоид ПЗ-90) в геодезические координаты в радианах
 // системы 1942 г (эллипсоид Красовского)
 // Параметр hmap может быть равен нулю

_MAPIMP void _MAPAPI mapGeoEP90ToGeo42Ex(double *Bx, double *Ly, double *H);      // 03/05/05
_MAPIMP long int _MAPAPI mapGeoEP90ToGeo42(HMAP hmap, double *Bx, double *Ly);
_MAPIMP long int _MAPAPI mapGeoEP90ToGeo423D(HMAP hmap, double *Bx, double *Ly,
											 double *H);

 // Преобразование геодезических координат в радианах из системы ПЗ-90
 // (общеземной эллипсоид ПЗ-90) в геодезические координаты в радианах
 // системы 1995 г (эллипсоид Красовского)

_MAPIMP void _MAPAPI mapGeoEP90ToGeo95Ex(double *Bx, double *Ly, double *H);     // 03/05/07

 // Преобразование геодезических координат в радианах из системы 1995 г
 // (эллипсоид Красовского) в геодезические координаты в радианах
 // системы ПЗ-90(общеземной эллипсоид ПЗ-90)

_MAPIMP void _MAPAPI mapGeo95ToGeoEP90Ex(double *Bx, double *Ly, double *H);     // 03/05/07

 // Преобразование геодезических координат в радианах из системы 1942 г
 // (эллипсоид Красовского) в геодезические координаты в радианах
 // системы ПЗ-90(общеземной эллипсоид ПЗ-90)
 // Параметр hmap может быть равен нулю

_MAPIMP void     _MAPAPI mapGeo42ToGeoEP90Ex(double *Bx, double *Ly, double *H);       // 03/05/05
_MAPIMP long int _MAPAPI mapGeo42ToGeoEP90(HMAP hmap, double *Bx, double *Ly);
_MAPIMP long int _MAPAPI mapGeo42ToGeoEP903D(HMAP hmap, double *Bx, double *Ly,
											 double *H);

 // Преобразование прямоугольных координат в метрах из системы координат карты
 // в геодезические координаты в радианах системы ПЗ-90(общеземной эллипсоид ПЗ-90)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapPlaneToGeoEP903D(HMAP hmap, double *Bx, double *Ly, double *H);   // 16/05/07


 // Преобразование геодезических координат в радианах из системы 1942 г
 // (эллипсоид Красовского) в геодезические координаты в радианах
 // системы ГСК-201(эллипсоид ГСК-201)
 // Параметр hmap может быть равен нулю

_MAPIMP void     _MAPAPI mapGeo42ToGeoGSK2011Ex(double *Bx, double *Ly, double *H);       // 03/05/05
_MAPIMP long int _MAPAPI mapGeo42ToGeoGSK2011(HMAP hmap, double *Bx, double *Ly);
_MAPIMP long int _MAPAPI mapGeo42ToGeoGSK20113D(HMAP hmap, double *Bx, double *Ly,
											 double *H);


 // Преобразование геодезических координат в радианах из системы ГСК-2011
 // (эллипсоид ГСК-2011) в геодезические координаты в радианах
 // системы 1942 г (эллипсоид Красовского)
 // Параметр hmap может быть равен нулю

_MAPIMP void _MAPAPI mapGeoGSK2011ToGeo42Ex(double *Bx, double *Ly, double *H);      // 03/05/05
_MAPIMP long int _MAPAPI mapGeoGSK2011ToGeo42(HMAP hmap, double *Bx, double *Ly);
_MAPIMP long int _MAPAPI mapGeoGSK2011ToGeo423D(HMAP hmap, double *Bx, double *Ly,
											 double *H);

 // Преобразование геодезических координат в радианах из системы ПЗ-90
 // (общеземной эллипсоид ПЗ-90) в геодезические координаты в радианах
 // системы ГСК-2011 (эллипсоид ГСК-2011)

_MAPIMP void _MAPAPI mapGeoEP90ToGeoGSK2011Ex(double *Bx, double *Ly, double *H);     // 03/05/07

 // Преобразование геодезических координат в радианах из системы ГСК-2011
 // (эллипсоид ГСК-2011) в геодезические координаты в радианах
 // системы ПЗ-90(общеземной эллипсоид ПЗ-90)

_MAPIMP void _MAPAPI mapGeoGSK2011ToGeoEP90Ex(double *Bx, double *Ly, double *H);     // 03/05/07

// Преобразование прямоугольных координат в метрах из системы координат карты
// в геодезические координаты в радианах системы ГСК-2011(эллипсоид ГСК-2011)
// При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapPlaneToGeoGSK20113D(HMAP hmap, double *Bx, double *Ly, double *H);


 // Преобразование геодезических координат в радианах из системы 1942 г
 // (эллипсоид Красовского) в прямоугольные в метрах в системе NAHRWAN в
 // проекции UTM (эллипсоид Кларка 1880г.) - NAD27

_MAPIMP void     _MAPAPI mapGeo42ToPlaneUTMEx(double *Bx, double *Ly, double H);       // 03/05/05
_MAPIMP long int _MAPAPI mapGeo42ToPlaneUTM(HMAP hmap, double *Bx, double *Ly);
_MAPIMP long int _MAPAPI mapGeo42ToPlaneUTM3D(HMAP hmap, double *Bx, double *Ly,
											  double *H);


 // Преобразование геодезических координат в радианах из системы 1942 г
 // (эллипсоид Красовского) в прямоугольные в метрах с учетом ближайшей
 // зоны к координатам точки                            // 02/10/02
 // Bx,Ly - преобразуемые координаты

_MAPIMP void _MAPAPI mapGeo42ToPlaneByOwnZone(double *Bx, double *Ly);


 // Преобразование набора точек из одной системы
 // координат в другую
 // hmap  - идентификатор открытых данных
 // src,tag - указатели на области размещения точек,
 // могут указывать на одну и ту же область памяти;
 // source,target - типы входной и выходной метрики (PP_MAP,PP_PLANE ...);
 // count - число преобразуемых точек.
 // Пересчет связанный с геодезическими координатами
 // будет выполняться только,если IsGeoSupported() != 0.

_MAPIMP void _MAPAPI mapTransformPoints(HMAP hmap,DOUBLEPOINT * src,long int source,
										DOUBLEPOINT * tag,long int target,
										long int count);

 // Преобразование координат из градусов в радианы
 // (для положительного значения)
 // degree - структура, содержащая координаты в градусах, минутах,
 // секундах. Описана в maptype.h
 // radian - значение в радианах

_MAPIMP void _MAPAPI mapDegreeToRadian(GEODEGREE * degree,
									   double * radian);

 // Преобразование координат из радиан в градусы
 // (для положительного значения)
 // radian - значение в радианах
 // degree - структура, содержащая координаты в градусах, минутах,
 // секундах. Описана в maptype.h

_MAPIMP void _MAPAPI mapRadianToDegree(double * radian,
									   GEODEGREE * degree);

 // Преобразование координат из градусов в радианы с учетом знака
 // degree - структура, содержащая координаты в градусах, минутах,
 // секундах. Описана в maptype.h
 // radian - значение в радианах

_MAPIMP void _MAPAPI mapSignDegreeToRadian(SIGNDEGREE * degree,
										   double * radian);

 // Преобразование координат из радиан в градусы со знаком
 // radian - значение в радианах
 // degree - структура, содержащая координаты в градусах, минутах,
 // секундах. Описана в maptype.h

_MAPIMP void _MAPAPI mapRadianToSignDegree(double * radian,
										   SIGNDEGREE * degree);

 // Вычисление осевого маридиана по номеру зоны для
 // топокарт системы 42 года
 // zone - номер зоны системы 42 года
 // При ошибке возвращает ноль

_MAPIMP double _MAPAPI mapGetAxisMeridianByZone(long int zone);

 // Вычисление номера зоны по геодезической долготе в радианах
 // (меридиану) для топокарт системы 42 года
 // meridian - значение меридиана в радианах
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetZoneByMeridian(double meridian);

 // Заполнение осевого меридиана по геодезической долготе в
 // радианах для топографических карт
 // hmap - идентификатор открытых данных
 // meridian - значение меридиана в радианах
 // Не рекомендуется применять для карт уже содержащих объекты
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetAxisMeridianByMeridian(HMAP hmap, double meridian);

 // Заполнение осевого меридиана по координате Y для
 // топографических карт системы 42 года
 // Не рекомендуется применять для карт уже содержащих объекты
 // hmap  - идентификатор открытых данных
 // y     - координата Y в метрах произвольной точки,
 //         попадающей на заданный лист
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetAxisMeridianByPlaneY(HMAP hmap, double y);

  /*********************************************************
  *                                                        *
  *     ФУНКЦИИ ЗАПРОСА ИНФОРМАЦИИ ОБ ОБ'ЕКТЕ КАРТЫ        *
  *                                                        *
  *********************************************************/

 // Запросить название листа на котором расположен объект
 // info - идентификатор объекта карты в памяти
 // name - адрес буфера для результата запроса
 // size - размер буфера
 // При ошибке возвращает ноль !

_MAPIMP const char * _MAPAPI mapListName(HOBJ info);
_MAPIMP long int _MAPAPI mapListNameEx(HOBJ info, char * name, long int size);
_MAPIMP long int _MAPAPI mapListNameUn(HOBJ info, WCHAR * name, long int size);

 // Запросить идентификатор классификатора карты, содержащей объект             //19/06/06
 // info - идентификатор объекта карты в памяти
 // При ошибке возвращает ноль

_MAPIMP HRSC _MAPAPI mapGetRscIdentByObject(HOBJ info);

 // Запросить уникальный номер объекта
 // info - идентификатор объекта карты в памяти
 // При ошибке возвращает 0 (ноль допустим)

_MAPIMP long int _MAPAPI mapObjectKey(HOBJ info);

 // Установить уникальный номер объекта
 // info - идентификатор объекта карты в памяти
 // number - уникальный номер объекта в листе
 // Программа, вызывающая данную функцию должна обеспечить
 // уникальность номеров в листе !
 // При ошибке возвращает 0 (ноль допустим)

_MAPIMP long int _MAPAPI mapSetObjectKey(HOBJ info, long int number);

 // Запросить классификационный код объекта
 // info - идентификатор объекта карты в памяти
 // При ошибке возвращает 0 (ноль допустим для нового объекта)

_MAPIMP long int _MAPAPI mapObjectExcode(HOBJ info);

 // Запросить характер локализации объекта
 // info - идентификатор объекта карты в памяти
 // При ошибке возвращает 0  (ноль допустим)

_MAPIMP long int _MAPAPI mapObjectLocal(HOBJ info);

 // Запросить условное название объекта
 // info - идентификатор объекта карты в памяти
 // name - адрес буфера для результата запроса
 // size - размер буфера
 // При ошибке возвращает ноль

_MAPIMP const char * _MAPAPI mapObjectName(HOBJ info);
_MAPIMP long int _MAPAPI mapObjectNameEx(HOBJ info,char * name,long int size);

 // Запросить условное название объекта в кодировке UNICODE
 // info - идентификатор объекта карты в памяти
 // name - адрес буфера для результата запроса
 // size - размер буфера
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapObjectNameUn(HOBJ info, WCHAR * name, long int size);

 // Запросить максимальный размер условного названия объекта
 // info - идентификатор объекта карты в памяти
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapObjectNameSize(HOBJ info);

 // Запросить направление цифрования объекта
 // (OD_RIGHT,OD_LEFT,... - см. Maptype.h)
 // info - идентификатор объекта карты в памяти
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapObjectDirect(HOBJ info);

 // Запросить направление цифрования объекта
 // (OD_RIGHT,OD_LEFT,... - см. MAPTYPE.H)
 // number - номер еекта (для объекта - равен нулю)
 // При ошибке возвращает ноль
																 // 24/01/06
_MAPIMP long int _MAPAPI mapSubjectDirect(HOBJ info, long int subject);


 // Запросить номер слоя объекта ("Layer" = "Segment")
 // info - идентификатор объекта карты в памяти
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSegmentNumber(HOBJ info);

 // Запросить название слоя объекта ("Layer" = "Segment")
 // info - идентификатор объекта карты в памяти
 // name - адрес буфера для результата запроса
 // size - размер буфера
 // При ошибке возвращает ноль

_MAPIMP const char * _MAPAPI mapSegmentName(HOBJ info);
_MAPIMP long int _MAPAPI mapSegmentNameEx(HOBJ info,char * name,long int size);
_MAPIMP long int _MAPAPI mapSegmentNameUn(HOBJ info,WCHAR * name,long int size);

 // Запросить максимальный размер названи слоя объекта
 // info - идентификатор объекта карты в памяти
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSegmentNameSize(HOBJ info);

 // Запросить индекс (внутренний код) объекта
 // info - идентификатор объекта карты в памяти
 // При ошибке возвращает 0 (ноль допустим для нового объекта)

_MAPIMP long int _MAPAPI mapObjectCode(HOBJ info);

 // Установить значение границ видимости по классификатору
 // объектов
 // info - идентификатор объекта карты в памяти

_MAPIMP void _MAPAPI mapClearBotTop(HOBJ info);

 // Запросить/Установить диапазон масштабов видимости объекта
 // scale - масштаб отображения от 1:1 до 1:40 млн.
 // info - идентификатор объекта карты в памяти

_MAPIMP long int _MAPAPI mapObjectTopScale(HOBJ info);
_MAPIMP long int _MAPAPI mapSetObjectTopScale(HOBJ info,long int scale);
_MAPIMP long int _MAPAPI mapObjectBotScale(HOBJ info);
_MAPIMP long int _MAPAPI mapSetObjectBotScale(HOBJ info,long int scale);

 // Запросить - являются ли значения границ видимости у объекта
 // уникальными (то есть установленными не из классификатора,
 // а персональными для данного экземпляра)
 // Если границы видимости беруться из классификатора - возвращает 0

_MAPIMP long int _MAPAPI mapObjectBotTopUniqueness(HOBJ info);

#ifndef HIDEGDX     // 30/07/01
 // Запрос признака группового объекта (устаревшая функция)
 // info - идентификатор объекта карты в памяти
 // Если объект групповой, возвращает 1, иначе 0

_MAPIMP long int _MAPAPI mapObjectIsGroup(HOBJ info);

 // Запрос первого объекта в группе (устаревшая функция)
 // info - исходный объект
 // infofirst - первый объект в группе
 // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapFirstObjectInGroup(HOBJ infofirst, HOBJ info);

 // Запрос следующего объекта в группе (устаревшая функция)
 // info - исходный объект
 // infonext - следующий за исходным объект в группе
 // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapNextObjectInGroup(HOBJ infonext, HOBJ info);

 // Объединение метричных данных групповых объектов (устаревшая функция)
 // info - идентификатор объекта карты в памяти
 // limit - допуск для дотягивания (в метрах)
 // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapUnionGroupObject(HOBJ info, double limit);

#endif // HIDEGDX

 // Сформировать описание нового объекта (!!!)
 // по внешнему коду и локализации
 // info - идентификатор объекта карты в памяти
 // excode - внешний код объекта (числовой),
 // local  - локализация (LOCAL_LINE, LOCAL_POINT...)
 // Вызывается после mapCreateObject(...) и добавления
 // семантики (если она есть)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapRegisterObject(HOBJ info, long int excode,
										   long int local);

 // Сформировать описание нового объекта (!!!)
 // по короткому имени объекта (ключу)
 // info - идентификатор объекта карты в памяти
 // name - символьный код объекта в классификаторе (до 31 символа)
 // Вызывается после mapCreateObject(...)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapRegisterObjectByKey(HOBJ info,
												const char * name);

 // Сформировать описание нового объекта (!!!)
 // по внутреннему коду объекта (см. mapRscObjectCode() и т.п.)
 // info - идентификатор объекта карты в памяти
 // Вызывается после mapCreateObject(...) и добавления
 // семантики (если она есть)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapDescribeObject(HOBJ info, long int code);

 // Сформировать описание нового графического объекта
 // по номеру слоя (из классификатора карты) и локализации
 // info - идентификатор объекта карты в памяти
 // layer - порядковый номер слоя в классификаторе
 // local  - локализация (LOCAL_LINE, LOCAL_POINT..., см. maptype.h)
 // Вызывается после mapCreateObject(...)
 // Для формирования условного знака необходимо
 // использовать функцию mapAppendDraw(...)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapRegisterDrawObject(HOBJ info, long int layer,
											   long int local);

 // Установить номер листа для нового объекта
 // info - идентификатор объекта карты в памяти
 // list - последовательный номер листа (с 1)
 // Обнуляет последовательный и уникальный номера объекта
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetObjectListNumber(HOBJ info, long int list);

 // Запросить номер листа для объекта
 // info - идентификатор объекта карты в памяти
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetListNumber(HOBJ info);

 //  Запросить формат хранения метрики (IDSHORT2,...,IDDOUBLE3)
 //  При ошибке возвращает ноль, иначе - тип формата хранения метрики

_MAPIMP long int _MAPAPI mapGetObjectKind(HOBJ info);      //26/01/05

 // Установить тип и размерность метрики объекта
 // info - идентификатор объекта карты в памяти
 // kind - тип метрики, см. maptype.h
 // (например : IDFLOAT2,IDDOUBLE3, и т.п.,
 // объекты пользовательской карты и рамка листа всегда имеют тип DOUBLE)
 // Пересчет выполняется с сохранением существующих координат
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetObjectKind(HOBJ info, long int kind);

 // Запросить описание объекта в виде записи
 // info - идентификатор объекта карты в памяти
 // buffer - адрес памяти для размещения результата,
 // size   - размер выделенной памяти для контроля.
 // Может применяться для переноса объекта на другую карту
 // той же проекции (!) (ограничение данной версии)
 // Передача объекта может выполняться между различными
 // потоками, процессами, компьютерами
 // по соответствующим протоколам.
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetObjectRecord(HOBJ info,char * buffer,
											long int size);

 // Запросить длину описания объекта в виде записи
 // info - идентификатор объекта карты в памяти
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetObjectRecordLength(HOBJ info);

 // Создать объект на указанной карте из записи объекта
 // hmap  - идентификатор открытых данных
 // hsite - идентификатор открытой пользовательской карты
 // mode  - режим создания
 //  0 - записать,как новый;
 //  1 - заменить объект при совпадении Key();
 //  4 - создать в памяти,как новый,
 //  5 - заменить объект при совпадении Key() в памяти;
 // Для режимов 4 и 5 требуется последующий
 // вызов mapCommitObject()
 // При ошибке возвращает ноль, иначе - идентификатор созданного объекта
 // Если объект не нужен, нужно освободить ресурсы функцией mapFreeObject !

_MAPIMP HOBJ _MAPAPI mapPutObjectRecord(HMAP hmap, HSITE hsite,
										char * buffer,
										long int size,
										long int mode);

 // Запросить порядковый номер объекта в карте
 // info  - идентификатор объекта карты в памяти
 // Если объект только создан и метод mapCommit... не вызывался -
 // возвращает ноль
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetObjectNumber(HOBJ info);

 // Запросить уникальный идентификатор вида объекта в классификаторе
 // (короткое имя - строка длиной до 31 символа)
 // info  - идентификатор объекта карты в памяти
 // При ошибке возвращает ноль

_MAPIMP const char * _MAPAPI mapObjectRscKey(HOBJ info);

 // Установить/сбросить/запросить масштабируемость объекта
 // scale = 1 для установки масштабируемости при увеличении карты
 //         0 для сброса признака масштабируемости
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetObjectScale(HOBJ info, long int scale);
_MAPIMP long int _MAPAPI mapGetObjectScale(HOBJ info);

 // Установить/сбросить/запросить признак "Не сжимать" объекта
 // press = 1 для установки признака "Не сжимать" при сжатии карты
 //           относительного базового масштаба карты
 //         0 для сброса признака
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetObjectPress(HOBJ info, long int press);
_MAPIMP long int _MAPAPI mapGetObjectPress(HOBJ info);

 // Установить/Запросить способ отображения метрики объекта в виде
 // динамического сплайна
 // type - тип сплайна (SPLINETYPE_SMOOTH, SPLINETYPE_POINTS)
 // При ошибке или отмене рисования сплайна возвращает ноль

_MAPIMP long int _MAPAPI mapSetObjectSpline(HOBJ info, long int type);
_MAPIMP long int _MAPAPI mapGetObjectSpline(HOBJ info);


 // ************************************************************
 //                                                            *
 //         ЗАПРОС СЕМАНТИКИ (АТРИБУТОВ) ОБ'ЕКТА               *
 //                                                            *
 // ************************************************************

 // Запросить число семантических характеристик у объекта
 // info  - идентификатор объекта карты в памяти
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSemanticAmount(HOBJ info);

 // Запросить значение семантической характеристики объекта
 // Значение преобразуется в символьный вид без раскодирования
 // info   - идентификатор объекта карты в памяти
 // number - последовательный номер характеристики (c 1),
 // value  - адрес размещения строки,
 // size   - максимальная длина строки
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSemanticValue(HOBJ info, long int number,
										  char * value,
										  long int size);

 // Запросить значение семантической характеристики объекта в UNICODE
 // Значение преобразуется в символьный вид без раскодирования
 // info   - идентификатор объекта карты в памяти
 // number - последовательный номер характеристики (c 1),
 // value  - адрес размещения строки,
 // size   - максимальная длина строки
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSemanticValueUn(HOBJ info, long int number,
											WCHAR * value,
											long int size);

 // Запросить значение семантической характеристики объекта
 // в виде числа с плавающей точкой двойной точности
 // info    - идентификатор объекта карты в памяти
 // number  - последовательный номер характеристики (c 1)
 // Если значение семантики не может быть преобразовано
 // к числовому виду или не найдено - возвращает ноль

_MAPIMP double _MAPAPI mapSemanticDoubleValue(HOBJ info,long int number);

 // Запросить значение семантической характеристики объекта
 // в символьном раскодированном виде
 // Например: Для семантики "СОСТОЯНИЕ" значение "5"
 // заменется на "жилой"
 // info    - идентификатор объекта карты в памяти
 // number  - последовательный номер характеристики (c 1),
 // place   - адрес размещени строки,
 // maxsize - максимальная длина строки
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSemanticValueName(HOBJ info,long int number,
											  char * place,long int maxsize);

 // Запросить значение семантической характеристики объекта
 // в символьном раскодированном виде с добавлением единицы
 // измерения в символьном виде
 // Например: Для семантики "СОСТОЯНИЕ" значение "5"
 // заменется на "жилой";
 // Дл семантики "ВЫСОТА" значение "205,5" заменется
 // на "205,5 м"
 // info    - идентификатор объекта карты в памяти
 // number  - последовательный номер характеристики (c 1),
 // place   - адрес размещения строки,
 // maxsize - максимальная длина строки
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSemanticValueFullName(HOBJ info,long int number,
												  char * place,long int maxsize);
_MAPIMP long int _MAPAPI mapSemanticValueFullNameUn(HOBJ info,long int number,
													WCHAR * place,long int maxsize);

 // Запросить значение семантической характеристики объекта
 // Значение преобразуется в символьный вид
 // info    - идентификатор объекта карты в памяти
 // code    - код характеристики,для которой ищется значение,
 // place   - адрес размещения строки,
 // maxsize - максимальная длина строки
 // number  - последовательный номер найденного значения,
 //  не равен последовательному номеру характеристики !
 //  например : код code имеют 3-я и 6-я характеристики,
 //             соответственно для них number = 1 и 2,
 //             а при number = 3  - код возврата будет ноль.
 // При ошибке возвращает ноль,
 // при успешном выполнении - последовательный номер
 // найденной характеристики

_MAPIMP long int _MAPAPI mapSemanticCodeValue(HOBJ info,long int code,
											  char * place,
											  long int maxsize,long int number);

 // Запросить значение семантической характеристики объекта
 // в виде числа с плавающей точкой двойной точности
 // info    - идентификатор объекта карты в памяти
 // code    - код характеристики,для которой ищется значение,
 // number  - последовательный номер найденного значения,
 //  не равен последовательному номеру характеристики !
 //  например : код code имеют 3-я и 6-я характеристики,
 //             соответственно для них number = 1 и 2,
 //             а при number = 3  - код возврата будет ноль.
 // Если значение семантики не может быть преобразовано
 // к числовому виду или не найдено - возвращает ноль

_MAPIMP double _MAPAPI mapSemanticCodeDoubleValue(HOBJ info,long int code,
												  long int number);

 // Запросить значение семантической характеристики объекта
 // в символьном раскодированном виде
 // info    - идентификатор объекта карты в памяти
 // code    - код характеристики,для которой ищется значение,
 // place   - адрес размещения строки,
 // maxsize - максимальная длина строки
 // number  - последовательный номер найденного значения,
 //  не равен последовательному номеру характеристики !
 //  например : код code имеют 3-я и 6-я характеристики,
 //             соответственно для них number = 1 и 2,
 //             а при number = 3  - код возврата будет ноль.
 // При ошибке возвращает ноль,
 // при успешном выполнении - последовательный номер
 // найденной характеристики

_MAPIMP long int _MAPAPI mapSemanticCodeValueName(HOBJ info,long int code,
												  char * place,
												  long int maxsize,long int number);

 // Запросить название семантической характеристики объекта
 // info    - идентификатор объекта карты в памяти
 // number  - последовательный номер характеристики (c 1)
 // name - адрес буфера для результата запроса
 // size - размер буфера
 // При ошибке возвращает ноль

_MAPIMP const char * _MAPAPI mapSemanticName(HOBJ info,long int number);
_MAPIMP long int _MAPAPI mapSemanticNameEx(HOBJ info,long int number,
										   char * name,long int size);
_MAPIMP long int _MAPAPI mapSemanticNameUn(HOBJ info,long int number,
										   WCHAR * name,long int size);

 // Запросить код семантической характеристики объекта
 // info    - идентификатор объекта карты в памяти
 // number  - последовательный номер характеристики (c 1)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSemanticCode(HOBJ info,long int number);

 // Запросить последовательный номер кода семантической
 // характеристики объекта (c 1)                                   // 20/07/06
 // info    - идентификатор объекта карты в памяти
 // code    - код семантической характеристики в классификаторе
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSemanticNumber(HOBJ info,long int code);

 // Запросить общий размер строки для символьной семантики с учетом повтора
 // кода семантики в нескольких характеристиках                      // 27/02/09
 // При записи строки длиной более 255 символов она делится на несколько
 // характеристик, содержащих части строки менее 255 символов
 // Повтор характеристики может быть связан с применением повторяемой
 // характеристики (имеющей несколько значений для одного объекта,
 // см. в RSCSEMANTICEX поле Reply)
 // info    - идентификатор объекта карты в памяти
 // number  - последовательный номер характеристики (c 1)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSemanticStringLength(HOBJ info,long int number);

 // Запросить общую строку для символьной семантики с учетом повтора
 // кода семантики в нескольких характеристиках                      // 27/02/09
 // При записи строки (mapAppendSemantic) длиной более 255 символов
 // она делится на несколько характеристик, содержащих части строки
 // менее 255 символов.
 // Если для редактирования семантики запрошена строка длиной более 255 символов,
 // то запись обратно нужно делать через mapAppendSemantic (для автоматического
 // удаления старого набора строк неповторяемой семантики).
 // Повтор характеристики может быть связан с применением повторяемой
 // характеристики (имеющей несколько значений для одного объекта,
 // см. в RSCSEMANTICEX поле Reply)
 // info    - идентификатор объекта карты в памяти
 // number  - последовательный номер характеристики (c 1)
 // value   - адрес строки, куда будет записана строка в кодировке ANSI
 // length  - максимальный размер выходной строки для контроля
 // При ошибке возвращает ноль, иначе - длину записанной строки

_MAPIMP long int _MAPAPI mapSemanticString(HOBJ info,long int number, char * value,
										   long int length);


 // ************************************************************
 //                                                            *
 //      РЕДАКТИРОВАНИЕ СЕМАНТИКИ (АТРИБУТОВ) ОБ'ЕКТА          *
 //                                                            *
 // ************************************************************

 // Запросить количество видов семантик, которые еще могут быть
 // добавлены для данного объекта
 // Изменяется в процессе редактирования семантики объекта !
 // (некоторые характеристики могут присваиваться только один раз)
 // info    - идентификатор объекта карты в памяти
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapAvailableSemanticCount(HOBJ info);

 // Запросить внешний код доступной семантики на объект
 // по последовательному номеру доступных семантик
 // Изменяется в процессе редактирования семантики объекта !
 // info    - идентификатор объекта карты в памяти
 // number - последовательный номер доступных семантик (1,2,3...)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapAvailableSemanticCode(HOBJ info,int number);

 // Добавить новую характеристику в семантику объекта
 // info    - идентификатор объекта карты в памяти
 // code    - внешний код характеристики
 // value   - адрес строки,содержащей новое значение
 //           в символьном виде, числа с плавающей точкой могут иметь
 //           разделителем только символ точка "."
 // size    - максимальная длина строки
 // (числовые значения будут преобразовываться в двоичный вид)
 // Если такая семантика была и она не повторяемая - значение заменяется  // 10/07/06
 // При ошибке возвращает ноль,
 // при успешном выполнении - последовательный номер
 // созданной характеристики
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapAppendSemantic(HOBJ info,long int code,
										   const char * value,
										   long int size);

 // Добавить новую характеристику в семантику объекта в виде UNICODE-строки
 // info    - идентификатор объекта карты в памяти
 // code    - внешний код характеристики
 // value   - адрес строки,содержащей новое значение
 //           в символьном виде,
 // size    - максимальная длина строки
 // (числовые значения будут преобразовываться в двоичный вид)
 // Если такая семантика была и она не повторяемая - значение заменяется
 // При ошибке возвращает ноль,
 // при успешном выполнении - последовательный номер
 // созданной характеристики
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapAppendSemanticUn(HOBJ info,long int code,
											 const WCHAR * value,
											 long int size);

 // Добавить новую характеристику в семантику объекта,   // 12/02/06
 // info    - идентификатор объекта карты в памяти
 // code    - внешний код характеристики
 // value   - значение в виде числа двойной точности
 // При ошибке возвращает ноль,
 // при успешном выполнении - последовательный номер
 // созданной характеристики

_MAPIMP long int _MAPAPI mapAppendSemanticDouble(HOBJ info, long int code,
												 double value);

 // Удалить семантическую характеристику объекта
 // info    - идентификатор объекта карты в памяти
 // number  - последовательный номер характеристики
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapDeleteSemantic(HOBJ info,long int number);


 // Изменить значение кода семантической характеристики объекта
 // info    - идентификатор объекта карты в памяти
 // number  - последовательный номер характеристики
 // code    - внешний код характеристики
 // При ошибке возвращает ноль,
 // иначе - внутренний код семантики

_MAPIMP long int _MAPAPI mapSetSemanticCode(HOBJ info, long int number,
											long int code);

 // Изменить значение семантической характеристики объекта
 // info    - идентификатор объекта карты в памяти
 // number  - последовательный номер характеристики,
 // place   - адрес строки, содержащей новое значение
 //           в символьном виде; Для семантики типа "классификатор"
 //           передается код значения в виде строки чисел,
 //           то же - для типа "ссылка на объект".
 // maxsize - длина передаваемой строки (для контроля)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetSemanticValue(HOBJ info,long int number,
											 char * place,long int maxsize);

 // Изменить описание объекта при изменении семантических
 // характеристик
 // info    - идентификатор объекта карты в памяти
 // Если вид объекта не изменился возвращает 0

_MAPIMP long int _MAPAPI mapRedefineObject(HOBJ info);

 // Заполнить структуру описания семантической характеристики
 // по коду семантики
 // info    - идентификатор объекта карты в памяти
 // code    - внешний код семантики
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSemanticDescribeEx(HOBJ info, RSCSEMANTICEX * semtype,
											   long int code);

 // Запросить количество записей в классификаторе
 // семантики по коду семантики
 // info    - идентификатор объекта карты в памяти
 // code - код семантики (семантика типа "TCODE")
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSemanticClassificatorCount(HOBJ info, long int code);

 // Запросить название значения характеристики из
 // классификатора семантики по коду и
 // последовательному номеру в классификаторе
 // info    - идентификатор объекта карты в памяти
 // number - последовательный номер в классификаторе(1,2,3...)
 // code - код семантики
 // name - адрес буфера для результата запроса
 // size - размер буфера
 // При ошибке возвращает адрес пустой строки,
 // при успешном выполнении - адрес строки

_MAPIMP const char * _MAPAPI mapSemanticClassificatorName(HOBJ info,long int code,
														  long int number);
_MAPIMP long int _MAPAPI mapSemanticClassificatorNameEx(HOBJ info,long int code,
														long int number,
														char * name,long int size);

 // Запросить код значения характеристики из
 // классификатора семантики по коду и
 // последовательному номеру в классификаторе
 // info   - идентификатор объекта карты в памяти
 // number - последовательный номер в классификаторе(1,2,3...)
 // code   - внешний код семантики
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSemanticClassificatorCode(HOBJ info,
													  long int code,
													  long int number);


 // ***********************************************************************
 //      РЕДАКТИРОВАНИЕ СЕМАНТИКИ (АТРИБУТОВ) ОБ'ЕКТА -                   *
 //  Создание символьной строки по форматированной строке                 *
 //      с учетом значений семантики объекта                              *
 // формат строки: после %# идет номер семантики, за ним в []- значение,  *
 // которое будет вставлено в строку при отсутствии указанной семантики   *
 // остальной текст в произвольной форме.                                 *
 // Пример:входная строка - "дом N %#45[нет] сост. %#3[не заполнено]"     *
 //     результат по значениям семантики для конкретного объекта          *
 //     "дом N 5 сост. не заполнено" или "дом N 7-a сост. ЖИЛОЙ"          *
 //      или  "дом N нет сост. не заполнено"                              *
 // ***********************************************************************

 // Разбор форматированной  строки на части
 // value - входная строка,
 // размеры строки не более 256.
 // Нет символов форматирования или ошибки - возвращает 0,
 // иначе идентификатор формулы в памяти (HFORMULA)
 // Для каждого полученного и больше не используемого
 // идентификатора HFORMULA необходим вызов функции mapFreeFormula()
 // 19/01/07

_MAPIMP long int _MAPAPI mapTakeStringToPieces(const char * value);

 // Собрать символьную строку по идентификаторe HFORMULA
 // с учетом семантик объекта
 // info - идентификатор объекта карты в памяти
 // string - строка для записи результата
 // size   - размер строки
 // При ошибке возвращает 0
 // 19/01/07

_MAPIMP long int _MAPAPI mapBuildFormulaString(HFORMULA formula, HOBJ info,
										char * string,long int size);

 // Освободить  идентификатор HFORMULA
_MAPIMP void _MAPAPI mapFreeFormula(HFORMULA formula);

 // ************************************************************
 //                                                            *
 //         ЗАПРОС МЕТРИКИ (КООРДИНАТ) ОБ'ЕКТА                 *
 //                                                            *
 // ************************************************************

 // Запросить замкнутость объекта/подобъекта
 // info   - идентификатор объекта карты в памяти
 // number - номер подобъекта (для объекта - равен нулю)
 // Возвращает:  0 - не замкнут, не 0 - замкнут

_MAPIMP long int _MAPAPI mapGetExclusiveSubject(HOBJ info, long int number);

 // Запрос габаритов объекта (в метрах)
 // info   - идентификатор объекта карты в памяти
 // dframe - габариты метрики объекта в метрах
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapObjectFrame(HOBJ info,MAPDFRAME * dframe);

 // Запрос/Пересчет габаритов изображения знака объекта (в метрах)
 // info   - идентификатор объекта карты в памяти
 // dframe - габариты изображения объекта в метрах
 // force  - признак принудительного пересчета габаритов (необходимо установить,
 //          если объект редактировался, но не записан на карту)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapObjectViewFrameEx(HOBJ info, MAPDFRAME * dframe,
											  long int force);
_MAPIMP long int _MAPAPI mapObjectViewFrame(HOBJ info, MAPDFRAME * dframe);

 // Запрос числа точек метрики объекта/подобъекта
 // info    - идентификатор объекта карты в памяти
 // subject - номер подобъекта (если = 0, обрабатывается объект)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapPointCount(HOBJ info,long int subject);

 // Запрос числа составных частей (подобъектов + 1)
 // info    - идентификатор объекта карты в памяти
 // Если подобъектов нет - возвращает 1 (только объект)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapPolyCount(HOBJ info);

 // Запрос координаты точки объекта в прямоугольной системе
 // в метрах на местности
 // info    - идентификатор объекта карты в памяти
 // number - номер точки (начинается с 1)
 // subject - номер подобъекта (если = 0, обрабатывается объект)
 // При ошибке возвращает ноль

_MAPIMP double _MAPAPI mapXPlane(HOBJ info,
#ifdef __cplusplus
									long int number  = 1,
									long int subject = 0);
#else
									long int number,
									long int subject);
#endif

_MAPIMP double _MAPAPI mapYPlane(HOBJ info,
#ifdef __cplusplus
								 long int number  = 1,
								 long int subject = 0);
#else
								 long int number,
								 long int subject);
#endif

_MAPIMP double _MAPAPI mapHPlane(HOBJ info,
#ifdef __cplusplus
								 long int number  = 1,
								 long int subject = 0);
#else
								 long int number,
								 long int subject);
#endif

 // Запрос - имеет ли объект 3-ехмерную метрику
 // info    - идентификатор объекта карты в памяти
 // Если да, возвращает ненулевое значение

_MAPIMP long int _MAPAPI mapIsObject3D(HOBJ info);

  // Запросить тип высоты в третьей координате
  // Реально высота может быть и не задана
  // (0 - абсолютная, иначе - относительная)

_MAPIMP long int _MAPAPI mapGetHeightType(HOBJ info);   // 27/01/06

  // Установить тип высоты в третьей координате
  // Значение высоты может быть установлено позднее
  // (0 - абсолютная, иначе - относительная)
  // Объекты с относительной высотой не влияют на построение матрицы высот
  // Например - трубопроводы наземные и подземные

_MAPIMP long int _MAPAPI mapSetHeightType(HOBJ info, long int type);    // 27/01/06


 // ************************************************************
 //                                                            *
 //      РЕДАКТИРОВАНИЕ МЕТРИКИ (КООРДИНАТ) ОБ'ЕКТА            *
 //                                                            *
 // ************************************************************

 // Добавить в конец метрики объекта точку
 // info    - идентификатор объекта карты в памяти
 // x,y     - координаты точки в метрах
 // subject - номер подобъекта (если = 0, обрабатывается объект)
 // Значение координат задано в метрах на местности
 // Для изменения координаты Н необходимо далее
 // выполнить функцию SetHPlane(...)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapAppendPointPlane(HOBJ info,double x,double y,
#ifdef __cplusplus
								   long int subject = 0);
#else
								   long int subject/* = 0*/);
#endif

 // Удалить заданную точку метрики
 // info    - идентификатор объекта карты в памяти
 // number  - номер точки (с 1)
 // subject - номер подобъекта (если = 0, обрабатывается объект)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapDeletePointPlane(HOBJ info,long int number,
#ifdef __cplusplus
								   long int subject = 0);
#else
								   long int subject/* = 0*/);
#endif

 // Вставить в метрику объекта точку
 // info    - идентификатор объекта карты в памяти
 // x,y     - координаты точки в метрах
 // number  - номер точки за которой будет добавлена новая точка
 // subject - номер подобъекта (если = 0, обрабатывается объект)
 // Значение координат задано в метрах на местности
 // Для изменени координаты Н необходимо далее
 // выполнить функцию mapSetHPlane(...)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapInsertPointPlane(HOBJ info,double x,double y,long int number,
#ifdef __cplusplus
											 long int subject = 0);
#else
											 long int subject/* = 0*/);
#endif

 // Изменить координаты точки метрики
 // Значение координат задано в метрах на местности
 // info    - идентификатор объекта карты в памяти
 // x,y     - координаты точки в метрах
 // number  - номер точки (c 1)
 // subject - номер подобъекта (если = 0, обрабатывается объект)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapUpdatePointPlane(HOBJ info,double x,double y,long int number,
#ifdef __cplusplus
											 long int subject = 0);
#else
											 long int subject/* = 0*/);
#endif

 // Добавить в конец метрики объекта точку                           // 11/05/07
 // info    - идентификатор объекта карты в памяти
 // b,l     - координаты точки в радианах
 // subject - номер подобъекта (если = 0, обрабатывается объект)
 // Значение координат должно соответствовать системе координат,
 // проекции и эллипсоиду карты
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapAppendPointGeo(HOBJ info, double b, double l,
										   long int subject = 0);

 // Вставить в метрику объекта точку                                 // 11/05/07
 // info    - идентификатор объекта карты в памяти
 // b,l     - координаты точки в радианах
 // number - номер точки за которой будет добавлена новая точка
 // subject - номер подобъекта (если = 0, обрабатывается объект)
 // Значение координат должно соответствовать системе координат,
 // проекции и эллипсоиду карты
 // Для изменения координаты Н необходимо далее
 // выполнить функцию HPlane(...)
 // При ошибке возвращает ноль

 _MAPIMP long int _MAPAPI mapInsertPointGeo(HOBJ info, double b, double l,
											long int number, long int subject = 0);

 // Изменить координаты точки метрики                                // 11/05/07
 // info    - идентификатор объекта карты в памяти
 // b,l     - координаты точки в радианах
 // number  - номер обновляемой точки
 // subject - номер подобъекта (если = 0, обрабатывается объект)
 // Значение координат должно соответствовать системе координат,
 // проекции и эллипсоиду карты
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapUpdatePointGeo(HOBJ info, double b, double l,
										   long int number, long int subject = 0);

_MAPIMP long int _MAPAPI mapUpdatePointGeo3D(HOBJ info, double b, double l,
											 double h, long int number,
											 long int subject = 0);

#ifndef HIDEGDX     // 30/07/01
 // Изменить координаты общей точки метрики у данного объекта и
 // у всех объектов карты, имеющих такую точку
 // Изменение выполняется после вызова mapCommitObject()
 // или mapCommitWithPlace()
 // Значение координат задано в метрах на местности
 // info    - идентификатор объекта карты в памяти
 // x,y,h   - координаты точки в метрах
 // number  - номер точки (c 1)
 // subject - номер подобъекта (если = 0, обрабатывается объект)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapUpdatePointPlaneInMap(HOBJ info,double x,double y,
												  long int number,
#ifdef __cplusplus
												  long int subject = 0);
#else
												  long int subject/* = 0*/);
#endif

_MAPIMP long int _MAPAPI mapUpdatePointPlane3DInMap(HOBJ info,double x,double y,
													double h,
													long int number,
#ifdef __cplusplus
													long int subject = 0);
#else
													long int subject/* = 0*/);
#endif

 // Изменить координаты общей точки метрики у данного объекта и
 // у всех объектов общего слоя,  имеющих такую точку
 // Изменение выполняется после вызова mapCommitObject()
 // или mapCommitWithPlace()
 // Значение координат задано в метрах на местности
 // info    - идентификатор объекта карты в памяти
 // x,y,h   - координаты точки в метрах
 // number  - номер точки
 // subject - номер подобъекта (если = 0, обрабатывается объект)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapUpdatePointPlaneInLayer(HOBJ info,double x,double y,
													long int number,
#ifdef __cplusplus
													long int subject = 0);
#else
													long int subject/* = 0*/);
#endif

_MAPIMP long int _MAPAPI mapUpdatePointPlane3DInLayer(HOBJ info,double x,double y,
													  double h,
													  long int number,
#ifdef __cplusplus
													  long int subject = 0);
#else
													  long int subject/* = 0*/);
#endif

#endif // HIDEGDX
 // Редактирование координаты точки объекта/подобъекта
 // в прямоугольной системе в метрах на местности
 // info    - идентификатор объекта карты в памяти
 // x,y,h   - координаты точки в метрах
 // number  - номер точки (c 1)
 // subject - номер подобъекта (если = 0, обрабатывается объект)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetXPlane(HOBJ info,double x,long int number/* = 1*/,
#ifdef __cplusplus
									  long int subject = 0);
#else
									  long int subject/* = 0*/);
#endif

_MAPIMP long int _MAPAPI mapSetYPlane(HOBJ info,double y,long int number/* = 1*/,
#ifdef __cplusplus
									  long int subject = 0);
#else
									  long int subject/* = 0*/);
#endif

_MAPIMP long int _MAPAPI mapSetHPlane(HOBJ info,double h,long int number/* = 1*/,
#ifdef __cplusplus
									  long int subject = 0);
#else
									  long int subject/* = 0*/);
#endif

 // Создать дескриптор подобъекта в записи метрики
 // В конец записи добавляется дескриптор подобъекта
 // Выполняется контроль по длине записи и длине буфера
 // Число точек = 0, номер подобъекта = максимальный номер + 1
 // (как правило, записывается порядковый номер подобъекта)
 // info    - идентификатор объекта карты в памяти
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapCreateSubject(HOBJ info);

 // Удалить подобъект в записи метрики
 // info   - идентификатор объекта карты в памяти
 // number - номер удаляемого подобъекта (с 0),
 // если равен (-1), то удаляется вся метрика объекта !
 // Текущей становится первая точка объекта
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapDeleteSubject(HOBJ info,long int number);

 // Сместить все координаты метрики объекта на заданную
 // величину (delta) в метрах
 // info   - идентификатор объекта карты в памяти
 // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapRelocateObjectPlane(HOBJ info,
												DOUBLEPOINT * delta);

 // Сместить все координаты метрики объекта на заданную
 // величину (delta) в соответствии с параметром place
 // hmap  - идентификатор открытых данных
 // info  - идентификатор объекта карты в памяти
 // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapRelocateObject(HMAP hmap, HOBJ info,
										   DOUBLEPOINT * delta,
										   long int place/* = PP_MAP*/);

 // Изменить направление цифрования подобъекта
 // info  - идентификатор объекта карты в памяти
 // number - номер подобъекта (с 0),
 // При ошибке возвращает ноль, иначе - новое значение
 // (OD_RIGHT,OD_LEFT,... - см. Maptype.h)

_MAPIMP long int _MAPAPI mapChangeSubjectDirect(HOBJ info, long int number);  // 31/01/06

 // Изменить направление цифрования объекта
 // info  - идентификатор объекта карты в памяти
 // При ошибке возвращает ноль, иначе - новое значение
 // (OD_RIGHT,OD_LEFT,... - см. Maptype.h)

_MAPIMP long int _MAPAPI mapChangeObjectDirect(HOBJ info);

 // Переформировать объект (подобъект), установив первой заданную точку
 // number - номер точки
 // subject - номер подобъекта (если = 0, обрабатывается объект)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetFirstPoint(HOBJ info,
										  long int number, long int subject);     //31/01/05

 // Линейная фильтрация метрики
 // info  - идентификатор объекта карты в памяти
 // precision - точность в метрах
 // Удаляет: 1. двойные точки метрики;
 //          2. незамкнутые подобъекты < 2 точек;
 //          3. замкнутые подобъекты < 4 точек;
 //          4. точки метрики, лежащие в середине отрезка прямой
 //             на расстоянии precision от прямой.
 // Объект не удаляет никогда !!!
 // Возвращает общее число точек метрики
 // При ошибках возвращает:
 //    0 - ошибка структуры
 //   -1 - объект состоит из одной точки
 //   -2 - объект состоит из двух одинаковых точек
 //   -3 - число точек замкнутого контура объекта равно 3
 //  -10 - число точек метрики превышает длину записи метрики

_MAPIMP long int _MAPAPI mapLinearFilter(HOBJ info,
										 double precision/* = DELTANULL*/);

 // Фильтрация объекта с учетом топологических связей с соседними
 // объектами листа карты, которому принадлежит объект
 // (фильтруются и соседние объекты, имеющие общие точки;
 //  концевые общие точки не фильтруются)
 // hMap      - идентификатор открытых данных
 // info      - фильтруемый объект
 // precision - точность в метрах на местности
 //             (минимальное расстояние от точки до прямой,
 //              соединяющей предыдущую и следующую точки)
 // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapGeneralFilter(HMAP hMap, HOBJ hobj,
										   double precision/* = DELTANULL*/);

 // Фильтрация всех объектов одного листа карты с учетом
 // топологических связей с соседними объектами того же листа
 // той же карты (фильтруются и соседние объекты, имеющие общие точки;
 // концевые общие точки не фильтруются)
 // hMap      - идентификатор открытых данных
 // hSite     - идентификатор обрабатываемой карты
 // list      - номер листа
 // precision - точность в метрах на местности
 //             (минимальное расстояние от точки до прямой,
 //              соединяющей предыдущую и следующую точки)
 // hwnd      - идентификатор окна,которое будет извещаться
 //             (для отмены сообщений установить идентификатор в ноль)
 // Процесс посылает сообщение 0x590:
 // wparm : процент обработки,
 // lparm : количество обработанных объектов.
 //   общее количество = mapGetObjectCount(hMap, list)     - для основной карты
 //   общее количество = mapGetSiteObjectCount(hMap, hSit) - для пользовательской
 // Для завершения процесса вернуть число 0x590
 // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapGeneralFilterInMap(HMAP hMap, HSITE hSite,
											   long int list,
											   double precision/* = DELTANULL*/,
											   HWND hwnd);

 // Создание сплайна - сглаживание объекта и всех его подобъектов
 // Это сплайн, который проходит только
 // через первую и последнюю точки объекта(подобъекта) и как бы
 // сглаживает (спиливает) углы ломаной, соединяющей точки объекта
 // (метрику исходного объекта/подобъекта).
 // info  - исходная метрика объекта, по которому строится сплайн
 // cashion   - условный процент спиливания
 //             углов ломаной линии объекта (1<= cashion <= 50)
 //             (метрика исходного объекта/подобъекта).
 //             Чем больше cashion, тем больше спиливается угол
 // smooth    - плавность кривой сплайна
 //             (число точек между узлами объекта smooth >= 3).
 //             Чем больше smooth,тем глаже смотрится линия
 // precision - порог (точность) при фильтрации точек, для автоматического
 //             определения точности установить значение "-1".
 // Если исходный объект имел 3-ю координату (высоту),то у сплайна
 // также есть высота (интерполяция для новых точек).
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapCashionSpline(HOBJ info, long int cashion,
										  long int smooth,
										  double precision/* = -1*/);

 // Создание сплайна - сглаживание подобъекта
 // Это сплайн, который проходит только
 // через первую и последнюю точки подобъекта и как бы
 // сглаживает (спиливает) углы ломаной, соединяющей точки объекта
 // (метрику исходного подобъекта).
 // info  - исходная метрика объекта, по подобъекту которого строится сплайн
 // subject - номер обрабатываемого подобъекта (0,1,2...)
 // cashion   - условный процент спиливания
 //             углов ломаной линии объекта (1<= cashion <= 50)
 //             (метрика исходного подобъекта).
 //             Чем больше cashion, тем больше спиливается угол
 // smooth    - плавность кривой сплайна
 //             (число точек между узлами подобъекта smooth >= 3).
 //             Чем больше smooth,тем глаже смотрится линия
 // precision - порог (точность) при фильтрации точек, для автоматического
 //             определения точности установить значение "-1".
 // Если исходный подобъект имел 3-ю координату (высоту),то у сплайна
 // также есть высота

_MAPIMP long int _MAPAPI mapCashionSplineSubject(HOBJ info,int subject,
												 long int cashion,
												 long int smooth,
												 double precision/* = -1*/);

 // Создание сплайна - огибание объекта и всех его подобъектов
 // Это сплайн, который проходит через все точки исходного объекта
 // (метрика исходного объекта) и огибает его. Исходный объект
 // как бы вписан в сплайн.
 // info  - исходная метрика объекта, по которому строится сплайн
 // press     - максимальная амплитуда
 //             отхода кривой сплайна от отрезка
 //             в процентах от длины отрезка ( >= 5 ).
 //             Чем больше press, тем более сплайн может
 //             удаляться от отрезка ломаной (метрики исходного
 //             объекта/подобъекта).
 // smooth    - плавность кривой сплайна
 //             (число точек между узлами объекта smooth >= 3).
 //             Чем больше smooth,тем глаже смотрится линия
 // precision - порог (точность) при фильтрации точек, для автоматического
 //             определения точности установить значение "-1".
 // Если исходный объект имел 3-ю координату (высоту),то у сплайна
 // также есть высота (интерполяция для новых точек).
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapBendSpline(HOBJ info, long int press,
									   long int smooth,
									   double precision/* = -1*/);

 // Создание сплайна - огибание подобъекта
 // Это сплайн, который проходит
 // через все точки исходного подобъекта и огибает его.
 // Исходный объект как бы вписан в сплайн.
 // info  - исходная метрика объекта, по которому строится сплайн
 // subject - номер обрабатываемого подобъекта (0,1,2...)
 // press     - максимальная амплитуда
 //             отхода кривой сплайна от отрезка
 //             в процентах от длины отрезка ( >= 5 ).
 //             Чем больше press, тем более сплайн может
 //             удаляться от отрезка ломаной (метрики исходного
 //             объекта/подобъекта).
 // smooth    - плавность кривой сплайна
 //             (число точек между узлами объекта smooth >= 3).
 //             Чем больше smooth,тем глаже смотрится линия
 // precision - порог (точность) при фильтрации точек
 // Если исходный подобъект имел 3-ю координату (высоту),то у сплайна
 // также есть высота

_MAPIMP long int _MAPAPI mapBendSplineSubject(HOBJ info,int subject,
											  long int press,
											  long int smooth,
											  double precision/* = -1*/);

 // Одномерный сглаживающий сплайн
 // points - массив точек (одна из координат)
 // count  - количество точек
 // smooth - уровень сглаживания (0..1; 0 - прямая линия, 1 - кубический сплайн)
 // При ошибке возвращает ноль
_MAPIMP long int _MAPAPI mapSmoothingSpline1(double *points, int count, double smooth);   // 04/09/07

 // Двухмерный сглаживающий сплайн
 // points - массив точек (x, y)
 // count  - количество точек
 // smooth - уровень сглаживания (0..1; 0 - прямая линия, 1 - кубический сплайн)
 // При ошибке возвращает ноль
_MAPIMP long int _MAPAPI mapSmoothingSpline2(DOUBLEPOINT *points, int count, double smooth);    // 04/09/07

 // Трёхмерный сглаживающий сплайн
 // points - массив точек (x, y, h)
 // count  - количество точек
 // smooth - уровень сглаживания (0..1; 0 - прямая линия, 1 - кубический сплайн)
 // При ошибке возвращает ноль
_MAPIMP long int _MAPAPI mapSmoothingSpline3(XYHDOUBLE *points, int count, double smooth);      // 04/09/07

 // Cглаживающий сплайн (2-х или 3-х мерный в зависимости от наличия высоты)
 // info    - сглаживаемый объект
 // subject - сглаживаемый подобъект
 // smooth  - уровень сглаживания (0..1; 0 - прямая линия, 1 - кубический сплайн)
 // При ошибке возвращает ноль
_MAPIMP long int _MAPAPI mapSmoothingSplineSubject(HOBJ info, long int subject, double smooth);  // 04/09/07

 // Cглаживающий сплайн (2-х или 3-х мерный в зависимости от наличия высоты)
 // info   - сглаживаемый объект
 // smooth - уровень сглаживания (0..1; 0 - прямая линия, 1 - кубический сплайн)
 // При ошибке возвращает ноль
_MAPIMP long int _MAPAPI mapSmoothingSplineObject(HOBJ info, double smooth);              // 04/09/07

 // Построить дугу заданного радиуса с центром
 // в точке point2 (в метрах на местности)
 // точки point1 и point3 задаются для определения
 // направлений (в метрах на местности)
 // hmap   - идентификатор открытых данных
 // info   - идентификатор объекта карты в памяти
 // radius - в метрах на местности
 // метрика строится в info
 // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapCreateArc(HMAP hmap,HOBJ info,DOUBLEPOINT * point1,
									  DOUBLEPOINT * point2,DOUBLEPOINT * point3,
									  double radius);

// Построение зоны вокруг объекта / подобъекта
// radius - радиус создаваемой зоны (в метрах на местности)
// info - идентификатор копии объекта, по метрике которого строится зона.          // 04/02/09
// В этот объект будет записана метрика построенной зоны, которую
// можно будет сохранить как новый площадной объект
// subject - номер подобъекта, вокруг которого строим зону
// (0 - если строим вокруг главного объекта)
// form - форма края зоны
// для незамкнутых объектов
// = 0 - край углом
// = 1 - прямоугольный край
// для замкнутых объектов                // 01/02/07
// = 0 - "срезанные" углы
// = 1 - прямые углы
// При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapZoneObject(double radius,
									   HOBJ info, long int subject/* = 0*/,
									   long int form/* = 0*/);

 // Построение половины зоны вокруг объекта / подобъекта
 // (справа от объекта по направлению цифрования)
 // radius    - радиус создаваемой зоны (в метрах на местности)
 // info - метрика объекта, по которому строится зона
 // subject - номер подобъекта, вокруг которого строим зону
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapHalfZoneObject(double radius,
										   HOBJ info, long int subject/* = 0*/);

 // Построение зоны снаружи/внутри объекта/подобъекта
 // для объектов с количеством точек больше 1
 // (по направлению цифрования, количество точек исходной метрики сохраняется,
 //  проверка на петли отсутствует)
 // radius    - радиус создаваемой зоны
 //    отрицательное значение - внутри объекта
 //    положительное значение - снаружи объекта
 // info      - метрика объекта; зона строится вокруг
 // subject   - номер подобъекта, вокруг которого строим зону
 // При ошибке возвращает ноль                                      // 07/03/06

_MAPIMP long int _MAPAPI mapInsideZoneObject(double radius,
											 HOBJ info, long int subject);

// Построение зоны вокруг линейного незамкнутого объекта вида "змейка"
// radius    - радиус создаваемой зоны (в метрах на местности)
// info - метрика объекта, по которому строится зона
// Исходный объект делится на части, вокруг каждой части строится зона
// Отдельные зоны объединяются в одну
// В info записывается площадной объект - зона
// При ошибке возвращает ноль
// 16/07/07

_MAPIMP long int _MAPAPI mapZoneLineObject(HMAP hmap,HOBJ info,double radius);

 // Замкнуть  метрику объект и все его подобъекты для
 // площадного или линейного объекта
 // info  - идентификатор объекта карты в памяти
 // delta - порог замыкания в мм на карте
 // если расстояние между первой и последней точкой меньше delta, то
 // вместо последней точки пишем первую
 // если расстояние между первой и последней точкой больше delta, то
 // после последней точки добавляем первую
 // возврат - 1 - нормальное завершение
 // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapAbrige(HOBJ info,double delta/* = 0.2*/);     //01/03/01


 // Построение ортодромии
 // first - координаты первой точки в радианах
 // second - координаты второй точки в радианах
 // array - адрес массива координат построенной ортодромии,
 //         размер массива равен count
 // count - количество точек для построения ортодромии
 // При ошибке возвращает ноль                            // 10/03/04

_MAPIMP long int _MAPAPI mapOrthodrome(DOUBLEPOINT * first,DOUBLEPOINT * second,
									   DOUBLEPOINT * array,long int count);

 // Построение локсодромии
 // first - координаты первой точки в радианах
 // second - координаты второй точки в радианах
 // array - адрес массива координат построенной локсодромии,
 //         размер массива равен count
 // count - количество точек для построения локсодромии
 // При ошибке возвращает ноль
 // 10/03/04

_MAPIMP long int _MAPAPI mapLoxodrome(DOUBLEPOINT * first,DOUBLEPOINT * second,
									  DOUBLEPOINT * array,long int count);

 // Построение зоны видимости по матрице высот в виде растрового изображения
 // hmap - идентификатор открытой векторной карты
 // namerst - полное имя растра
 // zonevisibility - параметры построения зоны (см.maptype.h)
 // Построение производится при наличии открытой матрицы высот
 // Результат записывается в файл namerst
 // Возвращает номер растра в цепочке
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapVisibilityZone(HMAP hMap, char * namerst,
										   TBUILDZONEVISIBILITY *zonevisibility);

 // Определение видимости из точки point1 (координаты в метрах на местности) точку point2
 // deltaheight  - высота наблюдения (в метрах),
 // добавляется к высоте в точке point1
 // Вычисление производится при наличии открытой матрицы высот
 // Возвращает 0 - point2 не видна из point1                     // 12/04/06
 //            1 - point2 видна из point1

_MAPIMP long int _MAPAPI mapVisibilityFromPoint(HMAP hmap,DOUBLEPOINT * point1,
												DOUBLEPOINT * point2,double deltaheight);

 // Удалить петли у объекта
 // При ошибке возвращает ноль    // 08/02/06

_MAPIMP long int _MAPAPI mapDeleteLoop(HOBJ info,double precision);

 // Повернуть объект вокруг заданной в прямоугольной системе точки   // 15/01/07
 // на заданный угол
 // info   - идентификатор объекта карты в памяти
 // center - координаты точки, вокруг которой поворачивается объект (метры)
 // angle  - угол поворота по часовой стрелке (радианы, от -PI до +PI)
 // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapRotateObject(HOBJ info, DOUBLEPOINT * center, double * angle);

 // ************************************************************
 //                                                            *
 //      РЕДАКТИРОВАНИЕ ТЕКСТА ПОДПИСИ                         *
 //                                                            *
 // ************************************************************

  // Запросить содержание текстовой строки
  // info    - идентификатор объекта карты в памяти
  // text    - адрес для размещения строки (ANSI)
  // size    - длина выделенной области под строку
  // subject - номер подобъекта
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetText(HOBJ info, char * text, long int size,
									long int subject);


  // Запросить содержание текстовой строки в UNICODE
  // info    - идентификатор объекта карты в памяти
  // text    - адрес для размещения строки
  // size    - длина выделенной области под строку
  // subject - номер подобъекта
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetTextUn(HOBJ info, WCHAR * text, long int size,
									  long int subject);

  // Установить новое содержание текстовой строки
  // info   - идентификатор объекта карты в памяти
  // text   - адрес новой строки (ANSI)
  // subject - номер подобъекта
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapPutText(HOBJ info,const char * text,long int subject);

  // Установить новое содержание текстовой строки
  // info   - идентификатор объекта карты в памяти
  // text   - адрес новой строки UNICODE (запишется, как ANSI !)
  // subject - номер подобъекта
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapPutTextUn(HOBJ info, const WCHAR * text,long int subject);

  // Установить новое содержание текстовой строки
  // info   - идентификатор объекта карты в памяти
  // text   - адрес новой строки UNICODE (сохранится в UNICODE)
  // subject - номер подобъекта
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapPutTextUnicode(HOBJ info, const WCHAR * text,long int subject);

  // Запросить - хранится ли текст в кодировке UNICODE
  // info   - идентификатор объекта карты в памяти
  // Если текст в UNICODE - возвращает ненулевое значение
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapIsTextUnicode(HOBJ info);

  // Запросить длину текста в микронах на карте
  // info    - идентификатор объекта карты в памяти
  // subject - номер подобъекта
  // При масштабируемой подписи возвращает 0
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapGetTextLengthMkm(HOBJ info,long int subject);

  // Запросить способ выравнивания текста по горизонтали
  // info    - идентификатор объекта карты в памяти
  // subject - номер подобъекта
  // (FA_LEFT,FA_RIGHT,FA_CENTER - см. mapgdi.h)

_MAPIMP long int _MAPAPI mapGetTextHorizontalAlign(HOBJ info,long int subject);

  // Запросить способ выравнивания текста по вертикали
  // info    - идентификатор объекта карты в памяти
  // subject - номер подобъекта
  // (FA_BOTTOM,FA_TOP,FA_BASELINE,FA_MIDDLE)

_MAPIMP long int _MAPAPI mapGetTextVerticalAlign(HOBJ info,long int subject);

  // Установить способ выравнивания текста по горизонтали
  // (FA_LEFT,FA_RIGHT,FA_CENTER)
  // info    - идентификатор объекта карты в памяти
  // subject - номер подобъекта (-1 - установить всем)
  // По умолчанию имеет значение FA_LEFT
  // При успешном выполнении возвращает установленное значение

_MAPIMP long int _MAPAPI mapPutTextHorizontalAlign(HOBJ info,long int align,
												   long int subject);

  // Установить способ выравнивания текста по вертикали
  // (FA_BOTTOM,FA_TOP,FA_BASELINE,FA_MIDDLE)
  // info    - идентификатор объекта карты в памяти
  // subject - номер подобъекта (-1 - установить всем)
  // По умолчанию имеет значение FA_BASELINE
  // При успешном выполнении возвращает установленное значение

_MAPIMP long int _MAPAPI mapPutTextVerticalAlign(HOBJ info,long int align,
												 long int subject);

 // ************************************************************
 //                                                            *
 //     РЕДАКТИРОВАНИЕ ГРАФИЧЕСКОГО ОПИСАНИЯ ОБ'ЕКТА           *
 //                                                            *
 //  (Графическое описание имеется, как правило, у объектов    *
 //   пользовательской карты, не связанных с классификатором)  *
 //                                                            *
 // ************************************************************


  // Запросить - имеет ли объект графическое описание
  // info    - идентификатор объекта карты в памяти

_MAPIMP long int _MAPAPI mapIsDrawObject(HOBJ info);

  // Запросить количество элементов графического описания
  // info    - идентификатор объекта карты в памяти
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapDrawCount(HOBJ info);

  // Запросить вид элемента графического описания
  // по его номеру (number -  от 1 до DrawCount())
  // info    - идентификатор объекта карты в памяти
  // Возвращает номер функции типа IMG_XXXXXXX (см. MAPGDI.H)
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapDrawImage(HOBJ info, int number);

  // Запросить адрес параметров элемента графического описания
  // по его номеру (number -  от 1 до DrawCount())
  // info    - идентификатор объекта карты в памяти
  // Возвращает адрес структуры типа IMGXXXXXX, в соответствии
  // с видом элемента (см. MAPGDI.H)
  // Для запроса с 0 номером возвращает адрес параметров
  // графического описания объекта структуры IMGDRAW
  // При ошибке возвращает 0

_MAPIMP const char * _MAPAPI mapDrawParameters(HOBJ info, int number);

  // Запросить длину параметров элемента графического описания
  // по его номеру ( от 1 до DrawCount())
  // info    - идентификатор объекта карты в памяти
  // Для запроса с 0 номером возвращает длину параметров
  // графического описания объекта
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapDrawLength(HOBJ info, int number);

  // Добавить элемент графического описания объектов
  // info  - идентификатор объекта карты в памяти
  // image - номер функции типа IMG_XXXXXXX (см. MAPGDI.H)
  // parm  - адрес структуры типа IMGXXXXXX
  // При ошибке возвращает ноль,иначе - число элементов в записи

_MAPIMP long int _MAPAPI mapAppendDraw(HOBJ info, int image,const char * parm);

  // Удалить все элементы графического описания объекта
  // info  - идентификатор объекта карты в памяти

_MAPIMP long int _MAPAPI mapClearDraw(HOBJ info);

  // Удалить элемент графического описания объекта
  // info   - идентификатор объекта карты в памяти
  // number - номер элемента (начиная с 1)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapDeleteDraw(HOBJ info, int number);


 // ************************************************************
 //                                                            *
 //         СОХРАНИТЬ/ВОССТАНОВИТЬ ДАННЫЕ ОБ'ЕКТА              *
 //                                                            *
 // ************************************************************

 // Сохранить данные об объекте в файле
 // info  - идентификатор объекта карты в памяти
 // Номер листа в районе должен быть установлен
 // Предыдущее состояние объекта сохраняется в резервных
 // файлах и может быть восстановлено
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapCommit(HOBJ info);
_MAPIMP long int _MAPAPI mapCommitObject(HOBJ info);

 // Сохранить данные об объекте в файле
 // info  - идентификатор объекта карты в памяти
 // Объекты будут отображаться в порядке записи в файл
 // Применяется для специальной сортировки объектов
 // (например, линейный может быть под площадным)
 // Предыдущее состояние объекта сохраняется в резервных
 // файлах и может быть восстановлено
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapCommitObjectByOrder(HOBJ info);

 // Сохранить данные об объекте в файле
 // info  - идентификатор объекта карты в памяти
 // Если объект новый - выполняется функция mapCommitObject(),
 // если такой объект уже был, то сохраняется копия
 // объекта с новым уникальным номером (предполагается,
 // что предварительно изменены координаты и т.п.)
 // Номер листа в районе должен быть установлен
 // Позволяет ускорить создание серии однотипных объектов
 // (другой способ - mapCopyObjectAsNew()).
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapCommitObjectAsNew(HOBJ info);

 // Сохранить данные об объекте в файле с выбором листа
 // или делением объекта по листам (при необходимости)
 // info  - идентификатор объекта карты в памяти
 // Для объектов пользовательских карт (обстановки)
 // достаточно mapCommitObject() - там один лист и нет границ.
 // Предыдущее состояние объекта сохраняется в резервных
 // файлах и может быть восстановлено
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapCommitWithPlace(HOBJ info);

 // Сохранить данные об объекте в файле с выбором листа
 // или делением объекта по листам (при необходимости)
 // Объект будет сохранен, как новый, с присвоением
 // нового уникального номера
 // info  - идентификатор объекта карты в памяти
 // Для объектов пользовательских карт (обстановки)
 // достаточно mapCommitObject() - там один лист и нет границ.
 // Предыдущее состояние объекта сохраняется в резервных
 // файлах и может быть восстановлено
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapCommitWithPlaceAsNew(HOBJ info);

 // Сохранить данные об объекте в файле с
 // обрезанием объекта по границам заданного листа
 // info  - идентификатор объекта карты в памяти
 // list - номер листа( > 0 ), по рамке которого скорректировать
 // метрические данные объекта
 // Для объектов пользовательских карт (обстановки)
 // достаточно mapCommitObject() - там один лист и нет границ.
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapCommitWithPlaceForList(HOBJ info, long int list);

 // Удалить объект карты
 // Предыдущее состояние объекта сохраняется в резервных
 // файлах и может быть восстановлено
 // info  - идентификатор объекта карты в памяти
 // Признак удаления записывается в памяти и в файле
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapDeleteObject(HOBJ info);

 // Удалить объект карты по его номеру (number)
 // hMap   - идентификатор открытых данных
 // list   - последовательный номер листа (с 1)
 // number - последовательный ноиер объекта в листе
 // Связь с номером - см. mapReadObjectByNumber,mapGetObjectNumber
 // После удаления объекта по номеру вызов Сommit не должен выполняться
 // для этого объекта
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapDeleteObjectByNumber(HMAP hMap,
												 long int list, long int number);

 // Отменить удаление объекта карты
 // info  - идентификатор объекта карты в памяти
 // Признак удаления убирается в памяти и в файле
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapUndeleteObject(HOBJ info);

 // Отменить удаление объекта карты по его номеру (number)
 // hmap   - идентификатор открытых данных
 // hSite  - идентификатор пользовательской карты
 //          (для фоовой карты равен hMap или 0)
 // list   - последовательный номер листа (с 1)
 // number - последовательный ноиер объекта в листе
 // Связь с номером - см. mapReadObjectByNumber,mapGetObjectNumber
 // Признак удаления убирается в файле
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapUndeleteObjectByNumber(HMAP hMap, HSITE hSite,
												   long int list, long int number);

 // Восстановить (в памяти) данные об объекте из файла
 // info  - идентификатор объекта карты в памяти
 // Номер листа в районе и номер объекта должны быть установлены
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapRevert(HOBJ info);
_MAPIMP long int _MAPAPI mapRevertObject(HOBJ info);

 // *************************************************************
 //                                                             *
 //     ОБРАБОТКА РЕЗЕРВНЫХ ФАЙЛОВ ...\LOG\... ^DA,^SE,^HD      *
 //      (СОДЕРЖАТ КОПИИ ВСЕХ ОБНОВЛЯЕМЫХ ОБ ЕКТОВ ЛИСТА)       *
 //                                                             *
 // *************************************************************

  // Последовательный перебор отредактированных копий объекта info
  // info  - идентификатор объекта карты в памяти
  // copynumber - последовательный номер копии данного объекта (1, 2, ...)
  // в порядке от последней операции редактирования к предыдущей
  // Вызывается с последовательным увеличением copynumber,
  // пока не будет найдена нужная копия или копии закончатся
  // Чтобы сделать найденную копию текущим состоянием объекта на карте,
  // нужно удалить лишние копии объекта функцией
  // mapDeleteObjectCopyToNumber, а затем вызвать функцию mapCommit.
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapReadObjectCopyByNumber(HOBJ info,
												   long int copynumber);

  // Удалить отредактированные копии объекта info
  // info  - идентификатор объекта карты в памяти
  // Удаляет копии объекта от первой до copynumber из файлов отката
  // Копия copynumber+1 становится первой
  // Если вызывается после сохранения соответсвующей копии объекта
  // на карте (mapCommit - отмена выполненных операций редактирования),
  // то число удаляемых копий должно быть на 1 больше, чем номер
  // восстанавливаемой копии. (т.к. mapCommit создает еще одну копию
  // объекта и она становиться первой).
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapDeleteObjectCopyToNumber(HOBJ info,
													 long int copynumber);


 // ************************************************************
 //                                                            *
 //         РАСЧЕТ ХАРАКТЕРИСТИК ОБ'ЕКТА                       *
 //                                                            *
 // ************************************************************

 // Вычисление длины участка объекта (стороны)
 // Для последней точки вычислет расстоние до первой точки
 // У замкнутых объектов первая и последняя точки совпадают
 // info  - идентификатор объекта карты в памяти
 // number - номер точки, начина с 1
 // subject - номер подобъекта (если = 0, обрабатывается объект)
 // При ошибке возвращает 0 (при совпадении точек также)

_MAPIMP double _MAPAPI mapSideLength(HOBJ info,long int number,
									 long int subject/* = 0*/);

 // Вычисление азимута участка объекта (стороны)
 // Возвращает величину угла в радианах
 // Если геодезия не поддерживается, то вычисляется дирекционный угол
 // Для последней точки вычисляет направление на первую точку
 // У замкнутых объектов первая и последняя точки совпадают
 // info  - идентификатор объекта карты в памяти
 // number - номер точки, начиная с 1
 // subject - номер подобъекта (если = 0, обрабатывается объект)
 // При ошибке возвращает 0 (при совпадении точек также)

_MAPIMP double _MAPAPI mapSideAzimuth(HOBJ info,long int number,      //16/01/01
									  long int subject);

 // Вычисление дирекционного угла участка объекта (стороны)
 // Возвращает величину угла в радианах
 // Для последней точки вычислет направление на первую точку
 // У замкнутых объектов перва и последн точки совпадают
 // info  - идентификатор объекта карты в памяти
 // number - номер точки, начиная с 1
 // subject - номер подобъекта (если = 0, обрабатывается объект)
 // При ошибке возвращает 0 (при совпадении точек также)

_MAPIMP double _MAPAPI mapSideDirection(HOBJ info,long int number,
										long int subject/* = 0*/);

 // Вычисление площади объекта
 // Для вычисления площади объекта его координаты пересчитываюся
 // в проекцию топографической карты ближайшей зоны!
 // info  - идентификатор объекта карты в памяти
 // При ошибке возвращает 0

_MAPIMP double _MAPAPI mapSquare(HOBJ info);

 // Вычисление площади объекта c учетом рельефа
 // При отсутствии рельефа(матрицы высот,слоев,Tin-матрицы) возвращает площадь объекта
 // При ошибке возвращает 0

_MAPIMP double _MAPAPI mapSquareWithHeight(HMAP hmap, HOBJ info);   //26/05/05

 // Вычисление периметра объекта
 // info  - идентификатор объекта карты в памяти
 // При ошибке возвращает 0

_MAPIMP double _MAPAPI mapPerimeter(HOBJ info);

 // Вычисление длины объекта
 // Для вычисления длины объекта его координаты пересчитываюся
 // в проекцию топографической карты ближайшей зоны!
 // info  - идентификатор объекта карты в памяти
 // Для подобъектов считается суммарная длина
 // При ошибке возвращает 0

_MAPIMP double _MAPAPI mapLength(HOBJ info);

 // Вычисление длины объекта по карте
 // Координаты объекта не пересчитываются, полученная длина
 // может значительно отличаться от реальной длины объекта на местности
 // info  - идентификатор объекта карты в памяти
 // Для подобъектов считается суммарная длина
 // При ошибке возвращает 0

_MAPIMP double _MAPAPI mapLengthInMap(HOBJ info);

 // Вычисление длины объекта от начала до заданной точки
 // info  - идентификатор объекта карты в памяти
 // point - координаты точки, расположенной вдоль(вблизи) объекта
 // Если точка не на объекте - ищется ближайшая точка на контуре
 // Координаты точки обновляются!
 // При ошибке возвращает 0

_MAPIMP double _MAPAPI mapLengthToPoint(HOBJ info, DOUBLEPOINT * point);

 // Вычисление длины подобъекта/объекта
 // subject - номер подобъекта (если = 0, обрабатывается объект)
 // При ошибке возвращает 0

_MAPIMP double _MAPAPI mapSubjectLength(HOBJ info, long int subject);      //20/01/05

 // Вычисление длины отрезка подобъекта/объекта
 // subject - номер подобъекта (если = 0, обрабатывается объект)
 // point1, point2 - границы отрезка (производится поиск ближайших точек объекта)
 // При ошибке возвращает 0

_MAPIMP double _MAPAPI mapSubjectCutLength(HOBJ info, long int subject,
										   const DOUBLEPOINT& point1,
					   const DOUBLEPOINT& point2);

 // Вычисление длины объекта c учетом рельефа
 // При отсутствии рельефа(матрицы высот,слоев,Tin-матрицы) возвращает длину объекта
 // При ошибке возвращает 0

_MAPIMP double _MAPAPI mapLengthWithHeight(HMAP hmap, HOBJ info);

 // Определение замкнутости контура подобъекта
 // info  - идентификатор объекта карты в памяти
 // subject - номер текущего подобъекта (0 - объекта)
 // Возвращает: 1 - объект замкнут, иначе 0

_MAPIMP long int _MAPAPI mapCircuitousSubject(HOBJ info,long int subject/* = 0*/);

 // Определение кратчайшего расстояния от точки до объекта
 // hmap   - идентификатор открытых данных
 // info  - идентификатор объекта карты в памяти
 // subject - номер текущего подобъекта (0-объекта)
 // координаты точки point заданы в прямоугольной
 // системе координат , в метрах на местности
 // Возвращает вычисленное расстояние в метрах
 // или 0 в случае ошибки

_MAPIMP double _MAPAPI mapDistancePointSubject(HMAP hmap, HOBJ info,
											   int long subject,
											   DOUBLEPOINT * point);

 // Определение кратчайшего расстояния от точки до объекта (включая
 // подобъекты)
 // hmap   - идентификатор открытых данных
 // info  - идентификатор объекта карты в памяти
 // координаты точки point заданы в прямоугольной
 // системе координат , в метрах на местности
 // Возвращает вычисленное расстояние  в метрах
 // или 0 в случае ошибки

_MAPIMP double _MAPAPI mapDistancePointObject(HMAP hmap, HOBJ info,
											  DOUBLEPOINT * point);

 // Определение кратчайшего расстояния между объектами    //28/06/02
 // info1  - идентификатор 1-го объекта карты в памяти
 // info2  - идентификатор 2-го объекта карты в памяти
 // Возвращает вычисленное расстояние  в метрах
 // или 0 в случае ошибки

_MAPIMP double _MAPAPI mapDistanceObject(HOBJ info1, HOBJ info2);


 /*********************************************************
 *                                                        *
 *                МАТЕМАТИЧЕСКИЕ ФУНКЦИИ                  *
 *                                                        *
 *********************************************************/

 // Вычисление расстояния между двумя точками
 // point1, point2 - координаты точек в метрах

_MAPIMP double _MAPAPI mapDistance(DOUBLEPOINT * point1, DOUBLEPOINT * point2);

 // Вычисление расстояния между двумя точками в системе 42 года
 // hmap   - идентификатор открытых данных
 // point1, point2 - координаты точек в метрах на местности
 // Перед вычислением расстояния координаты пересчитываются
 // в систему 42 года, если проекция текущей карты искажает
 // расстояния

_MAPIMP double _MAPAPI mapRealDistance(HMAP hmap, DOUBLEPOINT * point1,
									   DOUBLEPOINT * point2);

 // Определение угла наклона биссектрисы угла, заданного
 // точками p1,p2,p3 с вершиной в точке p2
 // Определение угла наклона биссектрисы угла, заданного
 // точками p1,p2,p3 с вершиной в точке p2
 // Возвращаемый угол задан относительно оси X, его положительное
 // направление соответствует положительному направлению оси Y

_MAPIMP double _MAPAPI mapBisectorAngle(DOUBLEPOINT * p1, DOUBLEPOINT * p2,
										DOUBLEPOINT * p3);

 /*********************************************************
 *                                                        *
 *          ФУНКЦИИ ЗАПРОСА/УСТАНОВКИ ШРИФТОВ             *
 *                                                        *
 *********************************************************/

#ifdef WIN32API
  // Запросить/Установить шрифт карты
  // Функции определены для ОС Windows
  // technology - тип устройства (DT_RASDISPLAY, DT_PLOTTER)
  //              определяемый функцией GetDeviceCaps(...)
  // index      - номер шрифта (0-4)
  // fontname   - указатель на имя шрифта, размером 32 символа,
  //              включая конец строки 0x00

_MAPIMP char* _MAPAPI mapGetMapFont(long int technology, long int index = 0);
_MAPIMP char* _MAPAPI mapSetMapFont(long int technology, long int index, char* fontname);
_MAPIMP char* _MAPAPI GetMapFont(int technology, int index = 0);
_MAPIMP char* _MAPAPI SetMapFont(int technology, int index, char* fontname);

_MAPIMP long int _MAPAPI mapGetMapFontName(long int technology, long int index,
										   char * name, long int size);

_MAPIMP long int _MAPAPI mapSetMapFontName(long int technology, long int index,
										   char * name, long int size);

  // Запросить/Установить кодировку шрифта карты
  // technology - тип устройства (DT_RASDISPLAY, DT_PLOTTER)
  //              определяемый функцией GetDeviceCaps(...)
  // index      - номер шрифта (0-4)
  // code       - (RUSSIAN_CHARSET, DEFAULT_CHARSET, ANSI_CHARSET)

_MAPIMP long int _MAPAPI mapGetMapFontCharSet(long int technology, long int index);
_MAPIMP long int _MAPAPI mapSetMapFontCharSet(long int technology, long int index,
											  long int code);

  // Запросить номер шрифта (0-4)

_MAPIMP int _MAPAPI mapGetMapFontIndex(long int technology, char* fontname);
_MAPIMP int _MAPAPI GetMapFontIndex(long int technology, char* fontname);

  // Запросить/Установить шрифт строк диалогов

_MAPIMP char* _MAPAPI mapGetDialogStringFont();
_MAPIMP char* _MAPAPI mapSetDialogStringFont(char* fontname);
_MAPIMP char* _MAPAPI GetDialogStringFont();
_MAPIMP char* _MAPAPI SetDialogStringFont(char* fontname);

  // Запросить/Установить шрифт таблиц диалогов

_MAPIMP char* _MAPAPI mapGetDialogTableFont();
_MAPIMP char* _MAPAPI mapSetDialogTableFont(char* fontname);
_MAPIMP char* _MAPAPI GetDialogTableFont();
_MAPIMP char* _MAPAPI SetDialogTableFont(char* fontname);

  // Запросить/Установить размер шрифта строк и таблиц диалогов

_MAPIMP long int _MAPAPI mapGetDialogStringFontSize();

_MAPIMP long int _MAPAPI mapGetDialogTableFontSize();

_MAPIMP long int _MAPAPI mapSetDialogStringFontSize(long int size);

_MAPIMP long int _MAPAPI mapSetDialogTableFontSize(long int size);

  // Запросить/Установить кодовую страницу шрифта строк и таблиц диалогов   // 20/04/06
_MAPIMP long int _MAPAPI mapGetDialogStringFontCharSet();

_MAPIMP long int _MAPAPI mapGetDialogTableFontCharSet();

_MAPIMP long int _MAPAPI mapSetDialogStringFontCharSet(long int charset);

_MAPIMP long int _MAPAPI mapSetDialogTableFontCharSet(long int charset);

#endif  // WIN32API

 /*********************************************************
 *                                                        *
 *                 СЕРВИСНЫЕ ФУНКЦИИ                      *
 *                                                        *
 *********************************************************/

  // Определить тип файла по его имени
  // name - имя тестируемого файла (полный путь)
  // Анализируются первые 4 байта, содержащие идентификатор данных.
  // При ошибке возвращает ноль, иначе - идентификатор файла
  // (см. maptype.h : FILE_SXF, FILE_MAP, FILE_MTW,...)

_MAPIMP long int _MAPAPI mapCheckFile(const char * name);

  // Запросить текущее время в формате "HH':'mm':'ss"
  // buffer - адрес памяти для размещения результата запроса
  // size   - размер выделенной памяти для контроля
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetTheTime(char * buffer, long int size);

  // Загрузить библиотеку DLL
  // При поиске DLL проверяется и директория приложения
  //  void (WINAPI * myfunction)(int param);
  // (FARPROC)myfunction = mapLoadLibrary("ABC.DLL",&instance,"MyFunction");
  //  if (myfunction)
  //      { (*myfunction)(123); ::FreeLibrary(*instance); }
  // При ошибке возвращает ноль и выдает сообщение на экран

_MAPIMP FARPROC _MAPAPI mapLoadLibrary(const char * dllname,
									   HINSTANCE  * libinst,
									   const char * funcname);

  // Выгрузить библиотеку DLL

_MAPIMP long int _MAPAPI mapFreeLibrary(HINSTANCE  libinst);  // 01/02/02

  //  Загрузить функцию библиотеки DLL

_MAPIMP FARPROC _MAPAPI mapGetProcAddress(HINSTANCE libinst,
										  const char * funcname);  // 01/02/02

  // Копирование cодержимого открытых файлов
  // in     - имя входного файла
  // out    - имя выходного файла
  // mode   - флажки доступа к выходному файлу (GENERIC_READ, GENERIC_WRITE),
  //          ноль соответствует GENERIC_READ,
  // access - флажки открытия выходного файла (FILE_SHARE_READ,FILE_SHARE_WRITE)
  //          ноль соответствует FILE_SHARE_READ|FILE_SHARE_WRITE
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapCopyFile(const char * in, const char * out,
#ifdef __cplusplus
									 long int access = 0, long int mode = 0);
#else
									 long int access/* = 0*/, long int mode/* = 0*/);
#endif


  // Запросить длину файла                                  // 26/02/07
  // name - полный путь к файлу
  // При ошибке возвращает ноль

_MAPIMP double _MAPAPI mapGetFileLength(const char * name);

  // Разрешить/Запретить выдачу сообщений на экран
  // (серверный режим работы)
  // enable = 0  - запрет выдачи сообщений,
  // Возвращает предыдущее значение флага

_MAPIMP long int _MAPAPI mapMessageEnable(long int enable);
_MAPIMP long int _MAPAPI mapIsMessageEnable();

  // Выдать сообщение об ошибке (на экран)
  // code - код ошибки (см. MAPERR.RH)

_MAPIMP void _MAPAPI ErrorMessageEx(HWND hwnd,int code,const char * filename);
_MAPIMP void _MAPAPI mapErrorMessage(long int code,const char * filename);

  // Выдать сообщение в протокол карты
  // HMAP и HSITE определяют карту, в протокол которой
  // записывается сообщение
  // (для карты местности HSITE = HMAP, см. sitapi.h)
  // message - текст сообщения
  // type - тип сообщения (см. maptype.h : MT_INFO,MT_ERROR,...)

_MAPIMP void _MAPAPI mapMessageToLog(HMAP hMap,HSITE hSite,
									 const char * message,
									 long int type);

  // Выдать сообщение на экран

_MAPIMP long int _MAPAPI mapMessageBox(HWND hwnd, const TCHAR * message,
									   const TCHAR * title, long int flag);

  // Запросить версию модуля MapAccess.Dll
  // Если полученная версия не равна значению MAPACCESSVERSION
  // в работе программы может произойти сбой

_MAPIMP long int _MAPAPI GetMapAccessVersion();
_MAPIMP long int _MAPAPI mapGetMapAccessVersion();
_MAPIMP long int _MAPAPI mapGetMapApiVersion();

  // Установить/Запросить язык сообщений
  // 1 - английский, 2 - русский, ... (см. Maptype.h)
  // (по-умолчанию - английский)

_MAPIMP void _MAPAPI SetMapAccessLanguage(int code);
_MAPIMP int  _MAPAPI GetMapAccessLanguage();
_MAPIMP void _MAPAPI mapSetMapAccessLanguage(int code);
_MAPIMP int  _MAPAPI mapGetMapAccessLanguage();

  // Установить идентификатор окна для приема сообщений
  // от "затяжных" процессов (перекодировка при открытии
  // карты, нарезка объектов по заданной границе,...)
  // Код сообщения - 0x590,
  // wparm : -1 старт процесса,-2 завершение,0-100 процент выполнения
  // lparm : текст сообщения
  // Для отмены сообщений - установить идентификатор в ноль
  // (Идентификатор закрытого окна может привести к сбою в системе)
  // Для завершения процесса вернуть число 0x590
  // Возвращает предыдущее значение идентификатора

_MAPIMP HWND _MAPAPI mapSetHandleForMessage(HWND hwnd);
_MAPIMP HWND _MAPAPI mapGetHandleForMessage();

#ifdef WIN32API                                         // 16/07/04
  // Установить идентификатор окна для приема сообщений о событиях карты
  // hmap   - идентификатор открытых данных
  // hwnd   - идентификатор окна
  // event - флаг типов событий (1 - перерисовка карты)
  // Код сообщения WM_MAPEVENT (0x591)
  // wparm : идентификатор карты, в которой произошло событие (HMAP)
  // lparm : описание события
  // Для отмены сообщений - установить идентификатор в ноль
  // (Идентификатор закрытого окна может привести к сбою в системе)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetHandleForEvent(HMAP hmap, HWND hwnd, int event);

  // Запросить текущее значение идентификатора окна для приема сообщений

_MAPIMP HWND _MAPAPI mapGetHandleForEvent(HMAP hmap);
#endif

  // Сравнить две строки без учета регистра
  // Возвращает : (1-LESS,2-EQUAL,3-MORE - см. Maptype.h)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapCompareString(const char * string,
										  const char * filter);

  // Преобразовать дату из строки date в число ГГГГММДД
  // Строка может иметь вид ДД/ММ/ГГГГ или ДД.ММ.ГГГГ
  // или ГГГГММДД или ГГГГ/ММ/ДД
  // При ошибке возвращает ноль, иначе - значение даты

_MAPIMP long int _MAPAPI mapDateToLong(const char * date);

  // Преобразовать дату из из числа ГГГГММДД в строку
  // ДД/ММ/ГГГГ
  // number - числовое значение даты,
  // date   - адрес строки для результата
  // size   - размер строки для контроля
  // При ошибке возвращает ноль, иначе - адрес входной строки

_MAPIMP char * _MAPAPI mapLongToDate(long int number,
									 char * date, int size);

  // Преобразовать время из строки time в число ЧЧММСС
  // Строка может иметь вид ЧЧ:ММ:СС
  // При ошибке возвращает ноль, иначе - значение даты

_MAPIMP long int _MAPAPI mapTimeToLong(const char * time);

  // Преобразовать время из из числа ЧЧММСС в строку
  // ЧЧ:ММ:СС
  // number - числовое значение времени,
  // time   - адрес строки для результата
  // size   - размер строки для контроля
  // При ошибке возвращает ноль, иначе - адрес входной строки

_MAPIMP char * _MAPAPI mapLongToTime(long int number,
									 char * time, int size);


  // Преобразовать угловую величину в градусах из строки
  // в числовое значение в радианах
  // Строка может иметь вид ГГГ╟ММ'CC.CC" или ГГГ.ГГГГГГГГ╟
  // Для Linux вместо символа ╟ (\xB0) д.б. ^
  // При ошибке возвращает ноль, иначе - значение в радианах

_MAPIMP double _MAPAPI mapAngleToRadian(const char * angle);

  // Преобразовать числовое значение из радиан в строку вида
  // ГГГ╟ММ'CC.CC"
  // Для Linux вместо символа ╟ (\xB0) д.б. ^
  // angle  - адрес строки для результата
  // size   - размер строки для контроля (достаточный для результата)
  // При ошибке возвращает ноль, иначе - адрес входной строки

_MAPIMP char * _MAPAPI mapRadianToAngle(double radian,
										char * angle, int size);

  // Запись целого числа в символьном виде со вставкой разделяющих пробелов
  // (разделение на тройки символов от конца строки к началу)
  // size - длина строки в байтах (не менее 16 !)
  // При ошибке возвращает ноль
#ifdef WINCE
_MAPIMP long int _MAPAPI mapLongToString(long int number,WCHAR * string,long int size);
#else
_MAPIMP long int _MAPAPI mapLongToString(long int number,char* string,long int size);
#endif

#ifdef WIN32API
  // Запись целого числа типа __int64 в символьном виде
  // со вставкой разделяющих пробелов
  // (разделение на тройки символов от конца строки к началу)
  // size - длина строки в байтах (не менее 32 !)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapInt64ToString(__int64 number, char* string,
										  long int size);
#endif

  // Запись масштаба в символьном виде со вставкой разделяющих пробелов
  // (например: "1 : 50 000","2 : 1" - если scale < 1)
  // (разделение на тройки символов от конца строки к началу)
  // size - длина строки в байтах (не менее 20 !)
  // При ошибке возвращает ноль

#ifdef WINCE
_MAPIMP long int _MAPAPI mapScaleToString(double scale ,WCHAR* string,long int size);
#else
_MAPIMP long int _MAPAPI mapScaleToString(double scale ,char* string,long int size);
#endif

  // Запись номера объекта в виде строки XXXXX/XXXXX или ХХХХХХХХХХХ
  // (например, 16777339 соответствует строка 256/123)
  // format - формат строки: 1 - XXXXX/XXXXX, 2 - XXXXXXXXXXX,
  // 0 - взять значение по умолчанию (mapGetObjectKeyFormat).
  // Минимальная длина выходной строки - 12 байт
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapObjectKeyToString(long int key , char* string,
											  long int size, long int format);

 // Преобразование номера объекта из строки XXXXX/XXXXX или ХХХХХХХХХХХ
 // в число (например, 16777339 соответствует строка 256/123)
 // string - входная строка
 // long   - результат
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapStringToObjectKey(char* string, long int * key);

  // Установить/Запросить формат номера объекта
  // 1 - XXXXX/XXXXX, 2 - XXXXXXXXXXX

_MAPIMP long int _MAPAPI mapGetObjectKeyFormat(void);
_MAPIMP long int _MAPAPI mapSetObjectKeyFormat(long int format);

  // Установить/Запросить путь к данной DLL (к библиотекам приложения)
  // Рекомендуется устанавливать при запуске приложения

_MAPIMP void _MAPAPI mapSetPathShell(const char * path);
_MAPIMP const char * _MAPAPI mapGetPathShell();
_MAPIMP void _MAPAPI mapGetPathShellEx(char * path, long int size);

#ifdef MULTIPLATFORM                            // 10/08/07
  //  Запросить путь к данным платформы Sparc
  //  Применяется при работе связки Windows - Sparc
_MAPIMP const char * _MAPAPI mapGetTurnPath();
_MAPIMP void _MAPAPI mapGetTurnPathEx(char * path, long int size);
#endif

  // Установить новое имя INI-файла документа
  // При ошибке возвращает ноль

_MAPIMP const char * _MAPAPI mapSetMapIniName(HMAP hMap, const char * mapininame);

  // Запросить имя INI-файла документа
  // При ошибке возвращает пустую строку

_MAPIMP const char * _MAPAPI mapGetMapIniName(HMAP hMap);

  // Установить путь к общим файлам классификаторам (RSC)
  // При ошибке возвращает ноль

_MAPIMP const char * _MAPAPI mapSetCommonRscPath(const char * rscpath);

  // Запросить путь к общим файлам классификаторам (RSC)
  // При ошибке возвращает пустую строку

_MAPIMP const char * _MAPAPI mapGetCommonRscPath();

  // Формирование сокращенного имени файла из полного имени
  // source - исходный путь,
  // target - полученная строка (c:\abc..\klm.ext),
  // size   - предельный размер выходной строки.
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapPathToShort(const char * source,
										char * target, long int size);

  // Построить "короткое" имя файла
  // templ - путь к библиотекам приложения (mapGetPathShell)
  // name - полное имя файла
  // Возвращает указатель на "короткое" имя файла
  // При ошибке возвращает ноль

_MAPIMP const char * _MAPAPI mapBuildShortName(const char * templ,
											   const char * name); // 09/05/05

  // Построить "длинное" имя файла
  // templ - путь к библиотекам приложения (mapGetPathShell)
  // name - имя файла
  // path - "длинное" имя файла (указатель на массив для размещения результата, MAX_PATH)
  // При ошибке возвращает ноль

_MAPIMP char * _MAPAPI mapBuildLongName(const char * templ,
										char * name, char * path); // 28/05/01

  // Построить усеченный путь к файлу (относительно данных)
  // templ  - путь к данным (например, mapGetMapPath(HMAP hMap))
  // name   - полное имя файла (c:\abc\def...)
  // target - адрес буфера для рамещения усеченного пути (или полного, если нелья усечь)
  // size   - размер буфера
  // Возвращает указатель на усеченный путь к файлу (.\def...)
  // При ошибке возвращает ноль

_MAPIMP char * _MAPAPI mapCutPath(const char * templ, const char * name,      // 08/10/04
								  char * target, int size);

  // Построить полное имя файла по усеченному пути
  // templ  - путь к данным (например, mapGetMapPath(HMAP hMap))
  // name   - усеченный путь (начинается с .\) или полный путь
  // target - адрес буфера для размещения полного имени файла
  // size   - размер буфера
  // Возвращает указатель на полный путь (с:\abc\def... или \\NAME\abc\...)
  // При ошибке возвращает ноль

_MAPIMP char * _MAPAPI mapUnionPath(const char * templ, const char * name,  // 08/10/04
									char * target, int size);


  // Векторизация битового растра точечного знака
  //  size     - размер знака: size = 16 (16x16), size = 32 (32x32)
  //  bits     - битовая область знака: 32 байта (16x16), 128 байт (32x32)
  //  length   - длина области data (10000 байт - минимум)
  // Результат - метрика, записанная в data
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapMarkVectorization(int size, char* bits,
											  int length, POLYDATA* data);

  // Преобразовать текстовую строку из кодировки OEM (DOS) в ANSI (WINDOWS)
  // При ошибке возвращает 0

_MAPIMP char * _MAPAPI mapDos2Win(char * string, long int size);

#ifdef LINUXAPI
  // Преобразовать текстовую строку из кодировки OEM (DOS) в KOI8 (UNIX)
  // При ошибке возвращает 0

  char * _MAPAPI mapDos2Koi8(char * string, long int size);

  // Преобразовать текстовую строку из кодировки ANSI (WINDOWS) в KOI8 (UNIX)
  // При ошибке возвращает 0

  char * _MAPAPI mapWin2Koi8(char * string, long int size);

  // Преобразовать текстовую строку из кодировки KOI8 (UNIX) в ANSI (WINDOWS)  // 07/10/08
  // При ошибке возвращает 0
  char * _MAPAPI mapKoi82Win(char * string, long int size);
#endif

  // Запросить глубину Dib
  // Возвращает количество бит, выделяемое на одну точку изображения карты
_MAPIMP long int _MAPAPI mapGetMapScreenDepth();   // 21/03/03

  /*********************************************************
  *                                                        *
  *              ФУНКЦИИ КАЛИБРОВКИ ИЗОБРАЖЕНИЯ            *
  *                                                        *
  *********************************************************/

  // Установить предельные размеры буфера изображения
  // Функция должна вызываться до открытия данных
  // Чтобы оставить ширину или высоту без изменения соответствующий параметр
  // должен быть равен 0
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapSetScreenImageSize(long int width, long int height);
_MAPIMP long int _MAPAPI SetScreenImageSize(long int width, long int height);

 // Запросить максимальную ширину изображения карты в точках
 // Установка нового значения - mapSetScreenImageSize       // 22/01/08

_MAPIMP long int _MAPAPI mapGetScreenWidth();


 // Запросить максимальную высоту изображения карты в точках
 // Установка нового значения - mapSetScreenImageSize

_MAPIMP long int _MAPAPI mapGetScreenHeight();


  // Запросить/Установить размер диагонали видимого изображения
  // экрана в миллиметрах (50 - 4000). При установке возвращает
  // старое значение
  // hdc - контекст главного окна для запроса текущих размеров
  // экрана в пикселах
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapGetScreenSize();
_MAPIMP long int _MAPAPI mapSetScreenSize(long int size);
_MAPIMP long int _MAPAPI mapSetScreenSizeEx(long int size, HDC hdc/* = 0*/);

  // Запросить/Установить коэффициент масштабирования изображения
  // экрана в процентах (100 - 2000). При установке возвращает
  // старое значение и пересчитывает точность текущего режима экрана
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapGetScreenScale();
_MAPIMP long int _MAPAPI mapSetScreenScale(long int scale);

  // Запросить/Установить точность текущего режима экрана в точках
  // на метр (1000 - 100000). При установке возвращает старое
  // значение и пересчитывает коэффициент масштабирования экрана
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapGetScreenPrecision();
_MAPIMP long int _MAPAPI mapSetScreenPrecision(long int value);
_MAPIMP void _MAPAPI mapSetScreenPrecisionEx(double valueHor, double valueVer);

  // Пересчет через текущие параметры экрана

_MAPIMP long int _MAPAPI mapScreenMeter2Pixel(double metric);
_MAPIMP double _MAPAPI mapScreenPixel2Meter(long int pixel);


 /*********************************************************
 *                                                        *
 *           ФУНКЦИИ КОМПРЕССИИ И ДЕКОМПРЕССИИ            *
 *                                                        *
 *********************************************************/

  // Компрессия данных по алгоритму типа LZW
  //  in      - массив исходных данных
  //  out     - массив выходных (сжатых) данных
  //  sizein  - размер массива исходных данных
  //  sizeout - размер массива выходных (сжатых) данных
  // При ошибке или при сжатии менее чем на 20%
  // выходной массив не заполняется и функция возвращает 0.

_MAPIMP long int _MAPAPI mapCompressLZW(const char* in,  long int sizein,
										char* out, long int sizeout);

  // Декомпрессия данных по алгоритму типа LZW
  //  in      - массив исходных (сжатых) данных
  //  out     - массив выходных данных
  //  sizein  - размер массива исходных (сжатых) данных
  //  sizeout - размер массива выходных данных
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapDecompressLZW(const char* in,  long int sizein,
										  char* out, long int sizeout);

 /*********************************************************
 *                                                        *
 *                   ЗАКРЫТЫЕ ФУНКЦИИ                     *
 *                                                        *
 *********************************************************/

#ifdef WIN32API
  // Запросить доступ к групповым объектам
  // Если доступ запрещен - групповые объекты не создаются
  // и не обрабатываются

_MAPIMP long int _MAPAPI GetGroupObjectsAccess();
_MAPIMP long int _MAPAPI SetGroupObjectsAccess(long int access);

  // Запросить номер ключа защиты

_MAPIMP unsigned long int _MAPAPI GetKeyNumber();
#endif

#ifdef GISSERV        // 02/03/09

 /*********************************************************
 *                                                        *
 *           ФУНКЦИИ ДОСТУПА К ГИС-СЕРВЕРУ                *
 *                                                        *
 *     Для открытия карты на ГИС-сервере в штатные        *
 *      функции открытия карт передается строка вида      *
 *           "ALIAS#условное_имя_карты"                   *
 *  Условное имя карты не является путем к паспорту карты *
 *     Строка "ALIAS#" является ключевым словом для       *
 *           обращения к ГИС-серверу                      *
 *                                                        *
 *********************************************************/

  // Установить параметры соединения с ГИС-сервером
  // Вызывается до открытия карт на сервере
  // name - имя хоста (до 256 символов), если ishost не равен 0
  //        или строка адреса "XXX.XXX.XXX.XXX"
  // Если параметр равен нулю - сервер ищется на локальном хосте "localhost".
  // port - номер порта от 1024 до 65536, по умолчанию - 2047 (если port = 0)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetConnectParameters(const char * name,
												 long int port, long int ishost);

  // Запросить номер порта для связи с ГИС-сервером
  // Номер порта от 1024 до 65536, по умолчанию - 2047

_MAPIMP long int _MAPAPI mapGetConnectPort();

  // Запросить имя\адрес хоста
  // Если было установлен адрес хоста - возвращаемое значение 1,
  // если имя хоста - возвращаемое значение 2.
  // Если установлено оба значения - возвращается адрес хоста
  // name - адрес строки для размещения результата
  // size - размер строки (для имени хоста не менее 256)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetConnectHost(char * name, long int size);

  // Зарегистрировать пользователя
  // Если соединение с сервером не было установлено -
  // пытается соединиться с установленными ранее параметрами
  // Структура USERPARM описана в maptype.h
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapRegisterUser(TMCUSERPARM * parm);

  // Удалить в памяти параметры регистрации пользователя
  // После закрытия последнего документа на Сервере соединение
  // разрывается и для последующего открытия карты нужно повторно
  // выполнить mapRegisterUser()

_MAPIMP void _MAPAPI mapUnRegisterUser();           // 05/11/08

  // Запросить имя пользователя, подключившегося к ГИС-серверу
  // При ошибке возвращает пустую строку

_MAPIMP const char * _MAPAPI mapGetCurrentUserName();

  // Запросить список доступных пользователю карт на ГИС-сервере
  // buffer - адрес памяти для размещения списка карт,
  //          структура TMCMAPLIST описана в maptype.h
  // length - длина выделенной области памяти
  // Для открытия выбранной карты функциями MAPAPI к ее
  // имени должен быть добавлен префикс "ALIAS#"
  // Возвращает общий размер считанной записи или 0

_MAPIMP long int _MAPAPI mapGetMapListforUser(TMCMAPLIST * buffer, int length);

  // Запросить список доступных пользователю матриц на ГИС-сервере
  // buffer - адрес памяти для размещения списка карт,
  //          структура TMCMAPLIST описана в maptype.h
  // length - длина выделенной области памяти
  // Для открытия выбранной матрицы функциями MAPAPI к ее
  // имени должен быть добавлен префикс "ALIAS#"
  // Возвращает общий размер считанной записи или 0

_MAPIMP long int _MAPAPI mapGetMtwListforUser(TMCMAPLIST * buffer, int length);

  // Запросить список доступных пользователю растров на ГИС-сервере
  // buffer - адрес памяти для размещения списка карт,
  //          структура TMCMAPLIST описана в maptype.h
  // length - длина выделенной области памяти
  // Для открытия выбранного растра функциями MAPAPI к ее
  // имени должен быть добавлен префикс "ALIAS#"
  // Возвращает общий размер считанной записи или 0

_MAPIMP long int _MAPAPI mapGetRswListforUser(TMCMAPLIST * buffer, int length);

  // Запросить открыта ли карта на сервере или локально
  // hmap -  идентификатор открытых данных
  // hSite - идентификатор открытой пользовательской карты
  // (для фоновой (основной) карты hSite = hMap)
  // Если карта открыта на сервере возвращает ненулевое значение

_MAPIMP long int _MAPAPI mapIsMapFromServer(HMAP hMap, HSITE hSite);

#endif  // GISSERV
}       // extern "C"

#endif  // MAPAPI_H
