
#ifndef NETAPI_H
#define NETAPI_H

#ifndef MAPTYPE_H
  #include "maptype.h"
#endif

// Коды семантик для логических связей между объектами сети:
#define SEMNETRIB       32812  // Номер объекта-ребра (для узла)
#define SEMNETKNOTFIRST 32813  // Номер объекта-узла первой точки (для ребра)
#define SEMNETKNOTLAST  32814  // Номер объекта-узла последней точки (для ребра)
#define SEMNETNUMBER    32815  // Номер сети
#define SEMNETTOOBJECT  32816  // Ссылка на объект листа
#define SEMNETVDIRECT   32817  // Скорость прямая (для ребра)
#define SEMNETVUNDIRECT 32818  // Скорость обратная (для ребра)
#define SEMNETCOSTRIB   32819  // Стоимость ребра
#define SEMNETRANKRIB   32820  // Ранг ребра


#ifdef __cplusplus
extern "C"
{
#endif

// -----------------------------------------------------------------------------
// Построение геометрической сети объектов
// hmap - идентификатор открытой векторной карты
// parm - описание параметров задачи (см.maptype.h)
// На карте предварительно должны быть выделены программными средствами
// (напр. функцией mapSetSiteSeekSelect(...)) объекты для построения сети
// (напр. дорожная сеть)
// В функции вызывается диалог "Построение сети", в котором задаются:
// имя выходного файла, классификатор (service.rsc),вид объектов
// Классификатор  service.rsc содержит объекты: узел сети, ребро сети и
// обязательную семантику, необходимую для работы с сетью  (SEMNETRIB ...)
// Из диалога построения для заполнения некоторых семантик вызывается диалог
// "Настройка параметров для построения сети", который активизируется по
// соответствующей кнопке
//   Диалог предназначен для заполнения семантики ребер и представляет собой
//   таблицу с названиями и кодами выделенных объектов, по которым строится сеть
//   Семантика УРанг объектаУ заполняется пользователем числовыми значениями
//   Значения  скорости можно выбрать из списка числовых характеристик исходного
//   объекта  или ввести с клавиатуры
// При успешном выполнении возвращает идентификатор пользовательской карты
// с построенной сетью
// При ошибке возвращает 0
// -----------------------------------------------------------------------------
HSITE _export WINAPI onCreateNetDlg(HMAP hmap, TASKPARMEX * parm);


// -----------------------------------------------------------------------------
// Построение геометрической сети объектов
// hmap - идентификатор открытой векторной карты
// parm - описание параметров задачи (см.maptype.h)
// namesit - имя выходного файла
// namersc - классификатор (должен содержать объекты: узел сети, ребро сети и
// обязательные семантики (SEMNETRIB, SEMNETKNOTFIRST ...) )
// flag - управление диалогом  "Построение сети" (0- не вызывать диалог, 1 - вызывать)

HSITE _export WINAPI onCreateNetDlgEx(HMAP hmap, TASKPARMEX * parm,
                                     char * namesit, char * namersc, int flag);


// -----------------------------------------------------------------------------
// Определение кратчайшего расстояния между двумя узлами сети
// hmap - идентификатор открытой векторной карты
// site - пользовательская карта с построенной сетью, т.е. на карте должны быть
// объекты узлы сети с обязательными семантиками: номер сети и ссылка на ребро
// сети, и ребра с семантиками: номер первого и последнего узлов для данного
// ребра, ссылка на объект карты и номер сети
// pointbegin - начальный узел (идентификатор объекта карты в памяти)
// pointend - конечный узел (идентификатор объекта карты в памяти)
// В функции вызывается диалог "Параметры построения минимального пути", в котором
// устанавливаются метод построения (длина или время,в последнем случае ребра
// должны иметь семантику "Скорость") и фильтр по семантикам ребер
// По окончании работы функции выдается результирующий диалог "Список объектов",
// в который записываются реальные объекты карты и протяженность пути по каждому объекту
// На пользовательской картe будут выделены ребра,которые составляют минимальный маршрут
// Число выделенных объектов определяется функцией mapTotalSeekObjectCount(seekapi.h)
// Получить идентификатор выделенного объекта можно используя функцию mapTotalSeekObject(seekapi.h)
// Возвращает: номер объекта (mapObjectKey), если объект маршрут создавался
//            - 1, если объект маршрут не создавался
//              0, при ошибке
// -----------------------------------------------------------------------------
long int _export WINAPI onSeekPathDlg(HMAP hmap, HSITE site, TASKPARMEX * parm,
                                      HOBJ infobegin,HOBJ infoend);


// -----------------------------------------------------------------------------
// Определение кратчайшего расстояния между двумя узлами сети без вызова диалогов
// hmap - идентификатор открытой векторной карты
// site - пользовательская карта с построенной сетью, т.е. на карте должны быть
// объекты узлы сети с обязательными семантиками: номер сети и ссылка на ребро
// сети, и ребра с семантиками: номер первого и последнего узлов для данного
// ребра, ссылка на объект карты и номер сети
// pointbegin - начальный узел(идентификатор объекта карты в памяти)
// pointend - конечный узел(идентификатор объекта карты в памяти)
// methodseek - метод построения (0 - длина, 1- время)
// speed - средняя скорость (км/ч)(если methodseek = 1 и значения семантики
// "Скорость" не установлены)
// На пользовательской картe будут выделены ребра,которые составляют минимальный маршрут
// Число выделенных объектов определяется функцией mapTotalSeekObjectCount(seekapi.h)
// Получить идентификатор выделенного объекта можно используя функцию mapTotalSeekObject(seekapi.h)
// Возвращает: номер объекта (mapObjectKey), если объект маршрут создавался
//            - 1, если объект маршрут не создавался
//              0, при ошибке
// -----------------------------------------------------------------------------
long int _export WINAPI onSeekPath(HMAP hmap, HSITE site, TASKPARMEX * parm,
                                   HOBJ infobegin,HOBJ infoend,
                                   long int methodseek, double speed);


// -----------------------------------------------------------------------------
// Определение кратчайшего расстояния между двумя узлами сети без вызова диалогов
// hmap - идентификатор открытой векторной карты
// site - пользовательская карта с построенной сетью, т.е. на карте должны быть
// объекты узлы сети с обязательными семантиками: номер сети и ссылка на ребро
// сети, и ребра с семантиками: номер первого и последнего узлов для данного
// ребра, ссылка на объект карты и номер сети
// object - идентификатор объекта в памяти,
//        предварительно созданного функцией mapCreateObject()
//        или mapCreateSiteObject(),
//        в котором будет размещен результат - минимальный путь.
// pointbegin - начальный узел(идентификатор объекта карты в памяти)
// pointend - конечный узел(идентификатор объекта карты в памяти)
// methodseek - метод построения (0 - длина, 1- время)
// speed - средняя скорость (км/ч)(если methodseek = 1 и значения семантики
// "Скорость" не установлены)
// Возвращает: -1, если путь найден
//              0, при ошибке
// -----------------------------------------------------------------------------
long int _export WINAPI onSeekPathCreateObject(HMAP hmap, HSITE site,
                                               TASKPARMEX * parm,HOBJ object,
                                               HOBJ infobegin,HOBJ infoend,
                                               long int methodseek, double speed);

// -----------------------------------------------------------------------------
// Нахождение в сети ребер, расположенных на расстоянии менее заданного от
// указанного узла (построение графа удаленности)
// hmap - идентификатор открытой векторной карты
// site - пользовательская карта с построенной сетью, т.е. на карте должны быть
// объекты узлы сети с обязательными семантиками: номер сети и ссылка на ребро
// сети, и ребра с семантиками: номер первого и последнего узлов для данного
// ребра, ссылка на объект карты и номер сети
// info -  узел сети (идентификатор объекта карты в памяти)
// distance - расстояние в метрах
// На пользовательской карте будут выделены ребра, расположенные  на расстоянии,
// менее distance от info
// Число выделенных объектов определяется функцией mapTotalSeekObjectCount(seekapi.h)
// Получить идентификатор объекта можно используя функцию mapTotalSeekObject(seekapi.h)
// При ошибке возвращает 0
// -----------------------------------------------------------------------------
long int _export WINAPI onDistFromKnot(HMAP hmap, HSITE site, TASKPARMEX * parm,
                                       HOBJ info, double distance);

// -----------------------------------------------------------------------------
// Получить ближайший узел сети к указанной точке
// hmap - идентификатор открытой векторной карты
// site - пользовательская карта с построенной сетью
// info - идентификатор объекта карты в памяти
// point - координаты точки в метрах  в системе карты
// Пример использования:
//  - создаем объект
//    HOBJ hobj = mapCreateSiteObject(hmap,site,IDDOUBLE2,0);
//  - находим ближайший узел к точке point и записываем в hobj
//    long int ret = onGetNodeByPoint(hmap,site,hobj, point);
//  - вызываем функцию работы с сетью
//    if (ret)
//        onDistFromKnot(hmap,site,parm,hobj,20);
// При ошибке возвращает 0
// -----------------------------------------------------------------------------
long int _export WINAPI onGetNodeByPoint(HMAP hmap, HSITE site,
                                         HOBJ info,
                                         DOUBLEPOINT * point);
// -----------------------------------------------------------------------------
// Вычисление минимального пути между точками (узлами сети)
// hmap - идентификатор открытой векторной карты
// site - пользовательская карта с построенной сетью
// parm - описание параметров задачи (см.maptype.h)
// array - адрес массива координат опорных точек,
//         размер массива равен count
// count - количество точек для построения минимального пути
// Расчеты производятся по ближайшим к точкам узлам сети
// В функции вызывается диалог "Параметры построения минимального пути", в котором
// устанавливаются метод построения (длина или время,в последнем случае ребра
// должны иметь семантику "Скорость") и фильтр по семантикам ребер
// По окончании работы функции выдается результирующий диалог "Порядок обхода точек",
// в который записываются номера точек в том порядке, в котором путь прохождения по ним минимален,
// протяженность маршрута между соседней парой точек, общая длина пути.  
// При ошибке возвращает 0
// -----------------------------------------------------------------------------
long int _export WINAPI onMinimalPath(HMAP hmap, HSITE site, TASKPARMEX * parm,
                                      DOUBLEPOINT * arraypoint,long int count);
#ifdef __cplusplus
}       // extern "C"
#endif

#endif  // NETAPI_H
