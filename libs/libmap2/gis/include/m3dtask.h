#ifndef M3DTASKH
#define M3DTASKH

#include <Classes.hpp>

#ifndef M3DTYPEH
  #include "m3dtype.h"
#endif

#include "mapview.rh"


typedef long int  HTASK3D;    // ИДЕНТИФИКАТОР ЗАДАЧИ ТРЕХМЕРНОГО ОТОБРАЖЕНИЯ
                              // ДАННЫХ(КАРТЫ, РАСТРА, МАТРИЦЫ)

//---------------------------------------------------------------------------
// Коды сообщений для задачи "3D-навигатор"
//---------------------------------------------------------------------------
#define CM_T3DOPEN                 IDT_MAP3D
#define CM_T3DSTOP                 IDT_MAP3D + 1
#define CM_T3DCURSOR               IDT_MAP3D + 2
#define CM_T3DMAPACTIVE            IDT_MAP3D + 3
#define CM_T3DSELECTFRAME          IDT_MAP3D + 4
#define CM_T3DACTIONSELECTFRAME    IDT_MAP3D + 5
#define CM_SYNCHR_NO               IDT_MAP3D + 6
#define CM_SYNCHR_YES              IDT_MAP3D + 7

//---------------------------------------------------------------------------
// Название секции в ini-файле карты для задачи "3D-НАВИГАТОР"
//---------------------------------------------------------------------------
#define IniFileSection "MAP3D"

//---------------------------------------------------------------------------
// СТРУКТУРА ПЕРЕДАЧИ ОТКРЫТЫХ ДАННЫХ ДЛЯ ПОСТРОЕНИЯ 3D-МОДЕЛИ
//---------------------------------------------------------------------------
typedef struct DESCDATA
{
  HMAP     hData;           // Идентификатор открытых данных (Map)
  long int Area;            // Область построения модели:
                            //   0 - весь район
                            //   1 - выбор участка района (SelectFrame)
                            //   2 - по размеру окна карты
  DFRAME   SelectFrame;     // Габариты выбранного для построения модели
                            // участка района
  HWND     HMapWnd;         // Идентификатор окна карты, для которой открыт (DocHandle) ??? - Входит в TASKPARMEX !!!
                            // 3D-навигатор
  char*    PathShell;       // Каталог приложения (exe,dll,...) ??? - Входит в TASKPARMEX !!!
                            // !!!
  HOBJ     SelectObj;       // Идентификатор выбранного в заданном участке объекта (SelectObject)
  long int Synch2D3D;      // Синхронизация перемещений двух- и трехмерной карт
                            //   0 - не синхронизировать
                            //   1 - синхронизировать
  TASKPARM* TaskParm;

  long int Reserve[4];
}
  DESCDATA;

//---------------------------------------------------------------------------
// Запуск задачи трехмерного отображения данных
//   Вход:
//     Owner - собственник главной формы задачи
//              (окно Панорамы или отдельное приложение)
//      data - описание данных для построения 3D-модели
//   Возвращаемое значение:  идентификатор запущенной задачи
//---------------------------------------------------------------------------
HTASK3D t3dOpenTask(TComponent* Owner, DESCDATA* data);

//---------------------------------------------------------------------------
// Закрытие задачи трехмерного отображения данных
//   Вход:
//     hTask3D - идентификатор запущенной задачи
//---------------------------------------------------------------------------
void t3dCloseTask(HTASK3D hTask3D);

//---------------------------------------------------------------------------
// Активизировать окно задачи (установить в него фокус)
//   Вход:
//     hTask3D - идентификатор запущенной задачи
//   Возвращаемое значение:  1 - установили, 0 - нет
//---------------------------------------------------------------------------
int t3dActiveTask(HTASK3D hTask3D);

//---------------------------------------------------------------------------
// Установить курсор на трехмерной модели в заданную точку(координаты задаются
//  в метрах на местности)
//   Вход:
//     hTask3D - идентификатор запущенной задачи
//       point - координаты точки в метрах на местности
//        mode - режим перерисовки: 0 - не перерисовывать, 1 - перерисовать
//   Возвращаемое значение:  1 - установили, 0 - нет
//---------------------------------------------------------------------------
int t3dSetPoint(HTASK3D hTask3D, DOUBLEPOINT* point, int mode);

//---------------------------------------------------------------------------
// Запросить положение точки наблюдения на трехмерной модели
// (в метрах на местности)
//   Вход:
//     hTask3D - идентификатор запущенной задачи
//       point - адрес для координат возвращаемой точки в метрах на местности
//   Возвращаемое значение:  1 - установили, 0 - нет
//---------------------------------------------------------------------------
int t3dGetPoint(HTASK3D hTask3D, DOUBLEPOINT* point);

//---------------------------------------------------------------------------
// Установить язык
//   Вход:
//     hTask3D - идентификатор запущенной задачи
//    Language - код языка диалогов (1 - ENGLISH, 2 - RUSSIAN, ...)
//   Возвращаемое значение:  1 - установили, 0 - нет
//---------------------------------------------------------------------------
int t3dSetLanguage(HTASK3D hTask3D, long int language);

#endif
