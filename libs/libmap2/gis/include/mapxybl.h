
#if !defined(MAPXYBL_H)
#define MAPXYBL_H

#ifndef MAPTRANS_H
 #include "maptrans.h"
#endif

//****************************************************************************
// Программы перевода геодезических и прямоугольных координат точки
// для различных проекций
//****************************************************************************

// Вычисление длины дуги от экватора до широты b (ttrArcLength нечетная)
double _fastcall ttrArcLength(double b);

// Вычисление площади 1 градусных трапеций от экватора до широты b
// L-L=1гр ttrTrapeziumArea нечетная
double _fastcall ttrTrapeziumArea(double b);

// Вычисление изометрической широты b
//  -90 до +90 возрастает
double _fastcall ttrIsometricLatitude(double b);

// Вычисление радиуса кривизны параллели широты b (ttrParallelCurvatureRadius четная)
double _fastcall ttrParallelCurvatureRadius(double b);

// Вычисление радиуса кривизны первого вертикала широты b (ttrFirstVerticalCurvatureRadius четная)
double _fastcall ttrFirstVerticalCurvatureRadius(double b);

// Вычисление радиуса кривизны меридиана широты b (ttrMeridianCurvatureRadius четная)
double _fastcall ttrMeridianCurvatureRadius(double b);

// Переход от bl к азимуту a и зенитному растоянию z
double _fastcall ttrOblique(double vi0, double l0, double b, double l,
                            double *z,  double *a);
// Переход от b,l к новой широте -90 < b,1 < 90 и долготе 0 будет
// соответствовать l0
// полюс должен находиться с северном полушарии
// долготы выдаю от гринвича к нам по возрастанию
double _fastcall ttrOblique1(double vi0, double l0, double b, double l,
                             double *b1, double *l1);

//***************************************************************************

//***************************************************************************
//  Псевдоцилиндрическая равновеликая синусоидальная проекция Каврайского   *
//  х у координаты прямоугольные в метрах  х на север у на восток           *
//        картинка  справочник стр 64  форомулы стр94  (срезанный элипс)    *
//   начало координат на экваторе  в гринвиче   карта мира                  *
//  параметры проекции:  нет                                                *
//***************************************************************************

// Инициализация
void _fastcall ttrInitKavrajsky(TRANSLATE *data);

// Перевод прямоугольных координат в геодезические
// Входные данные:
// x,y - координаты точки в метрах
// Выходные данные:
// b,l - геодезические координаты точки в радианах
void _fastcall ttrXY2BL_Kavrajsky(TRANSLATE *data, double x, double y,
                                  double *b, double *l);

// Перевод геодезических координат в прямоугольные
// Входные данные:
// b,l - геодезические координаты точки в радианах
// Выходные данные:
// double x,y - прямоугольные координаты точки в метрах
void _fastcall ttrBL2XY_Kavrajsky(TRANSLATE *data, double b, double l,
                                  double *x, double *y);
//***************************************************************************

//***************************************************************************
//  Псевдоцилиндрическая равновеликая эллиптическая проекция Мольвейде      *
//  х у координаты прямоугольные в метрах  х на север у на восток           *
//        картинка  справочник стр 65  форомулы стр94  (примерно эллипс)    *
//   начало координат на экваторе  в гринвиче   карта мира                  *
//  параметры проекции:  нет                                                *
//***************************************************************************

// Инициализация
void _fastcall ttrInitMollweide(TRANSLATE *data);

// Перевод прямоугольных координат в геодезические
// Входные данные:
// x,y - координаты точки в метрах
// Выходные данные:
// b,l - геодезические координаты точки в радианах
void _fastcall ttrXY2BL_Mollweide(TRANSLATE *data, double x, double y,
                                  double *b, double *l);

// Перевод геодезических координат в прямоугольные
// Входные данные:
// b,l - геодезические координаты точки в радианах
// Выходные данные:
// double x,y - прямоугольные координаты точки в метрах
void _fastcall ttrBL2XY_Mollweide(TRANSLATE *data, double b, double l,
                                  double *x, double *y);
//******************************************************************************

//******************************************************************************
//  (Прямая) равнопромежуточная коническая проекция секущий и касательный конус*
//  параметры проекции:                                                        *
//  FirstMainParal  SecondMainParal на этих параллелях сохраняется маштаб      *
//  если углы FirstMainParal SecondMainParal равны, то конус касательный       *
//  MainPointParallel минимальная широта района                                *
//  на ней х=0 и весь район лежит выше                                         *
//  AxisMeridian центральная долгота района на ней у=0                         *
//  пример   FirstMainParal=45      SecondMainParal=65                         *
//           MainPointParallel=35   AxisMeridian=0                             *
//  пример   старостин стр 85   45,10 --> y=31.413 x=46.654 1:2 500 000        *
//  х у координаты прямоуг. в метрах  х на север от b_min                      *
//                                    у на восток от AxisMeridian              *
//  ro=cccc-s    sigma=alva*l x=ros-ro*cos(sigma) e=ro*sin(sigma)              *
//******************************************************************************

// Инициализация
void _fastcall ttrInitConicalEquidistant(TRANSLATE *data);

// Перевод прямоугольных координат в геодезические
// Входные данные:
// x,y - координаты точки в метрах
// Выходные данные:
// b,l - геодезические координаты точки в радианах
void _fastcall ttrXY2BL_ConicalEquidistant(TRANSLATE *data,
                                           double x,  double y,
                                           double *b, double *l);

// Перевод геодезических координат в прямоугольные
// Входные данные:
// b,l - геодезические координаты точки в радианах
// Выходные данные:
// double x,y - прямоугольные координаты точки в метрах
void _fastcall ttrBL2XY_ConicalEquidistant(TRANSLATE *data,
                                           double b,  double l,
                                           double *x, double *y);
//******************************************************************************

//******************************************************************************
//  (Прямая) равновеликая коническая проекция секущий  конус                   *
//  параметры проекции:                                                        *
//  FirstMainParal  SecondMainParal на этих параллелях сохраняется маштаб      *
//  MainPointParallel минимальная широта района на ней х=0 и весь район лежит выше
//  AxisMeridian центральная долгота района на ней у=0                         *
//  пример   FirstMainParal=45      SecondMainParal=65                         *
//           MainPointParallel=35   AxisMeridian=0      1:2 500 000            *
//      старостин стр 88 ,89                                                   *
//    80 40 -> x= 206.6268 y= 38.5976 c их константами (как в книге) совпали   *
//         а константы у них в последних знаках шалят                          *
//     или ro=cccc-s    sigma=alva*l                                           *
//******************************************************************************

// Инициализация
void _fastcall ttrInitConicalEqualArea(TRANSLATE *data);

// Перевод прямоугольных координат в геодезические
// Входные данные:
// x,y - координаты точки в метрах
// Выходные данные:
// b,l - геодезические координаты точки в радианах
void _fastcall ttrXY2BL_ConicalEqualArea(TRANSLATE *data,
                                         double x,  double y,
                                         double *b, double *l);

// Перевод геодезических координат в прямоугольные
// Входные данные:
// b,l - геодезические координаты точки в радианах
// Выходные данные:
// double x,y - прямоугольные координаты точки в метрах
void _fastcall ttrBL2XY_ConicalEqualArea(TRANSLATE *data,
                                         double b,  double l,
                                         double *x, double *y);
//******************************************************************************

//******************************************************************************
//  (Прямая) равноугольная коническая проекция секущий  конус                  *
//   параметры проекции:                                                       *
//  FirstMainParal  SecondMainParal на этих параллелях сохраняется маштаб      *
//  MainPointParallel минимальная широта района на ней х=0 и весь район лежит выше
//  AxisMeridian центральная долгота района на ней у=0                         *
//  пример   FirstMainParal=45   SecondMainParal=65                            *
//_ MainPointParallel=35 AxisMeridian=0      1:2 500 000                       *
//      старостин стр 88 ,89                                                   *
//    *** 45,10 --> y=31.413 x=46.654 1:2 500 000                              *
//     или ro=cccc-s    sigma=alva*l                                           *
//******************************************************************************

// Инициализация
void _fastcall ttrInitConicalOrthomorphic(TRANSLATE *data);

// Перевод прямоугольных координат в геодезические
// Входные данные:
// x,y - координаты точки в метрах
// Выходные данные:
// b,l - геодезические координаты точки в радианах
void _fastcall ttrXY2BL_ConicalOrthomorphic(TRANSLATE *data,
                                            double x,  double y,
                                            double *b, double *l);

// Перевод геодезических координат в прямоугольные
// Входные данные:
// b,l - геодезические координаты точки в радианах
// Выходные данные:
// double x,y - прямоугольные координаты точки в метрах
void _fastcall ttrBL2XY_ConicalOrthomorphic(TRANSLATE *data,
                                            double b,  double l,
                                            double *x, double *y);
//******************************************************************************

//******************************************************************************
// Полярная равноугольная азимутальная(стереографическая)проекция              *
// параметры: FirstMainParal сохраняющая длины на паралели FirstMainParal      *
//   пример:старостин стр 49 fi1=75 b=88 l=4 -> x=7.299,y=0.510 1:3 000 000    *
//  карта полушария                                                            *
//   ro=rk(1+coszk)tn(z/2)  или ro=c1*tn(z/2)    sigma=a    где zk=90-fi a =l  *
//   x=rocos(sigma) y=rosin(sigma) ro=rk*(1+cos(zk)) *tn(z/2) sigma=a          *
//******************************************************************************

// Инициализация
void _fastcall ttrInitAzimuthalOrthomorphicPolar(TRANSLATE *data);

// Перевод прямоугольных координат в геодезические
// Входные данные:
// x,y - координаты точки в метрах
// Выходные данные:
// b,l - геодезические координаты точки в радианах
void _fastcall ttrXY2BL_AzimuthalOrthomorphicPolar(TRANSLATE *data,
                                    double x,  double y,
                                    double *b, double *l);

// Перевод геодезических координат в прямоугольные
// Входные данные:
// b,l - геодезические координаты точки в радианах
// Выходные данные:
// double x,y - прямоугольные координаты точки в метрах
void _fastcall ttrBL2XY_AzimuthalOrthomorphicPolar(TRANSLATE *data,
                                    double b,  double l,
                                    double *x, double *y);

//******************************************************************************

//******************************************************************************
// Полярная равновеликая азимутальная)проекция                                 *
// параметры: FirstMainParal сохраняющая длины на паралели FirstMainParal      *
//  карта полушария                                                            *
//   ro=rk*z  или ro=c1*z    sigma=a    где zk=90-fi a =l                      *
//   x=rocos(sigma) y=rosin(sigma) ro=rk*z sigma=a                             *
//******************************************************************************

// Инициализация
void _fastcall ttrInitAzimuthalEqualAreaPolar(TRANSLATE *data);    

// Перевод прямоугольных координат в геодезические
// Входные данные:
// x,y - координаты точки в метрах
// Выходные данные:
// b,l - геодезические координаты точки в радианах
void _fastcall ttrXY2BL_AzimuthalEqualAreaPolar(TRANSLATE *data,
                                    double x,  double y,
                                    double *b, double *l);

// Перевод геодезических координат в прямоугольные
// Входные данные:
// b,l - геодезические координаты точки в радианах
// Выходные данные:
// double x,y - прямоугольные координаты точки в метрах
void _fastcall ttrBL2XY_AzimuthalEqualAreaPolar(TRANSLATE *data,
                                    double b,  double l,
                                    double *x, double *y);
//******************************************************************************

//******************************************************************************
//  (Нормальная) равновеликая азимутальная проекция      Л А М Б Е Р Т А       *
//  параметры проекции:                                                        *
//  FirstMainParal   на этой параллели сохраняется главный маштаб              *
//  при FirstMainParal =90 прекция на касательную плоскость                    *
//  минимальная широта нет  карта северного полушария   b>0                    *
//  начало координат в центре круга                                            *
//  х у координаты прямоугольные в метрах  х вниз у направо                    *
//   справочник стр90                                                          *
//******************************************************************************

// Инициализация
void _fastcall ttrInitLambertAzimuthalEqualArea(TRANSLATE *data);

// Перевод прямоугольных координат в геодезические
// Входные данные:
// x,y - координаты точки в метрах
// Выходные данные:
// b,l - геодезические координаты точки в радианах
void _fastcall ttrXY2BL_LambertAzimuthalEqualArea(TRANSLATE *data,
                                        double x,  double y,
                                        double *b, double *l);

// Перевод геодезических координат в прямоугольные
// Входные данные:
// b,l - геодезические координаты точки в радианах
// Выходные данные:
// double x,y - прямоугольные координаты точки в метрах
void _fastcall ttrBL2XY_LambertAzimuthalEqualArea(TRANSLATE *data,
                                        double b,  double l,
                                        double *x, double *y);
//******************************************************************************

//******************************************************************************
//  (Нормальная) равнопромежуточная азимутальная проекция      П О С Т Е Л Я   *
//  параметры проекции:                                                        *
//  FirstMainParal на этой параллели сохраняется главный маштаб                *
//  при  FirstMainParal =90 прекция на касательную плоскость                   *
//  минимальная широта нет  карта северного полушария                          *
//  начало координат в центре круга                                            *
//  х у координаты прямоуг. в метрах  х вниз у направо (Навигация стр19)       *
//   справочник стр91                                                          *
//******************************************************************************

// Инициализация
void _fastcall ttrInitPostel(TRANSLATE *data);

// Перевод прямоугольных координат в геодезические
// Входные данные:
// x,y - координаты точки в метрах
// Выходные данные:
// b,l - геодезические координаты точки в радианах
void _fastcall ttrXY2BL_Postel(TRANSLATE *data, double x,  double y,
                                                double *b, double *l);

// Перевод геодезических координат в прямоугольные
// Входные данные:
// b,l - геодезические координаты точки в радианах
// Выходные данные:
// double x,y - прямоугольные координаты точки в метрах
void _fastcall ttrBL2XY_Postel(TRANSLATE *data, double b,  double l,
                                                double *x, double *y);
//******************************************************************************

//******************************************************************************
// Псевдоцилиндрическая синусоидальная проекция Урмаева для карт океанов       *
// (Тихого и Индийского)                                                       *
//  параметры проекции: нет                                                    *
// Карта мировая прямоугольник почти квадрат                                   *
//   картинка:справочник стр 73 формулы стр94                                  *
//   начало координат на экваторе в гринвиче                                   *
//******************************************************************************

// Инициализация
void _fastcall ttrInitUrmaevSinusoidal(TRANSLATE *data);

// Перевод прямоугольных координат в геодезические
// Входные данные:
// x,y - координаты точки в метрах
// Выходные данные:
// b,l - геодезические координаты точки в радианах
void _fastcall ttrXY2BL_UrmaevSinusoidal(TRANSLATE *data,
                                         double x,  double y,
                                         double *b, double *l);

// Перевод геодезических координат в прямоугольные
// Входные данные:
// b,l - геодезические координаты точки в радианах
// Выходные данные:
// double x,y - прямоугольные координаты точки в метрах
void _fastcall ttrBL2XY_UrmaevSinusoidal(TRANSLATE *data,
                                         double b,  double l,
                                         double *x, double *y);
//******************************************************************************

//******************************************************************************
// Производная  равновеликая  проекция А И Т О В А - Г А М Е Р А               *
// получается на основе поперечной равновеликой азимутальной путем             *
// удвоения долгот (вытянутый круг)                                            *
// Карта мировая ( полушарие ) широта в пределах -90 +90                       *
//   картинка: навигация стр 39 (круг вытянутый в стороны в 2 раза)            *
//   формулы  Старостин стр50                                                  *
//   начало координат на полюсе (вверху) х вниз у вправо                       *
// на l_midl  у=0 слева у<0 справа у>0                                         *
//******************************************************************************

// Перевод прямоугольных координат в геодезические
// Входные данные:
// x,y - координаты точки в метрах
// Выходные данные:
// b,l - геодезические координаты точки в радианах
void _fastcall ttrXY2BL_Aitoff(TRANSLATE *data, double x,  double y,
                                                double *b, double *l);

// Перевод геодезических координат в прямоугольные
// Входные данные:
// b,l - геодезические координаты точки в радианах
// Выходные данные:
// double x,y - прямоугольные координаты точки в метрах
void _fastcall ttrBL2XY_Aitoff(TRANSLATE *data, double b,  double l,
                                                double *x, double *y);
//******************************************************************************

//******************************************************************************
//  Равнопромежуточная цилиндрическая проекция                                 *
//  параметры проекции:                                                        *
//  FirstMainParal  сохраняет длины на параллели FirstMainParal                *
//  минимальная широта нет  карта мира   ПРЯМОУГОЛЬНИК                         *
//  начало координат на экваторе в гринвиче                                    *
//  х у координаты прямоугольные в метрах  х вниз <0 вверх >0 у направо        *
//   пример:старостин стр 49 fi1=75 b=88 l=4 -> x=7.299,y=0.510 1:3 000 000    *
//   ro=rk(1+coszk)tn(z/2)  или ro=c1*tn(z/2)    sigma=a    где zk=90-fi a =l  *
//   справочник стр89 картинка навигация стр 36                                *
//******************************************************************************

// Инициализация
void _fastcall ttrInitCylindricalEqualSpaced(TRANSLATE *data);

// Перевод прямоугольных координат в геодезические
// Входные данные:
// x,y - координаты точки в метрах
// Выходные данные:
// b,l - геодезические координаты точки в радианах
void _fastcall ttrXY2BL_CylindricalEqualSpaced(TRANSLATE *data,
                                        double x,  double y,
                                        double *b, double *l);

// Перевод геодезических координат в прямоугольные
// Входные данные:
// b,l - геодезические координаты точки в радианах
// Выходные данные:
// double x,y - прямоугольные координаты точки в метрах
void _fastcall ttrBL2XY_CylindricalEqualSpaced(TRANSLATE *data,
                                        double b,  double l,
                                        double *x, double *y);
//******************************************************************************

//******************************************************************************
//  Равновеликая цилиндрическая проекция    Л А М Б Е Р Т А                    *
//  параметры: нет                                                             *
//  минимальная широта нет  карта мира   ПРЯМОУГОЛЬНИК                         *
//  начало координат на экваторе в гринвиче  AxisMeridian=0 по хорошему        *
//  х у координаты прямоугольные в метрах  х вниз <0 вверх >0 у направо        *
//   справочник стр89 картинка навигация стр 36                                *
//******************************************************************************

// Перевод прямоугольных координат в геодезические
// Входные данные:
// x,y - координаты точки в метрах
// Выходные данные:
// b,l - геодезические координаты точки в радианах
void _fastcall ttrXY2BL_LambertCylindricalEqualArea(TRANSLATE *data,
                                          double x,  double y,
                                          double *b, double *l);

// Перевод геодезических координат в прямоугольные
// Входные данные:
// b,l - геодезические координаты точки в радианах
// Выходные данные:
// double x,y - прямоугольные координаты точки в метрах
void _fastcall ttrBL2XY_LambertCylindricalEqualArea(TRANSLATE *data,
                                          double b,  double l,
                                          double *x, double *y);
//******************************************************************************

//******************************************************************************
//  Видоизмененная простая поликоническая проекция   (международная)           *
//   параметры проекции:                                                       *
//  FirstMainParal  SecondMainParal на этих параллелях сохраняется маштаб      *
//              AxisMeridian  осевой меридиан листа                            *
//  для обратного пересчета из  х у эти параметры тоже используются            *
//  с чужой трапеции не надо подовати х у                                      *
//  Похожа на Гаусса трапеции и номенклатура теже можно поправки к Гауссу ++   *
//  Все меридианы проекции прямые линии Крайние параллели-окружности           *
//  на широте 60 разрыв около 1500 метров между листов                         *
//  2 меридиана отстоящие от среднего на  2 ( 4 8) градуса без искажений       *
//  ( другое искажение маштабов не придусмотрено)                              *
//  начало координат у каждой трапеции меньшая параллель и осевой меридиан     *
//  пример  старостин стр 123   1:1 000 000                                    *
//     справочник 95   старостин стр 122 соловьев стр 131   навигация стр100   *
//******************************************************************************

// Инициализация
void _fastcall ttrInitModifiedPolyconical(TRANSLATE *data);

// Перевод прямоугольных координат в геодезические
// Входные данные:
// x,y - координаты точки в метрах
// Выходные данные:
// b,l - геодезические координаты точки в радианах
void _fastcall ttrXY2BL_ModifiedPolyconical(TRANSLATE *data,
                                            double x,  double y,
                                            double *br, double *lr);

// Перевод геодезических координат в прямоугольные
// Входные данные:
// b,l - геодезические координаты точки в радианах
// Выходные данные:
// double x,y - прямоугольные координаты точки в метрах
void _fastcall ttrBL2XY_ModifiedPolyconical(TRANSLATE *data,
                                            double bin, double lin,
                                            double *x,  double *y);
//******************************************************************************

//******************************************************************************
//   Косая равновеликая азимутальная проекция      Л А М Б Е Р Т А             *
//  параметры проекции: PoleLatitude PoleLongitude   координаты полюса         *
//  FirstMainParal (широта относительно старого полюса )                       *
//  на этой параллели сохраняется главный маштаб                               *
//  при  FirstMainParal =90 прекция на касательную плоскость                   *
//  минимальная широта нет  карта полушария   b>0 относительно полюса          *
//  начало координат в центре круга                                            *
//  х у координаты прямоугольные в метрах  х вниз у направо                    *
//   справочник стр90                                                          *
//******************************************************************************

// Инициализация
void _fastcall ttrInitLambertObliqueAzimuthal(TRANSLATE *data);

// Перевод прямоугольных координат в геодезические
// Входные данные:
// x,y - координаты точки в метрах
// Выходные данные:
// b,l - геодезические координаты точки в радианах
void _fastcall ttrXY2BL_LambertObliqueAzimuthal(TRANSLATE *data,
                                      double x,  double y,
                                      double *b, double *l);

// Перевод геодезических координат в прямоугольные
// Входные данные:
// b,l - геодезические координаты точки в радианах
// Выходные данные:
// double x,y - прямоугольные координаты точки в метрах
void _fastcall ttrBL2XY_LambertObliqueAzimuthal(TRANSLATE *data,
                                            double bin, double lin,
                                            double *x,  double *y);
//******************************************************************************

//******************************************************************************
//   Равнугольная поперечно-цилиндрическая проекция  на секущем цилиндре    Л А М Б Е Р Т А             *
//  параметры проекции: PoleLatitude PoleLongitude   координаты полюса         *
//  FirstMainParal (широта относительно старого полюса )                       *
//  на этой параллели сохраняется главный маштаб                               *
//  начало координат в центре круга                                            *
//  х у координаты прямоугольные в метрах  х вверх у направо                    *
//******************************************************************************

// Инициализация
void _fastcall ttrInitTransverseCylindrical(TRANSLATE *data);

// Перевод прямоугольных координат в геодезические
// Входные данные:
// x,y - координаты точки в метрах
// Выходные данные:
// b,l - геодезические координаты точки в радианах
void _fastcall ttrXY2BL_TransverseCylindrical(TRANSLATE *data,
                                      double x,  double y,
                                      double *b, double *l);

// Перевод геодезических координат в прямоугольные
// Входные данные:
// b,l - геодезические координаты точки в радианах
// Выходные данные:
// double x,y - прямоугольные координаты точки в метрах
void _fastcall ttrBL2XY_TransverseCylindrical(TRANSLATE *data,
                                            double bin, double lin,
                                            double *x,  double *y);


//***************************************************************************************
//  Spherical Mercator (EPSG:1026, EPSG:1024)
//  Цилиндрическая проекция  на шаре
//  параметры проекции: FE, FN (metres)- false easting and false nothing,               *
//  L0 (rad) - longitude of natural origin, Fi0 = 0 (rad) - latitude of natural origin  *
//  RR - radius of the sphere.                                                           *
//  х у координаты прямоугольные в метрах  х вверх у направо                            *
//***************************************************************************************
// Перевод прямоугольных координат в геодезические
// Входные данные:
// x,y - координаты точки в метрах
// Выходные данные:
// b,l - геодезические координаты точки в радианах
void _fastcall ttrXY2BL_SphericalMercator(TRANSLATE *data,
                                      double x,  double y,
                                      double *b, double *l);

// Перевод геодезических координат в прямоугольные
// Входные данные:
// b,l - геодезические координаты точки в радианах
// Выходные данные:
// double x,y - прямоугольные координаты точки в метрах
void _fastcall ttrBL2XY_SphericalMercator(TRANSLATE *data,
                                          double b, double l,
                                          double *x,  double *y);



//Проекция latlong/longlat (EPSG:4326 и т.д.)
//***************************************************************************************
// Перевод прямоугольных координат в геодезические
// Входные данные:
// x,y - координаты точки в градусах
// Выходные данные:
// b,l - геодезические координаты точки в радианах
void _fastcall ttrXY2BL_Latlong(TRANSLATE *data,
                                      double x,  double y,
                                      double *b, double *l);

// Перевод геодезических координат в прямоугольные
// Входные данные:
// b,l - геодезические координаты точки в радианах
// Выходные данные:
// double x,y - прямоугольные координаты точки в градусах
void _fastcall ttrBL2XY_Latlong(TRANSLATE *data,
                                          double b, double l,
                                          double *x,  double *y);
#endif  //MAPXYBL_H

