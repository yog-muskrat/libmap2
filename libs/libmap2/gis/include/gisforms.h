
//---------------------------------------------------------------------------
#ifndef GISFORMS_H
#define GISFORMS_H

#ifndef MAPAPI_H
  #include "mapapi.h"
#endif

#ifndef LISTAPI_H
  #include "listapi.h"
#endif

#ifndef PICTRAPI_H
  #include "pictrapi.h"
#endif

#ifndef MEDAPI_H
  #include "medapi.h"
#endif

#ifndef PRNAPI_H
  #include "prnapi.h"
#endif

#ifndef Mmstruct_H
  #include "mmstruct.h"      
#endif


#ifdef TEST
extern "C"
{
 //            ДИАЛОГ "СПИСОК ДАННЫХ ЭЛЕКТРОННОЙ КАРТЫ"
 // Загрузка диалога "Список данных электронной карты" из приложения
 // Диалог содержит :
 //            закладку "Список растров",
 //            закладку "Список матриц",
 //            закладку "Список пользовательских карт"
 // и перечень функций и методов для работы с растровыми, матричными
 // и пользовательскими картами.
 // При ошибке возвращает ноль
 //
 // При изменении габаритов района(добавление/закрытие карт)
 // из диалога "Список данных электронной карты" посылаются
 // окну документа (maplistparm->Window) сообщения:
 //    -  WM_MOVEDOC(0x601) Отображение участка карты с заданной точкой
 //               в центре окна.
 //       WPARAM - указатель на заданную точку типа DOUBLEPOINT
 //       КООРДИНАТЫ ТОЧКИ В СИСТЕМЕ ИЗОБРАЖЕНИЯ В ПИКСЕЛАХ
 //
 //    -  MT_CHANGEDATA(0x65D) Извещение об изменении состава данных
 //       WPARAM,LPARAM не используются.

 // ОСОБЫЙ СЛУЧАЙ !!!
 // Если используется #define BUILD_DATALIST, то:
 //     При изменении габаритов района(добавление/закрытие карт)
 //     из диалога "Список данных электронной карты" посылаются
 //     окну документа (maplistparm->Window) сообщения:
 //       -  (0x827) Отображение участка карты с заданной точкой
 //               в центре окна.
 //       WPARAM - указатель на заданную точку типа DOUBLEPOINT
 //       КООРДИНАТЫ ТОЧКИ В СИСТЕМЕ ИЗОБРАЖЕНИЯ В ПИКСЕЛАХ
 //
 //       -  (0x82E) Извещение об изменении состава данных
 //       WPARAM,LPARAM не используются.

 //     При активизации соответствующих пунктов всплывающего меню
 //     диалога "Список данных электронной карты",
 //     из диалога "Список данных электронной карты" посылаются
 //     окну документа (maplistparm->Window) сообщения:
 //       -  (0x620)  сообщение от пункта меню "Позиционирование по одной точке"
 //       -  (0x621)  сообщение от пункта меню "Позиционирование по двум точкам"
 //       -  (0x622)  сообщение от пункта меню "Установить рамку по заданному контуру"
 //       -  (0x623)  сообщение от пункта меню "Установить рамку по выбранному объекту"

 long int _export WINAPI  LoadMapListDialog(HMAP hMap,
                                            MAPLISTPARM* maplistparm,
                                            TASKPARM* parm);

 // --------------------------------------------------------------
 // Загрузка диалога "Управление палитрой"
 // Диалог содержит :
 // - закладку "Управление служебной палитрой"
 //  (изменение цвета фона карты, цвета выбранного объекта,
 //   цвета отмеченных объектов,толщину линии выделения
 //   выбранного или отмеченного объекта);
 // - закладку "Управление палитрой карты";
 // - закладку "Управление палитрой матрицы";
 // - закладку "Управление палитрой растра".
 //
 // После успешного выполнения функции в структуре paletteParm
 // сохраняются установленные в диалоге "Управление палитрой"
 // значения: Цвета выбранных объектов, Цвета отмеченных объектов,
 //           Толщины линии выбранных объектов
 //
 // При ошибке возвращает ноль
 // --------------------------------------------------------------
 long int _export WINAPI  LoadPaletteControl(HMAP hMap,
                                             PALETTECNTPARM* paletteParm,
                                             TASKPARM* parm);

 // --------------------------------------------------------------
 // Загрузка диалога "Управление палитрой" с активизацией необходимой закладки
 // Диалог содержит :
 // - закладку "Управление служебной палитрой"
 //  (изменение цвета фона карты, цвета выбранного объекта,
 //   цвета отмеченных объектов,толщину линии выделения
 //   выбранного или отмеченного объекта);
 // - закладку "Управление палитрой карты";
 // - закладку "Управление палитрой матрицы";
 // - закладку "Управление палитрой растра".
 // Структуры PALETTECNTPARM  и TASKPARM описаны в maptype.h
 // pageNumber - Номер активной закладки при открытии диалога "Управление палитрой"
 //              0 - активизируется закладка "Управление служебной палитрой"
 //                   (изменение цвета фона карты, цвета выбранного объекта,
 //                   цвета отмеченных объектов,толщину линии выделения
 //                   выбранного или отмеченного объекта);
 //              1 - активизируется закладка "Управление палитрой карты";
 //              2 - активизируется закладка "Управление палитрой матрицы";
 //              3 - активизируется закладка "Управление палитрой растра".
 // number - Номер активного файла (растра, матрицы, ПК) в текущей закладке
 //          Если number == 0, то активизируется закладка "Управление служебной палитрой"
 //          Исключение составляет Карта. Ее номер 0.
 //          В закладке "Управление палитрой матрицы" не используется.
 // При ошибке возвращает ноль
 // --------------------------------------------------------------
 long int _export WINAPI  LoadPaletteControlEx(HMAP hMap,
                                               PALETTECNTPARM* paletteParm,
                                               TASKPARM* parm,
                                               long int pageNumber,
                                               long int number);


// --------------------------------------------------------------
// Загрузка диалога "Границы видимости"
// При ошибке возвращает ноль
// --------------------------------------------------------------
 long int _export WINAPI  LoadDialogScaleView(HMAP hMap, HWND handle, TASKPARM * parm,
                                              long int * topScale, long int * bottomScale,
                                              char* title);

// --------------------------------------------------------------
// Загрузка графического изображения(BMP,PCX,TIFF, GeoTIFF) в растровый формат (RSW)
// Диалог визуального сопровождения процесса загрузки графического
// изображения в растровый формат (RSW)
//    map - карта,содержащая векторные данные;
//    lpszsource - имя файла грформата BMP,PCX,TIFF,GeoTIFF (размер области 260 байт);
//    lpsztarget - область для имени файла растрового формата (размер области 260 байт);
//    При ошибке возвращает ноль
// --------------------------------------------------------------
 long int WINAPI _export LoadImageToRstEx(HMAP hmap,
                                          char* lpszsource,
                                          char* lpsztarget,
                                          TASKPARM* parm);


// --------------------------------------------------------------
// Диалог "Фиксированный поворот растра"
// Выполняемые задачи:
//           поворот изображения растровой карты на 90 градусов,
//           поворот изображения растровой карты на 180 градусов,
//           поворот изображения растровой карты на 270 градусов,
//           зеркальный поворот изображения растровой карты(относительно вертикальной оси),
//           зеркальный поворот изображения растровой карты(относительно горизонтальной оси).
//    hmap   -  идентификатор открытой векторной карты
//    handle -  идентификатор окна документа
//    reDraw -  флаг перерисовки окна документа по завершении процесса
//    name   - имя файла растровой карты (размер области 260 байт);
//    При ошибке возвращает ноль
// --------------------------------------------------------------
long int WINAPI _export LoadRstMirrorDialogEx(HMAP hmap, HWND handle,
                                              char* name, TASKPARM* parm,
                                              int * reDraw);

// --------------------------------------------------------------
// Диалог "Оптимизация растровой карты"
// Выполняемые задачи: компрессия\декомпрессия файла растровой карты,
//                     оптимизация файла растровой карты.
//    map    - карта,содержащая векторные данные;
//    handle -  идентификатор окна документа
//    name   - имя файла растровой карты
//    reDraw -  флаг перерисовки окна документа по завершении процесса
//    При ошибке возвращает ноль
// --------------------------------------------------------------
long int WINAPI _export LoadRstCompressDialog(HMAP hmap, HWND handle,
                                              char* name,
                                              TASKPARM* parm, int* reDraw);

// --------------------------------------------------------------
// Диалог выбора вида объекта из файла ресурсов
// hmap - идентификатор открытой векторной карты
// hobj - идентификатор объекта
// choiceparm - параметры для диалога выбора вида объекта
// name - заголовок диалога
// возвращает внутренний код объекта, hobj соответствует
// выбранной карте и коду объекта
// при ошибке или отказе возвращает 0

// Для вызова помощи в диалогах необходимо в структуре
// TASKPARM установить путь к файлу *.hlp, который
// содержит топик с идентификатором "6300"
// --------------------------------------------------------------
long int _export WINAPI medChoiceTypeObjectParm(HMAP hmap, TASKPARM *taskparm,
                                                HOBJ hobj, CHOICEOBJECTPARM *choiceparm,
                                                char *name);

// --------------------------------------------------------------
// Загрузить принтер
// --------------------------------------------------------------
HPRINTER _export WINAPI prnLoadPrinter();

// --------------------------------------------------------------
// Печать карты
//  hmap      - идентификатор карты
//  printer   - идентификатор устройства печати
//  printparm - параметры диалога печати карты (поле Length должно
//              содержать размер структуры)
//  taskparm  - параметры задачи (поле Handle должно содержать
//              идентификатор главного окна)
//  title     - заголовок диалога
// При ошибке возвращает 0
// --------------------------------------------------------------
long int _export WINAPI prnMapPrintTitle(HMAP hmap, HPRINTER printer,
                                         MAPPRINTPARM* printparm,
                                         TASKPARM* taskparm, char* title);
// --------------------------------------------------------------
// Освободить принтер
// --------------------------------------------------------------
void _export WINAPI prnFreePrinter(HPRINTER printer);

// **************************************************************
// ФУНКЦИИ РАБОТЫ С КОНТЕКСТОМ ОТОБРАЖЕНИЯ И ПОИСКА КАРТЫ
// **************************************************************

// --------------------------------------------------------------
// Диалог "Установить фильтр отображения объектов карты"
// hmap    - идентификатор открытой векторнй карты
// parm    - параметры задачи (см. maptype.h)
// note    - адрес переменной,определяющей вид окна и содержащей
//           индекс активной закладки при старте программы фильтра
//           (допустимо note = 0).
// Если фильтр изменился, возвращает ненулевое значение
// --------------------------------------------------------------
long int _export WINAPI selSetViewStaff(HMAP hmap,
                                        TASKPARM* parm,
                                        long int* note);

// --------------------------------------------------------------
// Диалог "Установить фильтр отображения объектов карты"
// hmap    - идентификатор открытой векторнй карты
// parm    - параметры задачи (см. maptype.h)
// note    - адрес переменной,определяющей вид окна и содержащей
//           индекс активной закладки при старте программы фильтра
//           (допустимо note = 0).
// restmode- флаг восстановления контекста отображения карты :
//           "-1" - стандартно восстановить контекст отображения;
//           "0"  - использовать текущее состояние контекста отображения.
// Если фильтр изменился, возвращает ненулевое значение
// --------------------------------------------------------------
long int _export WINAPI selSetViewStaffEx(HMAP hmap, TASKPARM* parm,
                                          long int* note,
                                          long int restmode);

// --------------------------------------------------------------
// Диалог "Установить фильтр поиска объектов карты"
// Фильтр поиска объектов карты автоматически восстанавливается/запоминается
// в служебном файле при старте/завершении программы.
// hmap - идентификатор открытой векторной карты
// note - адрес переменной,определяющей вид окна и содержащей
//        индекс активной закладки при старте программы фильтра
//       (допустимо note = 0).
// Возвращает: "1" - выбран режим поиска объектов;
//             "2" - выбран режим выделения объектов карты;
//             "0" - ошибка или отказ.
// --------------------------------------------------------------
 long int _export WINAPI selSetObjectsSearch(HMAP hmap,
                                             TASKPARM* parm,
                                             long int* note);

// --------------------------------------------------------------
// Диалог "Установить фильтр поиска объектов карты" (расширенный)
// Фильтр поиска объектов карты автоматически восстанавливается/запоминается
// в служебном файле при старте/завершении программы.
// Для изменения стандартных операций восстановления фильтра поиска
// используется структура RESTOREMODE (см. mmstruct.h).
// hmap    - идентификатор открытой векторной карты;
// parm    - параметры задачи (см. maptype.h);
// resmode - параметры восстановления фильтра поиска.
// Возвращает: "1" - выбран режим поиска объектов;
//             "2" - выбран режим выделения объектов карты;
//             "0" - ошибка или отказ.
// --------------------------------------------------------------
long int _export WINAPI selSetObjectsSearchEx(HMAP hmap,
                                              TASKPARM* parm,
                                              RESTOREMODE* resmode);

// --------------------------------------------------------------
// Восстановить параметры (фильтр) отображения объектов карты
// hmap - идентификатор открытой векторной карты
// При ошибке возвращает ноль
// --------------------------------------------------------------
 long int _export WINAPI selRestoreSelect(HMAP hmap);

// --------------------------------------------------------------
// Сохранить параметры (фильтр) отображения объектов карты
// hmap - идентификатор открытой векторной карты
// При ошибке возвращает ноль
// --------------------------------------------------------------
 long int _export WINAPI selSaveSelect(HMAP hmap);

// --------------------------------------------------------------
// Диалог выбора из классификатора карты семантической характеристики
// hrsc - идентификатор классификатора ресурсов карты;
// parm - параметры задачи (см. maptype.h).
// При успешном выполнении возвращает код выбранной семантики,
// иначе - "-1".
// --------------------------------------------------------------
long int _export WINAPI selSemanticSelect(HRSC hrsc, TASKPARM* parm);

// --------------------------------------------------------------
// Диалог выбора из классификатора карты семантической
// характеристики c предустановленным кодом семантики.
// hrsc - идентификатор классификатора ресурсов карты;
// parm - параметры задачи (см. maptype.h);
// code - предустановленное значение кода характеристики
//       (при открытии формы данный код характеристики будет выбран).
// При успешном выполнении возвращает код выбранной семантики,
// иначе - "-1".
// --------------------------------------------------------------
long int _export WINAPI selSemanticSelectInit(HRSC hrsc, TASKPARM* parm, long int code);

// --------------------------------------------------------------
// Диалог выбора из классификатора карты семантической
// характеристики по фильтру семантик.
// hrsc   - идентификатор классификатора ресурсов карты;
// parm   - параметры задачи (см. maptype.h);
// filter - массив кодов семантик для выбора (фильтр);
// count  - количество элементов в массиве filter.
// При успешном выполнении возвращает код выбранной семантики,
// иначе - "-1".
// --------------------------------------------------------------
long int _export WINAPI selSemanticSelectFilter(HRSC hrsc,TASKPARM* parm,
						long int *filter,
						long int count);

// --------------------------------------------------------------
// Диалог выбора из классификатора карты семантической
// характеристики по фильтру семантик c предустановленным кодом семантики.
// hrsc   - идентификатор классификатора ресурсов карты;
// parm   - параметры задачи (см. maptype.h);
// code   - предустановленное значение кода характеристики
//          (при открытии формы данный код характеристики будет выбран);
// filter - массив кодов семантик для выбора (фильтр);
// count  - количество элементов в массиве filter.
// При успешном выполнении возвращает код выбранной семантики,
// иначе - "-1".
// --------------------------------------------------------------
long int _export WINAPI selSemanticSelectFilterInit(HRSC hrsc, TASKPARM* parm,
						long int code,
						long int *filter,
						long int count);

// --------------------------------------------------------------
// Установить фильтр слоев карты
// hwnd      - идентификатор родительского окна;
// hrsc      - идентификатор классификатора ресурсов карты;
// hselect   - идентификатор контекста поиска карты (фильтр);
// title     - заголовок формы фильтра слоев карты;
// hinstance - идентификатор библиотеки (dll) ресурсов формы фильтра.
// --------------------------------------------------------------
long int _export WINAPI selSetLayersFilter(HWND hwnd, HRSC hrsc,
                    			HSELECT hselect, char *title,
                                	HINSTANCE hinstance);


// --------------------------------------------------------------
// Установить фильтр объектов карты
// В контексте фильтра HSELECT должна быть установлена карта.
// title - заголовок окна фильтра объектов карты,
// если == 0, устанавливается стандартный заголовок.
// При hmap != 0 список слоев, локализаций и объектов в диалоге фильтра
// формируется в соответствии с фактическим составом объектов карты
// (список м. б. меньше, чем в RSC !),
// иначе - по классификатору объектов карты (полный список)
// Если фильтр изменился, возвращает ненулевое значение
// --------------------------------------------------------------
long int _export WINAPI selSetFilterTitle(TASKPARM* parm, HSELECT hselect,
                                          HMAP hmap, char * title);


// --------------------------------------------------------------
// Установить условия поиска объектов карты по названию семантики
// hmap    - идентификатор открытой векторной карты;
// hselect - идентификатор контекста поиска карты (фильтр);
// arname  - условия поиска по названию (см. mmstruct.h)
// parm   - параметры задачи (см. maptype.h);
// --------------------------------------------------------------
long int _export WINAPI selSearchName(HMAP hmap, HSELECT hselect,
                                      ARRAYNAME*  arname, TASKPARM* parm);

// **************************************************************
// ФУНКЦИИ ВЫБОРА ВИДА ОБЪЕКТА
// **************************************************************

// --------------------------------------------------------------
// Диалог выбора вида объекта из файла ресурсов
// hmap - идентификатор открытой векторной карты
// hobj - идентификатор объекта
// choiceparm - параметры для диалога выбора вида объекта
// name - заголовок диалога
// возвращает внутренний код объекта
// при ошибке или отказе возвращает 0
// --------------------------------------------------------------

 long int _export WINAPI medChoiceTypeObjectParm
                        (HMAP hmap, TASKPARM *taskparm,
                         HOBJ hobj, CHOICEOBJECTPARM *choiceparm,
                         char *name);

// --------------------------------------------------------------
// Выбрать вид объекта из файла ресурсов
// hmap - идентификатор открытой векторной карты
// hobj - идентификатор объекта
// возвращает внутренний код объекта
// при ошибке или отказе возвращает 0
// --------------------------------------------------------------

long int _export WINAPI medChoiceTypeObject(HMAP hmap,
                                            TASKPARM *taskparm,
                                            HOBJ hobj);

// --------------------------------------------------------------
// Выбрать вид объекта из файла ресурсов, используя фильтр
// hmap - идентификатор открытой векторной карты
// hobj - идентификатор объекта
// hselect - фильтр
//           (если hselect == 0 - фильтр не используется)
//            Если hselect != 0 и в hselect установлена
//            карта, то диалог работает по одной карте.
//            Если в hselect карта не установлена, диалог
//            работает по всем картам документа.
// name - заголовок диалога
// возвращает внутренний код объекта
// при ошибке или отказе возвращает 0
// --------------------------------------------------------------
long int _export WINAPI medChoiceTypeObjectSelect
                       (HMAP hmap, TASKPARM *taskparm,
                        HOBJ hobj, HSELECT hselect,
                        char *name);

// --------------------------------------------------------------
//  Выбрать графический линейный объект
//  hmap - идентификатор открытой векторной карты
//  hobj - идентификатор объекта
//  hselect - фильтр
//           (если hselect == 0 - фильтр не используется)
//            Если hselect != 0 и в hselect установлена
//            карта, то диалог работает по одной карте.
//            Если в hselect карта не установлена, диалог
//            работает по всем картам документа.
// name - заголовок диалога
// При нормальном завершении внутренний код объекта равен 0
// при ошибке или отказе возвращает 0
// --------------------------------------------------------------
long int _export WINAPI medChoiceLineImage
                       (HMAP hmap,TASKPARM *taskparm,
                        HOBJ object, HSELECT hselect,
                        char *name);

// --------------------------------------------------------------
//  Выбрать графический площадной объект
//  hmap - идентификатор открытой векторной карты
//  hobj - идентификатор объекта
//  hselect - фильтр
//           (если hselect == 0 - фильтр не используется)
//            Если hselect != 0 и в hselect установлена
//            карта, то диалог работает по одной карте.
//            Если в hselect карта не установлена, диалог
//            работает по всем картам документа.
// name - заголовок диалога
// При нормальном завершении внутренний код объекта равен 0
// при ошибке или отказе возвращает 0
// --------------------------------------------------------------

long int _export WINAPI medChoiceSquareImage
                       (HMAP hmap, TASKPARM *taskparm,
                        HOBJ object, HSELECT hselect,
                        char *name);

// --------------------------------------------------------------
//  Выбрать графический точечный объект
//  hmap - идентификатор открытой векторной карты
//  hobj - идентификатор объекта
//  hselect - фильтр
//           (если hselect == 0 - фильтр не используется)
//            Если hselect != 0 и в hselect установлена
//            карта, то диалог работает по одной карте.
//            Если в hselect карта не установлена, диалог
//            работает по всем картам документа.
// name - заголовок диалога
// При нормальном завершении внутренний код объекта равен 0
// при ошибке или отказе возвращает 0
// --------------------------------------------------------------

long int _export WINAPI medChoicePointImage
                       (HMAP hmap, TASKPARM *taskparm,
                        HOBJ object, HSELECT hselect,
                        char *name);

// --------------------------------------------------------------
//  Выбрать графический объект типа ПОДПИСЬ
// hmap - идентификатор открытой векторной карты
// hobj - идентификатор объекта
// hselect - фильтр
// (если hselect == 0 - фильтр не используется)
//           (если hselect == 0 - фильтр не используется)
//            Если hselect != 0 и в hselect установлена
//            карта, то диалог работает по одной карте.
//            Если в hselect карта не установлена, диалог
//            работает по всем картам документа.
// name - заголовок диалога
// При нормальном завершении внутренний код объекта равен 0
// при ошибке или отказе возвращает 0
// --------------------------------------------------------------

long int _export WINAPI medChoiceTitleImage(HMAP hmap,
                                            TASKPARM *taskparm,
                                            HOBJ object,
                                            HSELECT hselect,
                                            char *name);


// **************************************************************
// ФУНКЦИИ РАБОТЫ С РЕДАКТОРОМ КЛАССИФИКАТОРА
// **************************************************************

// --------------------------------------------------------------------
//  Вызов диалога редактирования классификатора
//  hmap - идентификатор открытой векторной карты
//  Структура TASKPARM описана в maptype.h
// --------------------------------------------------------------------

long int _export WINAPI CallMapFunction(long int hmap, TASKPARM * parm);


// --------------------------------------------------------------------
//  Вызов диалога редактирования классификатора с указанием текущей карты,
//  закладки и редактируемого объекта
//  hmap - идентификатор открытой векторной карты
//  Структура TASKPARM описана в maptype.h
//  mapnumber - номер карты (при значениях < 0 выбирается первая)
//  layernumber - номер слоя (при значениях > 0 текущая закладка слои)
//  objectnumber - порядковый номер редактируемого объекта (с 1)
//  При наличии неотрицательных значение объекта и слоя приоритет за объектом,
//  далее таблица слоев.
//  Если оба последних параметра отрицательные, текущая закладка - "Общие данные"
// --------------------------------------------------------------------

long int _export WINAPI rscEditForObject(long int hmap, TASKPARM * parm,
                                         long int mapnumber,
                                         long int layernumber,
                                         long int objectnumber);


// --------------------------------------------------------------------
//  Вызов диалога редактирования классификатора с указанием текущей карты,
//  hmap - идентификатор открытой векторной карты
//  Структура TASKPARM описана в maptype.h
//  Текущая закладка - "Шрифты"
// --------------------------------------------------------------------

long int _export WINAPI rscEditForFont(long int hmap, TASKPARM * parm);

// --------------------------------------------------------------------
//  Вызов диалога создания классификатора с последующим редактированием,
//  name - полное имя с путем
//  Структура TASKPARM описана в maptype.h
// --------------------------------------------------------------------

long int _export WINAPI rscCreate(char * name, TASKPARM * parm);

// --------------------------------------------------------------------
//  Вызов диалога редактирования классификатора
//  name - полное имя с путем
//  Структура TASKPARM описана в maptype.h
// --------------------------------------------------------------------

long int _export WINAPI rscOpen(char * name, TASKPARM * parm);

// **************************************************************
//  ФУНКЦИИ РАБОТЫ С ПАСПОРТОМ КАРТЫ                                
// **************************************************************

// --------------------------------------------------------------
// Редактирование паспорта
// hmap     - идентификатор открытой карты,
// mapname  - указатель на строку длиной 260 символов,
//            содержащую имя карты (файла паспорта)
// parm     - структура параметров для диалога (см. maptype.h)
// При ошибке возвращает ноль
// --------------------------------------------------------------

int _export WINAPI MapPaspEdit(long int hmap, char *mapname, TASKPARM * parm);

// --------------------------------------------------------------
// Создание плана
// hmap     - идентификатор открытой карты,
// mapname  - указатель на строку длиной 260 символов,
//            содержащую имя карты (файла паспорта)
//            После вызова функции значение строки может измениться
// parm     - структура параметров для диалога (см. maptype.h)
// При ошибке возвращает ноль
// --------------------------------------------------------------

int _export WINAPI MapPaspPlan(char *mapname, TASKPARM * parm);

// --------------------------------------------------------------
// Создание пользовательской карты
// hmap     - идентификатор открытой карты,
// mapname  - указатель на строку длиной 260 символов,
//            содержащую имя карты (файла паспорта)
//            После вызова функции значение строки может измениться
// parm     - структура параметров для диалога (см. maptype.h)
// При ошибке возвращает ноль
// --------------------------------------------------------------

int _export WINAPI MapPaspSit(char *mapname, TASKPARM * parm);

// --------------------------------------------------------------
// Создание обстановки и добавление пользовательской карты
// в документ с запросом имени файла
// hmap     - идентификатор открытой карты,
// mapname  - указатель на строку длиной 260 символов,
//            содержащую имя карты (файла паспорта)
//            После вызова функции значение строки может измениться
// path     - директория в которой будет предложено создать файл
//            (пользователь может выбрать другую)
// parm     - структура параметров для диалога (см. maptype.h)
// При ошибке возвращает ноль
// --------------------------------------------------------------

int _export WINAPI  MapPaspSitDoc(long int hmap, char *mapname, char * path,
                                  TASKPARM * parm);

// --------------------------------------------------------------
// Создание обстановки и добавление пользовательской карты
// в документ без запроса имени файла
// hmap     - идентификатор открытой карты,
// mapname  - указатель на строку длиной 260 символов,
//            содержащую имя карты (файла паспорта)
//            После вызова функции значение строки может измениться
// parm     - структура параметров для диалога (см. maptype.h)
// При ошибке возвращает ноль
// --------------------------------------------------------------

int _export WINAPI  MapPaspSitDocByName(long int hmap, char *mapname, TASKPARM * parm);

// --------------------------------------------------------------
// Создание пользовательской карты
// mapname  - указатель на строку длиной 260 символов,
//            содержащую имя карты (файла паспорта)
//            После вызова функции значение строки может измениться
// rscname  - имя файла классификатора (Rsc)
// areaname - имя района
// parm     - структура параметров для диалога (см. maptype.h)
// При ошибке или отказе от ввода возвращает ноль
// --------------------------------------------------------------

int _export WINAPI  MapPaspSitCreate(char * mapname, char *rscname,
                                     char * areaname, TASKPARM * parm);

}
#endif   // TEST


} // extern "C"

#endif
