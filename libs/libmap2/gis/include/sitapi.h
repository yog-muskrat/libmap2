
#ifndef SITAPI_H
#define SITAPI_H

#ifndef MAPGDI_H
  #include "mapgdi.h"    // Параметры функций визуализации
#endif

#ifndef MAPCREAT_H
  #include "mapcreat.h"  
#endif

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++ ОПИСАНИЕ ФУНКЦИЙ ДОСТУПА К ПОЛЬЗОВАТЕЛЬСКОЙ КАРТЕ +++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#ifdef __cplusplus
extern "C"
{
#endif
  /*********************************************************
  *                                                        *
  *          ОТКРЫТЬ/ЗАКРЫТЬ ДОСТУП К ДАННЫМ КАРТЫ         *
  *                                                        *
  *********************************************************/


  // Открыть пользовательскую карту в заданном районе работ
  // (добавить в цепочку пользовательских карт (в обстановку))
  // Возвращает идентификатор открытой пользовательской карты
  // hMap     - идентификатор открытой карты
  // sitename - имя открываемого файла пользовательской карты
  // mode     - режим чтения/записи (GENERIC_READ, GENERIC_WRITE 
  //            или 0) GENERIC_READ - все данные только на чтение
  // При ошибке возвращает ноль

_MAPIMP HSITE _MAPAPI mapOpenSiteForMap(HMAP hMap,
                                  const char * sitename,
                                  long int mode);

_MAPIMP HSITE _MAPAPI mapOpenSiteForMapUn(HMAP hMap,
                                          const WCHAR * sitename,
                                          long int mode);

  // Закрыть пользовательскую карту в заданном районе работ
  // hMap - идентификатор открытой карты
  // hSite - идентификатор открытой пользовательской карты
  // Если hSite == 0, закрываются все данные обстановки
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapCloseSiteForMap(HMAP hMap,
                                            HSITE hSite);


  // Закрыть пользовательскую карту в заданном районе работ
  // hMap - идентификатор открытой карты
  // name - имя паспорта пользовательской карты
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapCloseSiteForMapByName(HMAP hMap,
                                            const char * name);


  // Удалить пользовательскую карту (все файлы данных)
  // hMap - идентификатор открытой карты
  // number - номер пользовательской карты в цепочке
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapDeleteSite(HMAP hMap, long int number);


  // Удалить пользовательскую карту (все файлы данных)
  // name - полное имя файла паспорта карты
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapDeleteSiteByName(const char * name);


  // Удалить все объекты пользовательской карты
  // hMap  - идентификатор открытой карты
  // hSite - идентификатор открытой пользовательской карты
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapClearSite(HMAP hMap, HSITE hSite);     

  // Скопировать пользовательскую карту с изменением имен файлов
  // hMap  - идентификатор открытой карты
  // hSite - идентификатор открытой пользовательской карты
  // newname - новое полное имя паспорта карты
  // Имена файлов данных будут иметь такое же имя, как у карты,
  // но свое расширение
  // Если классификатор расположен с картой, он тоже копируется
  // в новую директорию
  // Для удаления старой копии вызовите mapDeleteSite()
  // При ошибке (новое имя не создано) возвращает ноль

_MAPIMP long int _MAPAPI mapCopySite(HMAP hMap, HSITE hSite,
                                     const char * newname);


  // Сохранить текущее состояние карты на диск      
  // hmap - идентификатор основной векторной карты
  // hSite - идентификатор открытой пользовательской карты
  // force - сохранять всегда, если не 0, или только при редактировании
  // При выполнении редактирования карты с отключенным
  // журналом транзакций состояние карты в памяти и
  // на диске может отличаться, в этом случае можно
  // вызвать mapSaveSite

_MAPIMP void _MAPAPI mapSaveSite(HMAP hMap, HSITE hSite, long int force);


  // Запросить количество открытых пользовательских карт
  // hMap - идентификатор открытой карты
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetSiteCount(HMAP hMap);


  // Определить номер пользовательской карты в цепочке
  // по ее идентификатору
  // hMap  - идентификатор открытой карты
  // hSite - идентификатор открытой пользовательской карты
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetSiteNumber(HMAP hMap,HSITE hSite);


  // Определить имя файла пользовательской карты
  // по ее идентификатору
  // hMap  - идентификатор открытой карты
  // hSite - идентификатор открытой пользовательской карты
  // При ошибке возвращает пустую строку

_MAPIMP const char * _MAPAPI mapGetSiteFileName(HMAP hMap,HSITE hSite);

  // Определить имя файла пользовательской карты          
  // по ее идентификатору
  // hMap  - идентификатор открытой карты
  // hSite - идентификатор открытой пользовательской карты
  // name  - строка для размещения результата
  // size  - размер строки
  // При ошибке возвращает пустую строку

_MAPIMP long int _MAPAPI mapGetSiteFileNameEx(HMAP hMap,HSITE hSite,char * name, int size);

  // Определить имя файла пользовательской карты          
  // в кодировке UNICODE по ее идентификатору
  // При ошибке возвращает пустую строку

_MAPIMP long int _MAPAPI mapGetSiteFileNameUn(HMAP hMap,HSITE hSite,WCHAR * name, int size);

  // Определить идентификатор открытой пользовательской карты
  // по ее номеру в цепочке
  // hMap   - идентификатор открытой карты
  // number - номер пользовательской карты в цепочке
  // Если number == 0, возвращается идентификатор фоновой
  // (базовой) карты, равный hMap (он может применяться вместо HSITE)!
  // При ошибке возвращает ноль

_MAPIMP HSITE _MAPAPI mapGetSiteIdent(HMAP hMap,long int number);


  // Определить идентификатор открытой пользовательской карты
  // по имени файла паспорта
  // hMap - идентификатор открытой карты
  // name - имя файла паспорта пользовательской карты
  // При ошибке возвращает ноль

_MAPIMP HSITE _MAPAPI mapGetSiteIdentByName(HMAP hMap, const char * name);

  // Запросить активную пользовательскую карту              
  // (устанавливается приложением по своему усмотрению)
  // hMap - идентификатор открытой карты
  // При ошибке возвращает ноль

_MAPIMP HSITE _MAPAPI mapGetActiveSite(HMAP hMap);

  // Установить активную пользовательскую карту
  // (устанавливается приложением по своему усмотрению)
  // hMap - идентификатор открытой карты
  // hSite - идентификатор открытой пользовательской карты
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetActiveSite(HMAP hMap,HSITE hSite);

  // Запросить номер состояния пользовательской карты
  // по ее идентификатору
  // hMap  - идентификатор открытой карты
  // hSite - идентификатор открытой пользовательской карты
  // (для фоновой (основной) карты hSite = hMap)
  // Номер состояния меняется при любой операции редактирования
  // карты (увеличивается на 1)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetSiteMode(HMAP hMap,HSITE hSite);


  // Запросить - может ли карта редактироваться
  // hMap  - идентификатор открытой карты
  // hSite - идентификатор открытой пользовательской карты
  // Если нет - возвращает ноль

_MAPIMP long int _MAPAPI mapGetSiteEditFlag(HMAP hMap,HSITE hSite);


  // Установить флаг редактирования карты (0 - не редактировать)
  // hMap  - идентификатор открытой карты
  // hSite - идентификатор открытой пользовательской карты
  // flag  - признак возможности редактирования
  // Возвращает новое значение флага

_MAPIMP long int _MAPAPI mapSetSiteEditFlag(HMAP hMap, HSITE hSite, long int flag);  


  // Запросить - отображается ли карта
  // hMap  - идентификатор открытой карты
  // hSite - идентификатор открытой пользовательской карты
  // Если нет - возвращает ноль

_MAPIMP long int _MAPAPI mapGetSiteViewFlag(HMAP hMap,HSITE hSite);


  // Установить флаг отображения карты (0 - не отображать)
  // hMap  - идентификатор открытой карты
  // hSite - идентификатор открытой пользовательской карты
  // flag  - флаг отображения карты
  // Возвращает новое значение флага

_MAPIMP long int _MAPAPI mapSetSiteViewFlag(HMAP hMap, HSITE hSite, long int flag);


  // Установить порядок отображения карты   
  // hMap  - идентификатор открытой карты
  // number - номер пользовательской карты в цепочке
  // order  - флаг(0 - под основной картой, 1 - над основной картой)
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapSetSiteViewOrder(HMAP hMap, long int number,
                                             long int order);


  // Запросить порядок отображения карты    
  // hMap  - идентификатор открытой карты
  // number - номер пользовательской карты в цепочке
  // Dозвращает флаг(0 - под основной картой, 1 - над основной картой)
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapGetSiteViewOrder(HMAP hMap, long int number);


  // Поменять очередность отображения карт (sit) в цепочке  
  //   oldNumber - номер файла в цепочке
  //   newNumber - устанавливаемый номер файла в цепочке
  //  При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapChangeOrderSiteShow(HMAP hMap, long int oldNumber,
                                                           long int newNumber);

  // Запросить значения масштаба нижней и верхней границ видимости карты
  // hMap  - идентификатор открытой карты
  // number - номер пользовательской карты в цепочке(если number == 0, базовая карта)
  // По адресу bottomScale записывается знаменатель масштаба нижней границы видимости карты
  // По адресу topScale записывается знаменатель масштаба верхней границы видимости карты
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapGetSiteRangeScaleVisible(HMAP hMap,long int number,
                           long int *bottomScale, long int *topScale);  


  // Установить значения масштаба нижней и верхней границ видимости карты
  // hMap  - идентификатор открытой карты
  // number - номер пользовательской карты в цепочке(если number == 0, базовая карта)
  // bottomScale   - знаменатель масштаба нижней границы видимости карты
  // topScale   - знаменатель масштаба верхней границы видимости карты
  //              bottomScale <= topScale, иначе возвращает 0
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapSetSiteRangeScaleVisible(HMAP hMap,long int number,
                           long int bottomScale, long int topScale);   


  // Запросить длину описания паспорта карты в виде записи
  // hMap  - идентификатор открытой основной карты
  // hSite - идентификатор открытой пользовательской карты
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMapPassportRecordLength(HMAP hMap,
                                                       HSITE hSite);


  // Запросить описание паспорта карты в виде записи
  // (для передачи в другой процесс,на другой компьютер ...)
  // Передается описание только первого листа карты
  // (у пользовательской карты он всегда один)
  // Размер буфера должен быть не менее, чем указано
  // в mapGetMapPassportRecordLength()
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // buffer - указатель на запись для описания паспорта карты
  // size   - размер записи
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMapPassportRecord(HMAP hMap,
                                                 HSITE hSite,
                                                 char * buffer,
                                                 long int size);


  // Создать карту по записи паспорта карты
  // Запись создается при вызове mapGetMapPassportRecord()
  // hMap  - идентификатор открытой основной карты
  // mapname - имя файла паспорта (*.map или *.sit) !
  // rscname - имя файла классификатора (*.rsc) !
  // Если hMap = 0, возвращает идентификатор
  // открытой карты HMAP (см. mapCreateMap() в mapapi.h)
  // При ошибке возвращает ноль

_MAPIMP HSITE _MAPAPI mapPutMapPassportRecord(HMAP hMap,
                                              const char * mapname,
                                              const char * rscname,
                                              char * buffer,
                                              long int size);


#ifndef HIDEFORMAT
  // Cоздать пустой объект пользовательской карты (обстановки)
  // (создание подобъекта - см. редактирование метрики объекта)
  // По умолчанию метрика 2-ух мерная
  // hMap  - идентификатор открытой основной карты
  // hSite - идентификатор открытой пользовательской карты
  //         в которой будет расположен создаваемый объект
  // text  - признак метрики с текстом (объекты типа "подпись")
  // kind  - формат метрики
  // После вызова функций типа What...() и Seek...() все параметры
  // полученного объекта могут измениться (text,kind и т.п.)
  // Для каждого полученного и больше не используемого
  // идентификатора HOBJ необходим вызов функции FreeObject()
  // При ошибке возвращает ноль

_MAPIMP HOBJ _MAPAPI mapCreateSiteObject(HMAP hMap,HSITE hSite,
#ifdef __cplusplus  
                                   long int kind = IDDOUBLE2, 
                                   long int text = 0);
#else
                                   long int kind,
                                   long int text);
#endif
#endif


  // Определить идентификатор открытой пользовательской карты
  // для заданного объекта
  // hMap  - идентификатор открытой основной карты
  // hObj  - идентификатор объекта пользовательской карты
  // При ошибке возвращает ноль

_MAPIMP HSITE _MAPAPI mapGetObjectSiteIdent(HMAP hMap,HOBJ hObj);


  // Перенести объект на другую карту
  // При переносе объекта выполняется перекодировка
  // для нового классификатора, если код не найден -
  // он устанавливается в ноль, прежнее значение
  // сохраняется в семантике (код 32800).
  // (для замены вызывается mapRegisterObject())
  // Метрика преобразуется в соответствии с типом карты
  // hSite - идентификатор открытой пользовательской карты
  // hObj  - идентификатор объекта пользовательской карты
  // hMap  - идентификатор открытой основной карты
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetObjectMap(HOBJ info, HSITE hSite);
_MAPIMP long int _MAPAPI mapChangeObjectMap(HOBJ hObj, HMAP hMap, HSITE hSite);


  // Обновить размеры пользовательской карты и габариты района !
  // Если параметр dfarme равен 0, пересчитывает только
  // габариты района (mapGetPictureSize,...Width,...Height - могут
  // вернуть другие значения)
  // После вызова этой функции необходимо согласовать параметры
  // скроллинга подобно масштабированию карты
  // Данная функция необходима при редактировании карты типа Site,
  // открытой в качестве основной карты (mapCreateSite), когда
  // габариты карты меняются. Заранее могут быть заданы расширенные
  // габариты (сразу после создания или позже).
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // dframe - координаты прямоугольной области района  
  // place  - система координат
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetSiteBorder(HMAP hMap, HSITE hSite,   
#ifdef __cplusplus  
                                          DFRAME * dframe, int place);
#else
                                          DFRAME * dframe, int place);
#endif



  /*********************************************************
  *                                                        *
  *   ФУНКЦИИ ОТОБРАЖЕНИЯ И ПЕЧАТИ ПОЛЬЗОВАТЕЛЬСКОЙ КАРТЫ  *
  *  ПАРАМЕТРЫ КОНТЕКСТА ПОДГОТОВЛЕНЫ (HDC) И УСТАНОВЛЕНО  *
  *  СМЕЩЕНИЕ НА ОБЛАСТЬ ВЫВОДА В ОКНЕ ::SetViewportOrgEx()*
  *                                                        *
  *********************************************************/

  // Отобразить образец вида объекта по номеру записи
  // в классификаторе объектов (incode)
  // (0 - фон не стирать, !=0 - очистить фрагмент цветом фона)
  // rect  - координаты фрагмента карты (Draw)
  // в изображении (Picture).
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // hDC    - идентификатор контекста устройства вывода
  // rect   - область прорисовки
  // Используется в диалогах выбора вида объекта
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapPaintExampleSiteObject(HMAP hMap,HSITE hSite,
                                                   HDC hdc,
                                                   RECT * rect,
                                                   long int incode);



  /*********************************************************
  *                                                        *
  * ФУНКЦИИ УПРАВЛЕНИЯ ОТОБРАЖЕНИЕМ ПОЛЬЗОВАТЕЛЬСКОЙ КАРТЫ *
  *                                                        *
  *********************************************************/

  // Запросить состав отображаемых объектов пользовательской карты
  // (для фоновой : hSite = hMap)
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // select - идентификатор контекста поиска/отображения
  // в который будут помещены текущие условия отображения
  // см. mapCreateMapSelectContext(...)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetSiteViewSelect(HMAP hmap,HSITE hSite,
                                              HSELECT select);


  // Установить состав отображаемых объектов
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // select - идентификатор контекста поиска/отображения

_MAPIMP void _MAPAPI mapSetSiteViewSelect(HMAP hmap,HSITE hSite,
                                          HSELECT select);


  // Запросить яркость карты (от -16 до +16)
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты

_MAPIMP long int _MAPAPI mapGetSiteBright(HMAP hmap, HSITE hSite);


  // Установить яркость карты (от -16 до +16)
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты

_MAPIMP long int _MAPAPI mapSetSiteBright(HMAP hmap, HSITE hSite, long int bright);


  // Запросить контрастность  (от -16 до +16)
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты

_MAPIMP long int _MAPAPI mapGetSiteContrast(HMAP hmap, HSITE hSite);


  // Установить контрастность (от -16 до +16)
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты

_MAPIMP long int _MAPAPI mapSetSiteContrast(HMAP hmap, HSITE hSite, long int contrast);

 // Запросить значение прозрачности пользовательской карты(от 0 до 100)
 // hMap   - идентификатор открытой основной карты
 // hSite  - идентификатор открытой пользовательской карты

_MAPIMP long int _MAPAPI mapGetSiteTranslucency(HMAP hmap, HSITE hSite);


  // Установить значение прозрачности пользовательской карты(от 0 до 100)
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // translucency - значение прозрачности

_MAPIMP long int _MAPAPI mapSetSiteTranslucency(HMAP hmap, HSITE hSite, long int translucency);


  // Запросить число цветов в текущей палитре карты
  // Обычно 16 или 32
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetSiteColorsCount(HMAP hmap, HSITE hSite);


  // Запросить текущую палитру карты (с учетом яркости/контрастности)
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // colors - указатель на структуру COLORREF первого цвета в палитре
  // count  - количество цветов (не более 256)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetSitePalette(HMAP hmap, HSITE hSite,             
                                           COLORREF * colors, long int count);


  // Запросить текущую палитру карты (без учета яркости/контрастности)
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // colors - указатель на структуру COLORREF первого цвета в палитре
  // count  - количество цветов (не более 256)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetSiteColors(HMAP hmap, HSITE hSite,
                                          COLORREF * colors, long int count);


  // Установить текущую палитру карты
  // Если colors равно 0, устанавливается палитра из классификатора
  // (палитра классификатора не меняется, изменения будут временными)
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // colors - указатель на структуру COLORREF первого цвета в палитре
  // count  - количество цветов (не более 256)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetSiteColors(HMAP hmap, HSITE hSite,
                                          COLORREF * colors, long int count);



  /*********************************************************
  *                                                        *
  *      ФУНКЦИИ ПОИСКА ОБ'ЕКТОВ ПОЛЬЗОВАТЕЛЬСКОЙ КАРТЫ    *
  *                                                        *
  *     ПОИСК МОЖЕТ ВЫПОЛНЯТЬСЯ В СИСТЕМАХ КООРДИНАТ :     *
  *       ИЗОБРАЖЕНИЯ (Picture)  - в пикселах,             *
  *       КАРТЫ,ИЛИ РАЙОНА (Map) - в дискретах,            *
  *       В ПРЯМОУГОЛЬНОЙ НА                               *
  *       МЕСТНОСТИ (Plane)      - в метрах,               *
  *       В ГЕОДЕЗИЧЕСКОЙ НА                               *
  *       МЕСТНОСТИ (Geo)        - в радианах.             *
  *                                                        *
  *********************************************************/

  // Запросить условия поиска активных объектов по пользовательской карте
  // (для фоновой hSite = hMap)                        
  // Активные объекты - доступны для интерактивного выбора (оператором)
  // Выбор выполняется функцией mapWhatActiveObject()
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // select - идентификатор контекста поиска/отображения
  //          в который будут помещены текущие условия поиска
  //          см. mapCreateMapSelectContext(...)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetSiteActiveSelect(HMAP hMap,HSITE hSite,
                                                HSELECT select);


  // Установить условия поиска активных объектов для пользовательской карты
  // (для фоновой hSite = hMap)
  // Активные объекты - доступны для интерактивного выбора (оператором)
  // Выбор выполняется функцией mapWhatActiveObject()
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // select - идентификатор контекста поиска,
  //          который содержит устанавливаемые условия поиска
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetSiteActiveSelect(HMAP hMap,HSITE hSite,
                                                HSELECT select);

  // Запросить условия поиска объектов по пользовательской карте
  // (для фоновой hSite = hMap)
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // select - идентификатор контекста поиска/отображения
  //          в который будут помещены текущие условия поиска
  //          см. mapCreateMapSelectContext(...)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetSiteSeekSelect(HMAP hMap,HSITE hSite,
                                              HSELECT select);


  // Установить условия поиска объектов для пользовательской карты
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // select - идентификатор контекста поиска,
  //          который содержит устанавливаемые условия поиска
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetSiteSeekSelect(HMAP hMap,HSITE hSite,
                                              HSELECT select);


  // Поиск объекта по уникальному номеру на карте
  // info     - идентификатор существующего объекта,
  // созданного функцией CreateObject() или CreateSiteObject(),
  // в котором будет размещен результат поиска.
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // key   - идентификатор объекта на карте
  // При ошибке возвращает ноль

_MAPIMP HOBJ _MAPAPI mapSeekSiteObject(HMAP hMap,HSITE hSite,HOBJ info,
                                       long int key);


  // Поиск объектов по заданным условиям среди всех объектов
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // info     - идентификатор существующего объекта,
  // созданного функцией mapCreateObject() или mapCreateSiteObject(),
  // в котором будет размещен результат поиска,
  // select - условия поиска объекта,
  // flag - порядок поиска объектов (WO_FIRST, WO_NEXT...)
  // Если объект не найден - возвращает ноль

_MAPIMP HOBJ _MAPAPI mapSeekSiteSelectObject(HMAP hMap,HSITE hSite,
                                             HOBJ info,HSELECT select,
                                             long int flag);


  // Запросить число объектов, удовлетворяющих условиям поиска
  // для функции mapSeekSiteSelectObject (выполняет внутренний перебор объектов)
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // select - условия поиска объекта
  // При ошибке или отсутствии объектов возвращает ноль

_MAPIMP long int _MAPAPI mapSeekSiteSelectCount(HMAP hMap,HSITE hSite,HSELECT select);


  // Поиск объектов по заданным условиям среди отображаемых объектов
  // (пересечение заданных условий с условиями отображения)
  // hMap     - идентификатор открытой основной карты
  // hSite    - идентификатор открытой пользовательской карты
  // info     - идентификатор существующего объекта,
  // созданного функцией mapCreateObject() или mapCreateSiteObject(),
  // в котором будет размещен результат поиска,
  // select - условия поиска объекта,
  // flag - порядок поиска объектов (WO_FIRST, WO_NEXT...)
  // Если объект не найден - возвращает ноль

_MAPIMP HOBJ _MAPAPI mapSeekSiteViewObject(HMAP hMap,HSITE hSite,HOBJ info,
                                           HSELECT select,
                                           long int flag);


  // Запросить число объектов, удовлетворяющих условиям поиска
  // для функции mapSeekSiteViewObject (выполняет внутренний перебор объектов)
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // select - условия поиска объекта
  // При ошибке или отсутствии объектов возвращает ноль

_MAPIMP long int _MAPAPI mapSeekSiteViewCount(HMAP hMap,HSITE hSite,HSELECT select);



  /*********************************************************
  *                                                        *
  *   ФУНКЦИИ ЗАПРОСА ИНФОРМАЦИИ О ПОЛЬЗОВАТЕЛЬСКОЙ КАРТЕ  *
  *                                                        *
  *********************************************************/

  // Запросить базовый масштаб карты
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetSiteScale(HMAP hMap,HSITE hSite);

  // Запросить название карты
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // При ошибке возвращает пустую строку

_MAPIMP const char * _MAPAPI mapGetSiteName(HMAP hMap,HSITE hSite);

  // Запросить название карты в кодировке UNICODE
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // name   - адрес строки для размещения результата
  // size   - размер строки для размещения результата
  // При ошибке возвращает пустую строку

_MAPIMP long int _MAPAPI mapGetSiteNameUn(HMAP hMap,HSITE hSite,WCHAR * name, long int size);

  // Запросить тип карты (см. maptype.h)
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetSiteType(HMAP hMap,HSITE hSite);


  // Запросить прямоугольные координаты габаритов карты
  // в метрах (система координат PLANE)
  // X - снизу вверх, Y - слева направо
  // т.1 - нижний левый угол,
  // т.2 - верхний правый
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты

_MAPIMP double _MAPAPI mapGetSiteX1(HMAP hMap,HSITE hSite);
_MAPIMP double _MAPAPI mapGetSiteY1(HMAP hMap,HSITE hSite);
_MAPIMP double _MAPAPI mapGetSiteX2(HMAP hMap,HSITE hSite);
_MAPIMP double _MAPAPI mapGetSiteY2(HMAP hMap,HSITE hSite);


  // Запросить количество объектов в пользовательской карте
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetSiteObjectCount(HMAP hMap,HSITE hSite);


  // Запросить паспортные данные векторной карты
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // Структуры MAPREGISTEREX и LISTREGISTER описаны в mapcreat.h
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetSiteInfoEx(HMAP hMap,HSITE hSite,
                                    MAPREGISTEREX * mapreg,
                                    LISTREGISTER * listreg,
                                    long int sheetnumber);


  // Запросить сведения о реально имеющихся объектах на карте   
  // (для фоновой hSite = hMap)
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // select - идентификатор контекста поиска
  // в который будут помещены условия, соответствующие имеющимся объектам
  // (слои, объекты, локализации - доступ см. в seekapi.h)
  // см. mapCreateMapSelectContext(...)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetSiteUsedSelect(HMAP hMap,HSITE hSite,
                                              HSELECT select);



  /*********************************************************
  *                                                        *
  *       ФУНКЦИИ ЗАПРОСА ИНФОРМАЦИИ О СЛОЯХ КАРТЫ         *
  *                                                        *
  *********************************************************/

  // Запросить число слоев на карте
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetSiteLayerCount(HMAP hMap,HSITE hSite);


  // Запросить название слоя по его номеру
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // number - номер слоя 
  // Номер первого слоя 0
  // При ошибке возвращает пустую строку

_MAPIMP const char * _MAPAPI mapGetSiteLayerName(HMAP hMap,HSITE hSite,
                                                 long int number);


  /*********************************************************
  *                                                        *
  * ФУНКЦИИ ЗАПРОСА ИНФОРМАЦИИ ИЗ КЛАССИФИКАТОРА ОБ'ЕКТОВ  *
  *                                                        *
  *********************************************************/

  // Запросить число объектов описанных в классификаторе
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSiteRscObjectCount(HMAP hMap,HSITE hSite);


  // Запросить число объектов описанных в классификаторе
  // в заданном слое
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // layer  - номер слоя
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSiteRscObjectCountInLayer(HMAP hMap,
                                         HSITE hSite,long int layer);


  // Запросить название объекта по порядковому номеру
  // в заданном слое
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // layer  - номер слоя
  // number - номер объекта в слое
  // При ошибке возвращает ноль или пустую строку

_MAPIMP const char * _MAPAPI mapSiteRscObjectNameInLayer(HMAP hMap,
                                               HSITE hSite,
                                               long int layer,
                                               long int number);


  // Запросить классификационный код объекта
  // по порядковому номеру в заданном слое
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // layer  - номер слоя
  // number - номер объекта в слое
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSiteRscObjectExcodeInLayer(HMAP hMap,
                                             HSITE hSite,
                                             long int layer,
                                             long int number);


  // Запросить код локализации объекта
  // по порядковому номеру в заданном слое
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // layer  - номер слоя
  // number - номер объекта в слое
  // При ошибке возвращает ноль (ноль допустим)

_MAPIMP long int  _MAPAPI mapSiteRscObjectLocalInLayer(HMAP hMap,
                                            HSITE hSite,
                                            long int layer,
                                            long int number);


  // Запросить внутренний код (индекс) объекта
  // по порядковому номеру в заданном слое
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // layer  - номер слоя
  // number - номер объекта в слое
  // При ошибке возвращает ноль

_MAPIMP long int  _MAPAPI mapSiteRscObjectCodeInLayer(HMAP hMap,
                                                HSITE hSite,
                                                long int layer,
                                                long int number);


  // Запросить внутренний код (индекс) объекта
  // по внешнему коду и локализации
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // excode - внешний код объекта
  // local  - локализация объекта
  // При ошибке возвращает ноль

_MAPIMP long int  _MAPAPI mapSiteRscObjectCode(HMAP hMap,
                                         HSITE hSite,
                                         long int excode,
                                         long int local);



 // ************************************************************
 //                                                            *
 //         РЕДАКТИРОВАНИЕ ПОЛЬЗОВАТЕЛЬСКОГО ОБ'ЕКТА           *
 // (доступны все функции редактирования объекта базовой карты)*
 //                                                            *
 // ************************************************************

 // Запросить (найти) последовательный номер объекта
 // hMap   - идентификатор открытой основной карты
 // hSite  - идентификатор открытой пользовательской карты
 // key    - уникальный код объекта
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetSiteObjectNumberByKey(HMAP hmap,HSITE hSite,
                                                     long int key);


 // Удалить объект карты по его последовательному номеру
 // Для отмены удаления применяются mapUndeleteObjectByNumber и
 // mapUndeleteObject
 // hMap   - идентификатор открытой основной карты
 // hSite  - идентификатор открытой пользовательской карты
 // object - последовательный номер объекта
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapDeleteSiteObjectNumber(HMAP hmap,HSITE hSite,
                                                   long int object);
_MAPIMP long int _MAPAPI mapDeleteSiteObjectByNumber(HMAP hmap,HSITE hSite,
                                                     long int object);



 /*********************************************************
 *                                                        *
 *    СОЗДАНИЕ КОНТЕКСТА ПОИСКА/ОТОБРАЖЕНИЯ               *
 *                                                        *
 *********************************************************/

  // Создать контекст (описание условий) поиска/отображения
  // объектов карты
  // В состав условий отбора объектов входят : слой,
  // локализация, диапазон номеров объектов, характеристики
  // (семантика) объекта, область расположения (метрика) объекта
  // В созданном контексте доступны все объекты карты без исключений
  // Запрашивается минимум 10 Кб памти,
  // если заданы условия поиска по метрике и семантике - до 300 Кб
  // Каждый созданный контекст должен быть удален, когда
  // он больше не используется
  // hMap   - идентификатор открытой основной карты
  // hSite  - идентификатор открытой пользовательской карты
  // Параметры hMap,hSite необходимы,
  // когда устанавливаются условия поиска/отображения по семантике,
  // иначе - можно применять mapCreateMapSelectContext()
  // При ошибке возвращает ноль

_MAPIMP HSELECT _MAPAPI mapCreateSiteSelectContext(HMAP hmap,HSITE hSite);



  /*********************************************************
  *                                                        *
  *       ФУНКЦИИ СОЗДАНИЯ ЗАРАМОЧНОГО ОФОРМЛЕНИЯ          *
  *                                                        *
  *********************************************************/

  // Добавить зарамочное оформление в пользовательскую карту
  // hmap - идентификатор основной векторной карты
  // hsite - идентификатор пользовательской карты
  // frmname - полное имя файла шаблона зарамочного оформления (*.frm)
  // frame - габариты внутреннего контура зарамочного оформления в метрах
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapAddMarginalRepresentationSite(HMAP hmap, HSITE hsite,
                                                          const char *frmname,
                                                          DFRAME *frame);


 // Добавить зарамочное оформление в пользовательскую карту
 // hmap - идентификатор основной векторной карты
 // hsite - идентификатор пользовательской карты
 // frmname - полное имя файла шаблона зарамочного оформления (*.frm)
 // frame - габариты внутреннего контура зарамочного оформления в метрах
 // angle - угол поворота (если есть)
 // center - центр поворота (если есть угол)
 // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapAddMarginalRepresentationSiteEx(HMAP hmap, HSITE hsite,
                                                     const char *frmname,
                                                     DFRAME *frame,
                                                     double angle,
                                                     DOUBLEPOINT *center);


  // Нанести линию заданного кода на пользовательскую карту
  // hmap - идентификатор открытой векторной карты
  // hsite - идентификатор пользовательской карты
  // excode - код линии
  // x1,y1,x2,y2 - координаты первой и второй точек в метрах
  // angle - угол поворота (если есть)
  // center - центр поворота (если есть угол)
  // При ошибке возвращает ноль

_MAPIMP  long int _MAPAPI mapCreateLineSite(HMAP hmap, HSITE hsite,
                                     long int excode,
                                     double x1,double y1,
                                     double x2,double y2,
                                     double angle, DOUBLEPOINT *center);


  // Создать рамку для зарамочного оформления на пользовательской карте
  // hmap - идентификатор открытой векторной карты
  // hsite - идентификатор пользовательской карты
  // framecode - код внутренней рамки
  // fillcode - код заполнения
  // linecode - код внешней рамки
  // delta - расстояние от внутренней до внешней рамки а м
  // frame - габариты внутренней рамки в м
  // angle - угол поворота (если есть)
  // center - центр поворота (если есть угол)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapCreateFrameFillSite(HMAP hmap, HSITE hsite,
                                          long int framecode,long int fillcode,
                                          long int linecode,
                                          double delta, DFRAME *frame,
                                          double angle, DOUBLEPOINT *center);


  // Нанести текст заданного кода на пользовательскую карту
  // hmap - идентификатор открытой векторной карты
  // hsite - идентификатор пользовательской карты
  // excode - код текста подписи
  // text - текст подписи
  // x1,x2,y1,y2 - координаты первой и второй точек в метрах
  // wide - выравнивание по горизонтали
  //      - UNIA_LEFT  - по левому краю
  //      - UNIA_CENTER - по центру
  //      - UNIA_RIGHT - по правому краю
  // vert - наличие выравнивания по вертикали (0 или 1)
  // angle - угол поворота (если есть)
  // center - центр поворота (если есть угол)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapCreateTitleSite(HMAP hmap, HSITE hsite,
                                      long int excode,
                                      const char *text,
                                      double x1,double y1,double x2,double y2,
                                      long int wide,long int vert,
                                      double angle, DOUBLEPOINT *center);


 // Замена буквы 'я' на спецсимвол перед тем как разобрать строку
 // функцией sscanf
 // string - строка
 // len - длина строки
 // simbol - спецсимвол (если == 0 - то заменяет 'я' на '^')
 // При ошибке возвращает 0, иначе 1

_MAPIMP long int _MAPAPI mapPreSscanf(char *string, int len, char simbol);


 // Замена спецсимвола на 'я' после разбора строки функцией sscanf
 // string - строка
 // len - длина строки
 // simbol - спецсимвол (если == 0 - то заменяет '^' на 'я')
 // При ошибке возвращает 0, иначе 1

_MAPIMP long int _MAPAPI mapPostSscanf(char *string, int len, char simbol);


#ifdef __cplusplus
}       // extern "C"
#endif

#endif  // SITAPI_H
