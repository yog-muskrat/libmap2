
#ifndef MTRAPI_H
#define MTRAPI_H

#ifndef MAPCREAT_H
  #include "mapcreat.h"   
#endif

#ifndef MAPOLD_H
  #include "mapold.h"
#endif

#ifdef WIN32API                      
#define HMESSAGE HWND
#else
#define HMESSAGE MSGHANDLER
#endif
  
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// +++++ ОПИСАНИЕ ФУНКЦИЙ ДОСТУПА К МАТРИЦАМ +++++++++++++++
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#ifdef __cplusplus
extern "C"
{
#endif
  // Открыть матричные данные
  // Возвращает идентификатор открытой матричной карты (TMapAccess*)
  // mtrname - имя открываемого файла 
  // mode - режим чтения/записи (GENERIC_READ, GENERIC_WRITE или 0)
  // GENERIC_READ - все данные только на чтение
  // При ошибке возвращает ноль

_MAPIMP HMAP _MAPAPI mapOpenMtr(const char * mtrname,
#ifdef __cplusplus  
                                long int mode = 0);
#else
                                long int mode);
#endif

  // Открыть матричные данные в заданном районе работ
  // (добавить в цепочку матриц)
  // Возвращает номер файла в цепочке матриц
  // hMap - идентификатор открытой основной векторной карты 
  // mtrname - имя открываемого файла 
  // mode - режим чтения/записи (GENERIC_READ, GENERIC_WRITE или 0)
  // GENERIC_READ - все данные только на чтение
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapOpenMtrForMap(HMAP hMap,
                                          const char * mtrname,
                                          long int mode);


  // Закрыть матричные данные
  // hMap   - идентификатор открытой основной векторной карты 
  // number - номер закрываемой матрицы
  // если number == 0, закрываются все матрицы в окне
  // ЧТОБЫ ОСВОБОДИТЬ ВСЕ РЕСУРСЫ - НУЖНО ВЫЗВАТЬ mapCloseData(hMap)

_MAPIMP void _MAPAPI mapCloseMtr(HMAP hMap,
#ifdef __cplusplus  
                                 long int number = 0);
#else
                                 long int number);
#endif


  // Закрыть матричные данные в заданном районе работ
  // hMap   - идентификатор открытой основной векторной карты 
  // number - номер матричного файла в цепочке
  // Если number == 0, закрываются все матричные данные
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapCloseMtrForMap(HMAP hMap,
                                           long int number);


  // Построение матрицы по векторной карте на заданный участок
  // района работ
  // При ошибке возвращает ноль
  // hMap    - исходная карта для построения матрицы
  // mtrname - полное имя создаваемой матрицы
  // filtername - полное имя фильтра объектов
  //   Вместе с картой может располагаться фильтр объектов -
  //   текстовый файл MTRCREA.IMH, содержащий перечень кодов
  //   объектов, используемых при построении матрицы (см. MAPAPI.DOC)
  // Если filtername равно нулю - фильтр объектов не используется
  // mtrparm - параметры создаваемой матрицы,
  // handle   - идентификатор окна диалога, которому посылаются
  // сообщения о ходе процесса :
  //   0x0581 - сообщение о проценте выполненных работ (в WPARAM),
  //   если процесс должен быть принудительно завершен, в ответ
  //   должно вернуться значение 0x0581.
  // Если handle равно нулю - сообщения не посылаются.

_MAPIMP long int _MAPAPI mapBuildMtw(HMAP hMap,
                                     const char * mtrname,
                                     const char * filtername,
                                     BUILDMTW * mtrparm,
                                     HMESSAGE handle);


 // Построение растра качеств по векторной карте на заданный
 // участок района работ
 // При ошибке возвращает ноль
 // hMap    - исходная карта для построения растра,
 // rstname - полное имя создаваемого растра,
 // filtername - полное имя служебного текстового файла
 //   Вместе с картой должен располагаться фильтр объектов -
 //   служебный текстовый файл MАP2RSW.INI, содержащий перечень кодов
 //   объектов, используемых при построении растра
 // mtrparm - параметры создаваемого растра,
 // handle   - идентификатор окна диалога, которому посылаются
 // сообщения о ходе процесса :
 //   0x0581 - сообщение о проценте выполненных работ (в WPARAM),
 //   если процесс должен быть принудительно завершен, в ответ
 //   должно вернуться значение 0x0581.
 // Если handle равно нулю - сообщения не посылаются.

_MAPIMP long int _MAPAPI mapBuildRsw(HMAP hMap,          
                                     const char * mtrname,
                                     const char * filtername,
                                     BUILDMTW * mtrparm,
                                     HMESSAGE handle);


  /*********************************************************
  *                                                        *
  *           ЗАПРОС ДАННЫХ ИЗ МАТРИЦЫ ВЫСОТ               *
  *                                                        *
  *     КОД ОШИБКИ "ERRORHEIGHT" РАВЕН (-111111.0)         *
  *  (т.е. если значение высоты меньше (-111 км) - ошибка) *
  *                                                        *
  *********************************************************/

  // Запросить описание файла матричных данных
  // hMap - идентификатор открытой основной векторной карты 
  // number - номер файла в цепочке
  // describe - адрес структуры, в которой будет размещено
  // описание матрицы
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtrDescribe(HMAP hMap,long int number,
                                           MTRDESCRIBE * describe);


  // Запросить описание диапазона высот матрицы с номером
  // hMap - идентификатор открытой основной векторной карты 
  // number в цепочке
  // colornumber - номер диапазона высот
  // colordesc - адрес структуры, в которой будет размещено
  // описание диапазона высот
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtrColorDescEx(HMAP hMap,long int number,
                                              long int colornumber,
                                              MTRCOLORDESCEX * colordesc);


  // Запросить имя файла матричных данных
  // hMap - идентификатор открытой основной векторной карты
  // number - номер файла в цепочке
  // При ошибке возвращает ноль

_MAPIMP const char * _MAPAPI mapGetMtrName(HMAP hMap,long int number);

  // Запросить имя файла матричных данных
  // hMap - идентификатор открытой основной векторной карты
  // number - номер файла в цепочке
  // name - адрес строки для размещения результата
  // size - размер строки
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtrNameUn(HMAP hMap,long int number,
                                         WCHAR * name, long int size);

  // Запросить число открытых файлов матричных данных
  // hMap - идентификатор открытой основной векторной карты 
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtrCount(HMAP hMap);


  // Запросить фактические габариты отображаемой матрицы в метрах в районе работ   
  // При отображении матрицы по рамке возвращаются габариты рамки
  // hMap   - идентификатор открытой основной векторной карты
  // number - номер файла в цепочке
  // frame  - адрес структуры, в которой будут размещены габариты матрицы в метрах
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetActualMtrFrame(HMAP hMap,DFRAME *frame, long int number);


  // Запросить привязку матрицы  в метрах в районе работ   
  // number     - номер файла в цепочке
  // location   - координаты юго-западного угла матрицы
  // При ошибке возвращает 0

_MAPIMP  long int _MAPAPI mapGetMtrLocation(HMAP hMap, long int number, DOUBLEPOINT *location);

  // Установить привязку матрицы  в метрах в районе работ   
  // number     - номер файла в цепочке
  // location   - координаты юго-западного угла матрицы
  // При ошибке возвращает 0

_MAPIMP  long int _MAPAPI mapSetMtrLocation(HMAP hMap, long int number, DOUBLEPOINT *location);

  // Выбор значения абсолютной высоты в заданной точке.
  // hMap   - идентификатор открытой основной векторной карты
  // Координаты точки (x,y) задаются в метрах в системе координат
  // векторной карты. Возвращает значение высоты в метрах.
  // В случае ошибки при выборе высоты и в случае необеспеченности
  // заданной точки матричными данными возвращает ERRORHEIGHT.

_MAPIMP double _MAPAPI mapGetHeightValue(HMAP hMap,double x, double y);


  // Выбор значения абсолютной высоты в заданной точке из матрицы
  // с номером number в цепочке.                       
  // hMap   - идентификатор открытой основной векторной карты 
  // number - номер матрицы в цепочке.
  // Координаты точки (x,y) задаются в метрах в системе координат
  // векторной карты. Возвращает значение высоты в метрах.
  // В случае ошибки при выборе высоты и в случае необеспеченности
  // заданной точки матричными данными возвращает ERRORHEIGHT.

_MAPIMP double _MAPAPI mapGetHeightValueOfMtr(HMAP hMap, long int number,
                                              double x, double y);


  // Занесение значения абсолютной высоты в элемент матрицы,
  // соответствующий заданной точке.
  // hMap   - идентификатор открытой основной векторной карты 
  // number - номер матрицы в цепочке.
  // Координаты точки (x,y) и значение высоты (h) задаются в метрах
  // в системе координат векторной карты.
  // В случае ошибки возвращает ноль.

_MAPIMP long int _MAPAPI mapPutHeightValue(HMAP hMap, long int number,
                                           double x, double y, double h);


  // Выбор значения абсолютной высоты в заданной точке из
  // матрицы с наименьшим размером элемента (более точной)
  // hMap   - идентификатор открытой основной векторной карты 
  // Координаты точки (x,y) задаются в метрах в системе координат
  // векторной карты. Возвращает значение высоты в метрах.
  // В случае ошибки при выборе высоты и в случае необеспеченности
  // заданной точки матричными данными возвращает ERRORHEIGHT.

_MAPIMP double _MAPAPI mapGetPrecisionHeightValue(HMAP hMap,double x, double y);


  // Расчет абсолютной высоты методом треугольников в заданной точке
  // по матрице с наименьшим размером элемента (более точной).
  // Высота вычисляется по самой точной матрице высот,а в случае
  // необеспеченности заданной точки данными матриц высот -
  // по самой точной матрице слоев.
  // hMap   - идентификатор открытой основной векторной карты 
  // Координаты точки (x,y) задаются в метрах в системе координат
  // векторной карты. Возвращает значение высоты в метрах.
  // В случае ошибки при выборе высоты и в случае необеспеченности
  // заданной точки матричными данными возвращает ERRORHEIGHT.

_MAPIMP double _MAPAPI mapGetPrecisionHeightTriangle(HMAP hMap,double x, double y);


  // Запросить номер в цепочке для матрицы, расположенной
  // в заданной точке
  // hMap   - идентификатор открытой основной векторной карты 
  // number - порядковый номер, найденной матрицы в точке
  // (1 - первая в данной точке, 2 - вторая ...)
  // При ошибке возвращается ноль

_MAPIMP long int _MAPAPI mapGetMtrNumberInPoint(HMAP hMap,double x, double y,
                                                long int number);


  // Выбор массива значений абсолютных высот, соответствующих
  // логическим элементам, лежащим на заданном отрезке.
  // hMap   - идентификатор открытой основной векторной карты 
  // Координаты точек, задающих начало и конец отрезка
  // (FirstPoint,SecondPoint) задаются в метрах в системе
  // координат векторной карты.
  // Размер массива высот, заданного адресом HeightArray,
  // должен соответствовать запрашиваемому количеству высот
  // (HeightCount), в противном случае возможны ошибки работы
  // с памятью.
  // В случае необеспеченности логического элемента матричными
  // данными его значение равно ERRORHEIGHT (-111111.0 м)
  // В случае ошибки при выборе высот возвращает ноль.

_MAPIMP long int _MAPAPI mapGetHeightArray(HMAP hMap,
                                           double*     HeightArray,
                                           long int    HeightCount,
                                           DOUBLEPOINT*  FirstPoint,
                                           DOUBLEPOINT*  SecondPoint);


  // Запросить размер полного блока матрицы в байтах
  // hMap   - идентификатор открытой основной векторной карты 
  // number - номер файла в цепочке
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtrBlockSize(HMAP hMap,long int number);


  // Запросить размер(тип) элемента матрицы в байтах
  // hMap   - идентификатор открытой основной векторной карты 
  // number - номер файла в цепочке.
  // Возвращаемое значение 1 соответствует типу "unsigned char".
  // Возвращаемое значение 2 соответствует типу "short int".
  // Возвращаемое значение 4 соответствует типу "long int".
  // Возвращаемое значение 8 соответствует типу "double".
  // При ошибке возвращает ноль.

_MAPIMP long int _MAPAPI mapGetMtrElementSize(HMAP hMap,long int number);


  // Запросить вертикальный размер блока матрицы в элементах
  // hMap   - идентификатор открытой основной векторной карты 
  // number - номер файла в цепочке
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtrBlockSide(HMAP hMap,long int number);


  // Запросить горизонтальный размер блока матрицы в элементах
  // hMap   - идентификатор открытой основной векторной карты 
  // number - номер файла в цепочке
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtrBlockWidth(HMAP hMap,long int number);

  // Запросить адрес блока матрицы по номеру строки и столбца
  // Блоки последнего ряда могут иметь усеченный размер
  // hMap   - идентификатор открытой основной векторной карты 
  // number - номер файла в цепочке
  // row, column - строка и столбец блока соотвественно
  // При запросе следующего блока может вернуть прежний адрес
  // При ошибке возвращает ноль, иначе - адрес считанного блока

_MAPIMP char *  _MAPAPI mapGetMtrBlockAddress(HMAP hMap,long int number,
                                              long int row,
                                              long int column);


  // Запросить число строк блоков матрицы
  // hMap   - идентификатор открытой основной векторной карты 
  // number - номер файла в цепочке
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtrBlockRow(HMAP hMap,long int number);


  // Запросить число столбцов блоков матрицы
  // hMap   - идентификатор открытой основной векторной карты 
  // number - номер файла в цепочке
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtrBlockColumn(HMAP hMap,long int number);


  // Запросить число строк элементов в матрице
  // hMap   - идентификатор открытой основной векторной карты 
  // number - номер файла в цепочке
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtrElementRow(HMAP hMap,long int number);


  // Запросить число столбцов элементов в матрице
  // hMap   - идентификатор открытой основной векторной карты
  // number - номер файла в цепочке
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtrElementColumn(HMAP hMap,long int number);


  // Запросить масштаб матрицы
  // hMap   - идентификатор открытой основной векторной карты
  // number - номер файла в цепочке
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtrScale(HMAP hMap,long int number);

  // Запросить значения масштаба нижней и верхней границ видимости матрицы
  // hMap   - идентификатор открытой основной векторной карты
  // number - номер файла в цепочке
  // По адресу bottomScale записывается знаменатель масштаба нижней границы видимости матрицы
  // По адресу topScale записывается знаменатель масштаба верхней границы видимости матрицы
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapGetMtrRangeScaleVisible(HMAP hMap, long int number,
                                                    long int *bottomScale,
                                                    long int *topScale);  


  // Установить значения масштаба нижней и верхней границ видимости матрицы
  // hMap   - идентификатор открытой основной векторной карты
  // number - номер файла в цепочке
  // bottomScale - знаменатель масштаба нижней границы видимости матрицы
  // topScale    - знаменатель масштаба верхней границы видимости матрицы
  //               bottomScale <= topScale, иначе возвращает 0
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapSetMtrRangeScaleVisible(HMAP hMap,long int number,
                             long int bottomScale, long int topScale);   


  // Запросить тип исходной карты
  // hMap   - идентификатор открытой основной векторной карты
  // number - номер файла в цепочке
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtrMapType(HMAP hMap,long int number);


  // Запросить единицу измерения высоты матрицы
  // с номером number в цепочке.
  // Возвращаемые значения :
  //   0-метры, 1-дециметры, 2-сантиметры, 3-миллиметры
  // hMap   - идентификатор открытой основной векторной карты
  // При ошибке возвращает -1

_MAPIMP long int _MAPAPI mapGetMtrMeasure(HMAP hMap,long int number);

  // Запросить данные о проекции матрицы
  // hMap   - идентификатор открытой основной векторной карты
  // number - номер файла в цепочке
  // projectiondata - адрес структуры, в которой будут размещены
  // данные о проекции
  // Структурa MTRPROJECTIONDATA описанa в maptype.h
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtrProjectionData(HMAP hMap, long int number,
                                         MTRPROJECTIONDATA * projectiondata);

  // Запросить данные о проекции матрицы  
  // hMap   - идентификатор открытой основной векторной карты
  // number - номер файла в цепочке
  // mapregister - адрес структуры, в которой будут размещены
  // данные о проекции
  // Структурa MAPREGISTEREX описанa в mapcreat.h
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtrProjectionDataEx(HMAP hMap, long int number,
                                                   MAPREGISTEREX* mapregister);

  // Запросить данные о проекции матрицы по имени файла 
  // name        - имя файла матрицы
  // mapregister - адрес структуры, в которой будут размещены
  // данные о проекции
  // При ошибке возвращает ноль

_MAPIMP  long int _MAPAPI mapGetMtrProjectionDataByName(const char* name,
                                                  MAPREGISTEREX* mapregister);

  // Установить данные о проекции матрицы
  // hMap    - идентификатор открытой основной векторной карты
  // number  - номер матрицы в цепочке.
  // mapregister - адрес структуры, содержащей данные о проекции
  // Структурa MAPREGISTEREX описанa в mapcreat.h
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetMtrProjectionData(HMAP hMap,  
                                                 long int number,
                                                 MAPREGISTEREX* mapregister);


  /*********************************************************
  *                                                        *
  *          УПРАВЛЕНИЕ ОТОБРАЖЕНИЕМ МАТРИЦЫ               *
  *                                                        *
  *********************************************************/

  // Запросить/Установить степень видимости матрицы
  //  hMap   - идентификатор открытой основной векторной карты 
  //  number - номер файла в цепочке
  //  view = 0 - не виден
  //  view = 1 - полная
  //  view = 2 - насыщенная
  //  view = 3 - полупрозрачная
  //  view = 4 - средняя
  //  view = 5 - прозрачная

_MAPIMP long int _MAPAPI mapGetMtrView(HMAP hMap,long int number);
_MAPIMP long int _MAPAPI mapSetMtrView(HMAP hMap,long int number,
                                       long int view);

  // Запросить/Установить порядок отображения матрицы
  //  hMap   - идентификатор открытой основной векторной карты 
  //  number - номер файла в цепочке
  //  order  - порядок (0 - под картой, 1 - над картой)
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapSetMtrViewOrder(HMAP hMap, long int number,
                                            long int order);
_MAPIMP long int _MAPAPI mapGetMtrViewOrder(HMAP hMap, long int number);

  // Поменять очередность отображения матриц (mtr) в цепочке  
  //   oldNumber - номер файла в цепочке
  //   newNumber - устанавливаемый номер файла в цепочке
  //  При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapChangeOrderMtrShow(HMAP hMap, long int oldNumber,
                                                          long int newNumber);

  // Установить/Запросить глубину тени матрицы высот
  //  hMap  - идентификатор открытой основной векторной карты
  //  value - флаг наложения тени (от 0 до 16)
  //   MTRSHADOW_NONE   =  0,   // Тень отсутствует
  //   MTRSHADOW_PALE   =  1,   // Бледная
  //   MTRSHADOW_WEAK   =  2,   // Слабая
  //   MTRSHADOW_MIDDLE =  4,   // Средняя
  //   MTRSHADOW_HEAVY  =  8,   // Сильная
  //   MTRSHADOW_DEEP   = 16,   // Глубокая

_MAPIMP long int _MAPAPI mapGetMtrShadow(HMAP hMap);
_MAPIMP long int _MAPAPI mapSetMtrShadow(HMAP hMap,long int value);


  // Установить/Запросить интенсивность тени матрицы высот
  //  hMap  - идентификатор открытой основной векторной карты
  //  value - интенсивность тени (от 0 до 100)
_MAPIMP long int _MAPAPI mapGetMtrShadowIntensity(HMAP hMap);       
_MAPIMP long int _MAPAPI mapSetMtrShadowIntensity(HMAP hMap,long int value);

  // Запросить число цветов в палитре матриц высот
  // ВСЕ МАТРИЦЫ ВЫСОТ РАБОТАЮТ С ОДНОЙ ПАЛИТРОЙ
  //  hMap   - идентификатор открытой основной векторной карты
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtrPaletteCount(HMAP hMap);


  // Запросить текущую палитру матрицы высот
  // (с учетом яркости/контрастности)
  // hMap    - идентификатор открытой основной векторной карты 
  // palette - адрес области для размещения палитры
  // count   - число считываемых элементов палитры
  // (размер области в байтах / 4)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtrPalette(HMAP hMap,
                                          COLORREF * palette,
                                          long int count);

  // Запросить эталонную палитру матрицы высот             
  // (без учета яркости/контрасности)
  // hMap    - идентификатор открытой основной векторной карты 
  // palette - адрес области для размещения палитры
  // count   - число считываемых элементов палитры
  // (размер области в байтах / 4)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtrStandardPalette(HMAP hMap,
                                                  COLORREF * palette,
                                                  long int count);

  // Установить описание палитры матрицы высот
  // hMap    - идентификатор открытой основной векторной карты
  // palette - адрес устанавливаемой палитры
  // count   - число элементов в новой палитре
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetMtrPalette(HMAP hMap,
                                          COLORREF * palette,
                                          long int count);


  // Запросить яркость палитры матрицы высот
  // hMap   - идентификатор открытой основной векторной карты 

_MAPIMP long int _MAPAPI mapGetMtrBright (HMAP hMap);


  // Установить яркость палитры матрицы высот
  // hMap   - идентификатор открытой основной векторной карты 
  // bright - значение яркости (-16..+16) 
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetMtrBright (HMAP hMap, long int bright);


  // Запросить контрастность палитры матрицы высот
  // hMap     - идентификатор открытой основной векторной карты 
  // значение контраста (-16..+16) 
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtrContrast (HMAP hMap);


  // Получить значение полупрозрачности матрицы высот по номеру в карте
  // hMap     - идентификатор открытой основной векторной карты 
  // number - номер матрицы в карте
  // При ошибке возвращает -1
_MAPIMP  long int _MAPAPI mapGetMtrTranslucency(HMAP hMap, long int number);

  // Установить контрастность палитры матрицы высот
  // hMap     - идентификатор открытой основной векторной карты 
  // contrast - значение контраста (-16..+16) 
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetMtrContrast (HMAP hMap, long int contrast);

 
  // Установить значение полупрозрачности матрицы высот по номеру в карте
  // hMap     - идентификатор открытой основной векторной карты
  // number - номер матрицы в карте 
  // translucency - значение полупрозрачности (0 - 100)
  // при ошибке возвращает -1
  
_MAPIMP  long int _MAPAPI mapSetMtrTranslucency (HMAP hMap, long int number, long int translucency);


 // Установить значение полупрозрачности всех матриц высот в карте
  // hMap     - идентификатор открытой основной векторной карты 
  // translucency - значение полупрозрачности (0 - 100)
  // при ошибке возвращает -1
  
_MAPIMP  long int _MAPAPI mapSetCommonMtrTranslucency (HMAP hMap, long int translucency);


  // Установить контрастность палитры матрицы высот
  // hMap     - идентификатор открытой основной векторной карты 
  // contrast - значение контраста (-16..+16) 
  // При ошибке возвращает ноль
  // Запросить стиль палитры матрицы высот
  // hMap     - идентификатор открытой основной векторной карты 
  //     = 0  -  полутоновая палитра
  //     = 1  -  цветная палитра

_MAPIMP long int _MAPAPI mapGetMtrColorStyle (HMAP hMap);


  // Установить стиль палитры матрицы высот
  // hMap     - идентификатор открытой основной векторной карты 
  //   colorstyle = 0  -  полутоновая палитра
  //   colorstyle = 1  -  цветная палитра
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetMtrColorStyle (HMAP hMap, long int colorstyle);


  // Установить цвет диапазона высот матрицы с номером
  // number в цепочке
  // hMap        - идентификатор открытой основной векторной карты 
  // colornumber - номер диапазона высот
  // color       - цвет диапазона
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetMtrColor(HMAP hMap, long int number,
                                        long int colornumber,
                                        COLORREF color);


  // Установить рамку матрицы по метрике замкнутого объекта
  // Замкнутый объект должен иметь не менее 4-х точек
  // hMap       - идентификатор открытой основной векторной карты 
  // number     - номер файла в цепочке
  // info       - замкнутый объект карты
  // После выполнения функции отображение матрицы ограничится заданной областью
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapSetMtrBorder(HMAP hMap,long int number,HOBJ info);


  // Удалить рамку матрицы
  // hMap       - идентификатор открытой основной векторной карты 
  // number     - номер файла в цепочке
  // После выполнения функции отображение матрицы будет полным
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapDeleteMtrBorder(HMAP hMap,long int number);


  // Определение существования рамки матрицы
  // hMap       - идентификатор открытой основной векторной карты 
  // number     - номер файла в цепочке
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapCheckExistenceMtrBorder(HMAP hMap,long int number);


  // Определение способа отображения матрицы(относительно рамки)    
  // hMap       - идентификатор открытой основной векторной карты 
  // number     - номер файла в цепочке
  // Возвращает 1 - при отображении матрицы по рамке
  //            0 - при отображении матрицы без учета рамки
  // При ошибке возвращает -1

_MAPIMP long int _MAPAPI mapCheckShowMtrByBorder(HMAP hMap,long int number);


  // Установка отображения матрицы по рамке
  // hMap       - идентификатор открытой основной векторной карты 
  // number     - номер файла в цепочке
  // value = 1 - отобразить матрицу  по рамке
  //       = 0 - отобразить матрицыу  без учета рамки

_MAPIMP long int _MAPAPI mapShowMtrByBorder(HMAP hMap,long int number, long int value);  


  // Запросить объект рамки матрицы               
  // hMap       - идентификатор открытой основной векторной карты 
  // number     - номер файла в цепочке
  // info       - идентификатор объекта рамки матрицы
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtrBorder(HMAP hMap,long int number,HOBJ info);


  // Определить координаты и порядковый номер точки рамки, которая 
  // входит в прямоугольник Габариты растра(матрицы) и
  // имеет наименьшее удаление от точки pointIn (координаты в метрах).
  // По адресу pointOut записываются координаты найденной точки в метрах
  // hMap       - идентификатор открытой основной векторной карты 
  // number     - номер файла в цепочке
  // При ошибке или отсутствии рамки возвращает 0.

_MAPIMP long int _MAPAPI mapGetImmediatePointOfMtrBorder(HMAP hMap, long int number,
                                                DOUBLEPOINT* pointIn,
                                                DOUBLEPOINT* pointOut);




  /*********************************************************
  *                                                        *
  *          ТРЕХМЕРНОЕ ОТОБРАЖЕНИЕ МАТРИЦЫ ВЫСОТ          *
  *                                                        *
  *********************************************************/

  // Открыть сеанс трехмерной визуализации местности,
  // обеспеченной открытыми матрицами высот
  // hMap   - идентификатор открытой основной векторной карты 
  // number - номер файла в цепочке
  // width  - ширина изображения,
  // height - высота изображения.
  // Возвращает идентификатор открытого сеанса (TMtr3D*)
  // При ошибке возвращает ноль

_MAPIMP HMTR3D _MAPAPI mapOpenMtr3D(HMAP hMap, long int width, long int height);


  // Закрыть сеанс трехмерной визуализации местности
  // hMtr3D - идентификатор открытого сеанса 3D визуализации

_MAPIMP void _MAPAPI mapCloseMtr3D(HMTR3D hMtr3D);


  // Отобразить фрагмент местности в трехмерном виде
  // hMtr3D - идентификатор открытого сеанса 3D визуализации
  // parm   - параметры отображения (см. MAPTYPE.H)
  // hDC    - контекст отображения
  // Устаревшая функция (рекомендуется пользоваться mapPaintMtr3Dx)

_MAPIMP void _MAPAPI mapPaintMtr3D(HMTR3D hMtr3D, HDC hDC, MTR3DVIEW* parm);


  // Отобразить фрагмент местности в трехмерном виде
  // hMtr3D - идентификатор открытого сеанса 3D визуализации
  // parm   - параметры отображения (см. MAPTYPE.H)
  // hDC    - контекст отображения

_MAPIMP void _MAPAPI mapPaintMtr3Dx(HMTR3D hMtr3D, HDC hDC, MTR3DVIEWEX* parm);


  // Построить BITMAP с изображением фрагмента местности в трехмерном виде
  // hMtr3D - идентификатор открытого сеанса 3D визуализации
  // parm   - параметры отображения (см. MAPTYPE.H)
  // При ошибке возвращает 0

_MAPIMP HBITMAP _MAPAPI mapBuildMtr3D(HMTR3D hMtr3D, MTR3DVIEW* parm);


  // Построить BITMAP с изображением фрагмента местности в трехмерном виде
  // hMtr3D - идентификатор открытого сеанса 3D визуализации
  // parm   - параметры отображения (см. MAPTYPE.H)
  // При ошибке возвращает 0

_MAPIMP HBITMAP _MAPAPI mapBuildMtr3Dx(HMTR3D hMtr3D, MTR3DVIEWEX* parm);




  /*********************************************************
  *                                                        *
  *          ОПИСАНИЕ ФУНКЦИЙ ДЛЯ СОЗДАНИЯ МАТРИЦ          *
  *                                                        *
  *********************************************************/

  // Создать матричную карту
  // mtrname - имя файла создаваемой матрицы
  // Возвращает идентификатор открытой матричной карты
  // Структуры BUILDMTW,MTRPROJECTIONDATA описаны в maptype.h
  // При ошибке возвращает ноль

_MAPIMP HMAP _MAPAPI mapCreateMtw(const char * mtrname,
                                  BUILDMTW * mtrparm,
                                  MTRPROJECTIONDATA * mtrprojectiondata);


  // Вывод прямоугольного участка матрицы
  //   hMap - идентификатор открытой матричной карты (TMapAccess *)
  //   number - номер файла в цепочке
  //   bits - адрес логического начала выводимого участка
  //          (см. beginning)
  //   left - смещение участка матрицы слева (в элементах)
  //   top - смещение участка матрицы сверху (в элементах)
  //   width - ширина участка матрицы (в элементах)
  //   height - высота участка матрицы (в элементах)
  //   beginning - определяет, на какую строку указывает bits :
  //     если beginning == 0, то bits указывает
  //       на начало верхней строки выводимого участка
  //     если beginning == 1, то bits указывает
  //       на начало нижней строки выводимого участка.
  //   Размер участка, заданного адресом bits, должен быть не менее
  //   (width * height * размер элемента матрицы в байтах),
  //   в противном случае возможны ошибки работы с памятью.
  //   Запрос размера элемента матрицы в байтах
  //   - функция mapGetMtrElementSize.
  //   Высоты выводимого участка должны быть записаны
  //   в области bits в единицах измерения высот данной матрицы.
  //   Запрос единицы измерения высоты матрицы
  //   - функция mapGetMtrMeasure.
  // При ошибке возвращает 0

_MAPIMP long int  _MAPAPI mapPutMtrFrame(HMAP  hMap,
                                         long int number,
                                         char* bits,
                                         long int   left,
                                         long int   top,
                                         long int   width,
                                         long int   height,
                                         long int   beginning/* = 0*/); 


  // Чтение прямоугольного участка матрицы в заданную область памяти
  //   hMap - идентификатор открытой матричной карты (TMapAccess *)
  //   number - номер файла в цепочке
  //   bits - указатель на начало области памяти
  //   left - смещение участка матрицы слева (в элементах)
  //   top - смещение участка матрицы сверху (в элементах)
  //   width - ширина участка матрицы (в элементах)
  //   height - высота участка матрицы (в элементах)
  //   widthinbyte - ширинa участка матрицы в байтах
  //   Размер участка, заданного адресом bits, должен быть не менее
  //   (width * height * размер элемента матрицы в байтах),
  //   в противном случае возможны ошибки работы с памятью.
  //   Запрос размера элемента матрицы в байтах
  //   - функция mapGetMtrElementSize.
  //   Высоты выводимого участка записываются в область bits
  //   в единицах измерения высот данной матрицы.
  //   Запрос единицы измерения высоты матрицы
  //   - функция mapGetMtrMeasure.
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapGetMtrFrame(HMAP hMap,
                                        long int number,
                                        char* bits,
                                        long int left,  long int top,
                                        long int width, long int height,
#ifdef __cplusplus  
                                        long int widthinbyte = 0); 
#else
                                        long int widthinbyte); 
#endif


  // Запросить диапазон высот рельефа (суммарный диапазон всех матриц
  // высот, слоев, TIN-моделей)
  //   hMap - идентификатор открытой карты (TMapAccess *)
  //   minvalue - минимальная высота диапазона в метрах
  //   maxvalue - максимальная высота диапазона в метрах
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapGetReliefRange(HMAP hMap,
                                           double* minvalue,
                                           double* maxvalue);  


  // Занести в матрицу диапазон значений высот
  //   hMap - идентификатор открытой основной карты (TMapAccess *)
  //   number - номер матрицы в цепочке
  //   minvalue - минимальная высота диапазона в метрах
  //   maxvalue - максимальная высота диапазона в метрах
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapSetMtrShowRange(HMAP hMap,
                                            long int number,
                                            double minvalue,
                                            double maxvalue);


  // Запросить диапазон значений высот матрицы           
  //   hMap - идентификатор открытой основной карты (TMapAccess *)
  //   number - номер матрицы в цепочке
  //   minvalue - минимальная высота диапазона в метрах
  //   maxvalue - максимальная высота диапазона в метрах
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapGetMtrShowRange(HMAP hMap,
                                            long int number,
                                            double* minvalue,
                                            double* maxvalue);


  // Установить диапазон высот отображаемых элементов    
  // цепочки матриц. Элемент матрицы не отображается,
  // если он содержит высоту, не входящую в заданный диапазон.
  // Установленный диапазон в матрицу не заносится.
  //   hMap - идентификатор открытой основной карты (TMapAccess *)
  //   minvalue - минимальная высота диапазона в метрах
  //   maxvalue - максимальная высота диапазона в метрах
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapSetMtrHeightRange(HMAP hMap,
                                              double minvalue,
                                              double maxvalue);


  // Установить суммарный диапазон высот отображаемых элементов  
  // цепочки матриц. Суммарный диапазон включает в себя диапазоны
  // всех матриц цепочки.
  // hMap - идентификатор открытой основной карты (TMapAccess *)
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapResetMtrHeightRange(HMAP hMap);

                                                                 
  // Настроить параметры отображения цепочки матриц при изменении
  // числа цветов палитры и диапазона отображаемых высот.
  // hMap - идентификатор открытой основной карты (TMapAccess *)
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapSetMtrShowVariables(HMAP hMap);


  // Установить условное имя матрицы
  // hMap   - идентификатор открытой основной карты (TMapAccess *)
  // number - номер матрицы в цепочке
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapSetMtrUserName(HMAP hMap,
                                           long int number,
                                           char * username);


  // Запросить условное имя матрицы     
  //   hMap - идентификатор открытой основной карты (TMapAccess *)
  //   number - номер матрицы в цепочке
  // При ошибке возвращает 0

_MAPIMP const char * _MAPAPI mapGetMtrUserName(HMAP hMap,
                                               long int number);

#ifndef HIDEMTQ          

  /*********************************************************
  *                                                        *
  *                    МАТРИЦЫ КАЧЕСТВ                     *
  *                                                        *
  *            Вместо высоты - любое значение,             *
  * для отображения задаются цвета по диапазонам значений  *
  *                                                        *
  *********************************************************/

  // Открыть матрицу качеств
  // Возвращает идентификатор открытой матричной карты
  // mtqname - имя открываемого файла 
  // mode - режим чтения/записи (GENERIC_READ, GENERIC_WRITE или 0)
  // GENERIC_READ - все данные только на чтение
  // При ошибке возвращает ноль

_MAPIMP HMAP _MAPAPI mapOpenMtq(const char * mtqname,
#ifdef __cplusplus
                                long int mode = 0);
#else
                                long int mode);
#endif

  // Закрыть матрицу качеств
  // hMap - идентификатор открытой основной карты
  // number - номер закрываемой матрицы
  // если number = 0, закрываются все матрицы в окне
  // ЧТОБЫ ОСВОБОДИТЬ ВСЕ РЕСУРСЫ - НУЖНО ВЫЗВАТЬ mapCloseData(hMap)

_MAPIMP void _MAPAPI mapCloseMtq(HMAP hMap,
#ifdef __cplusplus
                                 long int number = 0);
#else
                                 long int number);
#endif


  // Открыть данные матрицы качеств в заданном районе работ
  // (добавить в цепочку матриц качеств)
  // hMap - идентификатор открытой основной карты
  // mtqname - имя открываемого файла 
  // mode - режим чтения/записи (GENERIC_READ, GENERIC_WRITE или 0)
  // GENERIC_READ - все данные только на чтение
  // Возвращает номер файла в цепочке матриц
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapOpenMtqForMap(HMAP hMap,
                                          const char * mtqname,
                                          long int mode);

  // Закрыть данные матрицы качеств в заданном районе работ
  // hMap   - идентификатор открытой основной карты
  // number - номер матричного файла в цепочке
  // Если number = 0, закрываются все матричные данные
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapCloseMtqForMap(HMAP hMap,
                                           long int number);

  // Запросить имя файла данных матрицы качеств
  // hMap - идентификатор открытой основной карты
  // number - номер файла в цепочке
  // При ошибке возвращает ноль

_MAPIMP const char * _MAPAPI mapGetMtqName(HMAP hMap,long int number);

  // Запросить число открытых файлов матриц качеств
  // hMap - идентификатор открытой основной карты
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtqCount(HMAP hMap);

  // Запросить описание файла матрицы качеств
  // hMap   - идентификатор открытой основной карты
  // number - номер файла в цепочке
  // describe - адрес структуры, в которой будет размещено
  // описание матрицы
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtqDescribe(HMAP hMap,long int number,
                                           MTRDESCRIBE * describe);


  // Запросить размер элемента матрицы качеств в байтах
  // hMap   - идентификатор открытой основной карты
  // number - номер файла в цепочке
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtqElementSize(HMAP hMap,long int number);


  // Запросить/Установить отображение матрицы качеств
  // hMap - идентификатор открытой основной карты
  // number - номер файла в цепочке
  // view : 0 - матрицу не отображать, 1 - отображать

_MAPIMP long int _MAPAPI mapGetMtqView(HMAP hMap,long int number);
_MAPIMP long int _MAPAPI mapSetMtqView(HMAP hMap,long int number,
                                       long int view);

  // Запросить/Установить порядок отображения матрицы качеств
  // hMap   - идентификатор открытой основной карты
  // number - номер файла в цепочке
  // order  - порядок отображения (0 - под картой, 1 - над картой)
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapSetMtqViewOrder(HMAP hMap, long int number,
                                            long int order);
_MAPIMP long int _MAPAPI mapGetMtqViewOrder(HMAP hMap, long int number);

  // Поменять очередность отображения матриц (mtq) в цепочке  
  //   oldNumber - номер файла в цепочке
  //   newNumber - устанавливаемый номер файла в цепочке
  //  При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapChangeOrderMtqShow(HMAP hMap, long int oldNumber,
                                                          long int newNumber);

  // Запросить/Установить тень матрицы качества
  // hMap   - идентификатор открытой основной карты
  // number - номер файла в цепочке
  // value  - флаг наложения тени (1 - тень есть, 0 - нет тени)

_MAPIMP long int _MAPAPI mapGetMtqShadow(HMAP hMap,long int number);
_MAPIMP long int _MAPAPI mapSetMtqShadow(HMAP hMap,long int number,
                                         long int value);
                                         
  // Создать матрицу качеств
  // Возвращает идентификатор открытой матричной карты (TMapAccess*)
  // Структуры BUILDMTW,MTRPROJECTIONDATA описаны в maptype.h
  // palette - указатель палитры
  // countpalette - количество цветов в палитре
  // name - имя файла создаваемой матрицы

_MAPIMP HMAP _MAPAPI mapCreateMtq(const char* name,
                                  BUILDMTW *  parm,
                                  MTRPROJECTIONDATA *projectiondata,
                                  COLORREF* palette, int countpalette);


  // Записать прямоугольный участок матрицы качеств из памяти
  //   hMap - идентификатор открытой матричной карты
  //   number - номер матрицы в цепочке.
  //   bits - адрес логического начала записываемого участка
  //          (см. beginning)
  //   left - смещение участка матрицы слева (в элементах)
  //   top - смещение участка матрицы сверху (в элементах)
  //   width - ширина участка матрицы (в элементах)
  //   height - высота участка матрицы (в элементах)
  //   beginning - определяет, на какую строку указывает bits :
  //     если beginning == 0, то bits указывает
  //       на начало верхней строки выводимого участка
  //     если beginning == 1, то bits указывает
  //       на начало нижней строки выводимого участка
  // При ошибке возвращает 0

_MAPIMP long int  _MAPAPI mapPutMtqFrame(HMAP  hMap,
                                         long int number,
                                         char* bits,
                                         long int   left,
                                         long int   top,
                                         long int   width,
                                         long int   height,
                                         long int   beginning);

  // Установить диапазон отображаемых элементов матрицы качеств
  //   hMap - идентификатор открытой матричной карты
  //   number - номер матрицы в цепочке.
  //   minvalue,maxvalue - границы диапазона
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapSetMtqShowRange(HMAP hMap,
                                            long int number,
                                            double minvalue,
                                            double maxvalue);


  // Запросить описание палитры матрицы качеств
  // hMap    - идентификатор открытой матричной карты
  // number  - номер матрицы в цепочке.
  // palette - адрес области для размещения палитры
  // count   - число считываемых элементов палитры
  // (размер области в байтах / 4)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtqPalette(HMAP hMap,
                                          COLORREF * palette,
                                          long int count,
                                          long int number);


  // Запросить эталонную палитру матрицы качеств
  // (без учета яркости и контрастности)
  // hMap    - идентификатор открытой матричной карты
  // number  - номер матрицы в цепочке.
  // palette - адрес области для размещения палитры
  // count   - число считываемых элементов палитры
  // (размер области в байтах / 4)
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtqStandardPalette(HMAP hMap,
                                                  COLORREF * palette,
                                                  long int count,
                                                  long int number);

  // Установить описание палитры матрицы качеств
  // hMap    - идентификатор открытой матричной карты
  // number  - номер матрицы в цепочке.
  // palette - адрес устанавливаемой палитры
  // count   - число элементов в новой палитре
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetMtqPalette(HMAP hMap,
                                          COLORREF * palette,
                                          long int count,
                                          long int number);


  // Сохранить в файле описание палитры матрицы качеств
  // palette - адрес сохраняемой палитры
  //           (если palette = 0, то в файл записывается текущая
  //            палитра матрицы, установленная функцией mapSetMtqPalette)
  // count   - число элементов сохраняемой палитры
  // number  - номер файла в цепочке
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSaveMtqPalette(HMAP hMap,               
                                           COLORREF * palette,
                                           long int count,
                                           long int number);

  // Установить описание двухинтервальной палитры матрицы качеств
  // Двухинтервальная палитра формируется с использованием трёх
  // цветов (начального, промежуточного, конечного), задающих границы
  // двух интервалов. Составляющие интенсивности цветов внутри интервала
  // равномерно изменяются от начального цвета интервала к конечному.
  // firstColor - адрес начального цвета первого интервала
  // mediumColor - адрес промежуточного цвета (конечного первого
  //               интервала, начального второго интервала)
  // lastColor - адрес конечного цвета второго интервала
  // count  - число элементов в палитре
  // mediumPosition - номер промежуточного цвета в палитре,
  //                  (число от 0 до count-1)
  // number - номер файла в цепочке
  // При ошибке возвращает ноль                      

_MAPIMP long int _MAPAPI mapSetMtqTwoIntervalPalette(HMAP hMap,  
                                               COLORREF  firstColor,
                                               COLORREF  mediumColor,
                                               COLORREF  lastColor,
                                               long int count,
                                               long int mediumPosition,
                                               long int number);

  // Запросить/Установить яркость палитры матрицы качеств
  // hMap    - идентификатор открытой матричной карты
  // number  - номер матрицы в цепочке.
  // bright  - яркость (-16..+16)

_MAPIMP long int _MAPAPI mapGetMtqBright(HMAP hMap, long int number);
_MAPIMP long int _MAPAPI mapSetMtqBright(HMAP hMap, long int number,
                                         long int bright);

  // Запросить/Установить контрастность палитры матрицы качеств
  // hMap    - идентификатор открытой матричной карты
  // number  - номер матрицы в цепочке.
  // contrast- контраст (-16..+16)
 
_MAPIMP long int _MAPAPI mapGetMtqContrast(HMAP hMap, long int number);
_MAPIMP long int _MAPAPI mapSetMtqContrast(HMAP hMap, long int number,
                                           long int contrast);


  // Получить/Установить значение полупрозрачности матрицы качеств по номеру в карте
  // hMap     - идентификатор открытой основной векторной карты 
  // number - номер матрицы качеств в карте
  // translucency - значение полупрозрачности (0 - 100)
  // при ошибке возвращает -1
_MAPIMP long int _MAPAPI mapGetMtqTranslucency(HMAP hMap, long int number);
_MAPIMP long int _MAPAPI mapSetMtqTranslucency(HMAP hMap, long int number,
                                           long int translucency);


 // Установить значение полупрозрачности всех матриц качеств в карте
  // hMap     - идентификатор открытой основной векторной карты 
  // translucency - значение полупрозрачности (0 - 100)
  // при ошибке возвращает -1
  
_MAPIMP  long int _MAPAPI mapSetCommonMtqTranslucency (HMAP hMap, long int translucency);


 // Запросить число цветов в палитре матрицы качеств
  // hMap    - идентификатор открытой матричной карты
  // number  - номер матрицы в цепочке.
  // При ошибке возвращается 0

_MAPIMP long int _MAPAPI mapGetMtqPaletteCount(HMAP hMap,long int number);


  // Запросить описание диапазона значений матрицы с номером
  // hMap    - идентификатор открытой матричной карты
  // number  - номер матрицы в цепочке.
  // colornumber - номер диапазона значений
  // colordesc - адрес структуры, в которой будет размещено
  // описание диапазона значений
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtqColorDescEx(HMAP hMap,long int number,
                                              long int colornumber,
                                              MTRCOLORDESCEX * colordesc);

  // Установить цвет диапазона значений элементов матрицы с номером
  // hMap    - идентификатор открытой матричной карты
  // number  - номер матрицы в цепочке.
  // colornumber - номер диапазона значений
  // color - цвет для диапазона
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetMtqColor(HMAP hMap,long int number,
                                        long int colornumber,
                                        COLORREF color);


  // Выбор значения в заданной точке из матрицы
  // с номером number в цепочке.
  // hMap    - идентификатор открытой матричной карты
  // number  - номер матрицы в цепочке.
  // Координаты точки (x,y) задаются в метрах.
  // Возвращает значение высоты в метрах.
  // В случае ошибки при выборе высоты и в случае необеспеченности
  // заданной точки матричными данными возвращает ERRORHEIGHT.

_MAPIMP double _MAPAPI mapGetMtqValue(HMAP hMap,long int number,
                                      double x, double y);


  // Занесение значения в элемент матрицы,
  // соответствующий заданной точке.
  // hMap    - идентификатор открытой матричной карты
  // number  - номер матрицы в цепочке.
  // Координаты точки (x,y) и значение высоты (h) задаются в метрах
  // В случае ошибки возвращает ноль.

_MAPIMP long int _MAPAPI mapPutMtqValue(HMAP hMap, long int number,
                                        double x, double y, double h);

  // Запросить фактические габариты отображаемой матрицы в метрах в районе работ   
  // При отображение матрицы по рамке возвращаются габариты рамки
  // hMap    - идентификатор открытой матричной карты
  // number  - номер матрицы в цепочке.
  // frame   - адрес для размещения результата
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetActualMtqFrame(HMAP hMap,DFRAME *frame,
                                              long int number);

  // Запросить масштаб матрицы      
  // hMap    - идентификатор открытой матричной карты
  // number  - номер матрицы в цепочке.
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtqScale(HMAP hMap,long int number);


  // Запросить данные о проекции матричных данных 
  // hMap    - идентификатор открытой матричной карты
  // number  - номер матрицы в цепочке.
  // projectiondata - адрес структуры, в которой будут размещены
  // данные о проекции
  // Структурa MTRPROJECTIONDATA описанa в maptype.h
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapGetMtqProjectionData
                      (HMAP hMap,long int number,
                       MTRPROJECTIONDATA * projectiondata);


  // Установить данные о проекции матричных данных
  // hMap    - идентификатор открытой матричной карты
  // number  - номер матрицы в цепочке.
  // mapregister - адрес структуры, содержащей данные о проекции
  // Структурa MAPREGISTEREX описанa в mapcreat.h
  // При ошибке возвращает ноль

_MAPIMP long int _MAPAPI mapSetMtqProjectionData(HMAP hMap,      
                                                 long int number,
                                                 MAPREGISTEREX* mapregister);

  // Чтение прямоугольного участка матрицы качеств в заданную область памяти
  //   hMap - идентификатор открытой матричной карты (TMapAccess *)
  //   number - номер матрицы в цепочке.
  //   bits - указатель на начало области памяти
  //   left - смещение участка матрицы слева (в элементах)
  //   top - смещение участка матрицы сверху (в элементах)
  //   width - ширина участка матрицы (в элементах)
  //   height - высота участка матрицы (в элементах)
  //   widthinbyte - ширинa участка матрицы в байтах
  //   Размер участка, заданного адресом bits, должен быть не менее
  //   (width * height * размер элемента матрицы в байтах),
  //   в противном случае возможны ошибки работы с памятью.
  //   Запрос размера элемента матрицы качеств в байтах
  //   - функция mapGetMtqElementSize.
  //   Высоты выводимого участка записываются в область bits
  //   в единицах измерения значений данной матрицы качеств.
  //   Запрос единицы измерения значений матрицы качеств
  //   - функция mapGetMtqMeasure.
  // При ошибке возвращает 0

_MAPIMP long int _MAPAPI mapGetMtqFrame(HMAP hMap,      
                                        long int number,
                                        char* bits,
                                        long int left,  long int top,
                                        long int width, long int height,
#ifdef __cplusplus
                                        long int widthinbyte = 0);
#else
                                        long int widthinbyte);
#endif


  // Запросить единицу измерения значений матрицы качеств
  // с номером number в цепочке.
  // Возвращает значение поля Unit структуры параметров создания
  // матрицы BUILDMTW
  // Возвращаемые значения :
  //   0-"метры", 1-"дециметры", 2-"сантиметры", 3-"миллиметры"
  // При ошибке возвращает -1

_MAPIMP long int _MAPAPI mapGetMtqMeasure(HMAP hMap,long int number);  

 // Построение зоны затопления по набору отметок уровня воды.
 // В результате построения формируется матрица качеств, элементы
 // которой содержат глубины в зоне затопления.
 // Габариты матрицы качеств определяются координатами точек с
 // отметками уровня воды (массив pointArray) и величиной расширения
 // габаритов области (areaExtension).
 // hMap    - исходная карта для построения зоны,
 // mtqName - полное имя создаваемой матрицы качеств,
 // pointArray - адрес массива точек с отметками уровня воды
 //   Координаты точек (pointArray->X,pointArray->Y) и значения уровня
 //   (pointArray->H) задаются в метрах в системе координат векторной
 //   карты,
 // pointCount - число точек в массиве pointArray
 //   Размер в байтах массива, заданного адресом pointArray, должен
 //   быть не менее pointCount * sizeof(XYHDOUBLE), в противном случае
 //   возможны ошибки работы с памятью,
 // areaExtension - положительное число, задающее величину
 //   расширения габаритов области в метрах,
 // minDepth - положительное число, задающее минимальную глубину
 //   зоны затопления в метрах (глубины, меньшие minDepth в матрицу
 //   качеств не заносятся),
 // handle - идентификатор окна диалога, которому посылаются
 // сообщения о ходе процесса :
 //   0x0581 - сообщение о проценте выполненных работ (в WPARAM),
 //   если процесс должен быть принудительно завершен, в ответ
 //   должно вернуться значение 0x0581.
 //   Если handle равно нулю - сообщения не посылаются.
 // При ошибке возвращает 0.

_MAPIMP long int _MAPAPI mapBuildFloodZone(HMAP hMap,            
                                           const char * mtqName,
                                           XYHDOUBLE * pointArray,
                                           long int pointCount,
                                           double areaExtension,
                                           double minDepth,
                                           HMESSAGE handle);


 // Построение матрицы качеств по массиву значений характеристики качества.
 // hMap - исходная карта для построения матрицы качеств
 // mtqName - полное имя создаваемой матрицы качеств
 // palette - адрес палитры создаваемой матрицы качеств,
 //           если palette равно нулю - используется палитра по умолчанию
 // countpalette - количество цветов в палитре
 // pointArray - адрес массива значений характеристики качества
 //              Координаты точек (pointArray->X,pointArray->Y) задаются в метрах
 //              в системе координат векторной карты
 // pointCount - число точек в массиве pointArray
 //              Размер в байтах массива, заданного адресом pointArray, должен
 //              быть не менее pointCount * sizeof(XYHDOUBLE), в противном случае
 //              возможны ошибки работы с памятью
 // elemSizeMeters - размер стороны элементарного участка в метрах на местности
 //                  (дискрет матрицы)
 // minValue,maxValue - диапазон значений характеристики качества создаваемой матрицы
 //                     качеств, если minValue >= maxValue - в матрицу заносится
 //                     фактический диапазон значений из массива pointArray
 // handle - идентификатор окна диалога, которому посылаются
 //          сообщения о ходе процесса :
 //          0x0581 - сообщение о проценте выполненных работ (в WPARAM),
 //          если процесс должен быть принудительно завершен, в ответ
 //          должно вернуться значение 0x0581.
 //          Если handle равно нулю - сообщения не посылаются.
 // При ошибке возвращает 0.

_MAPIMP long int _MAPAPI mapBuildMtq(HMAP hMap,            
                                     const char * mtqName,
                                     const COLORREF* palette,
                                     long int countpalette,
                                     const XYHDOUBLE * pointArray,
                                     long int pointCount,
                                     double elemSizeMeters,
                                     double minValue,
                                     double maxValue,
                                     HMESSAGE handle);

 // Формирование палитры матрицы качеств
 // Для формирования результирующей палитры (resultPalette) используется исходная
 // палитра (skeletPalette), количество цветов результирующей палитры
 // (resultColorCount) и флаг плавного изменения цветов (smoothColorModification).
 // skeletPalette - исходная (скелетная) палитра, массив размером sizeof(COLORREF)*256,
 //                 содержащий граничные цвета интервалов, разделённые пустыми
 //                 элементами (значение 0xFFFFFFFF);
 // resultPalette - результирующая палитра, массив размером sizeof(COLORREF)*256;
 // resultColorCount - количество формируемых цветов результирующей палитры
 //                    (не более 256);
 // smoothColorModification - флаг плавного изменения цветов результирующей палитры :
 //   0 - внутренние цвета интервала повторяют начальный цвет интервала,
 //   1 - составляющие интенсивности внутренних цветов интервала равномерно
 //       изменяются от начального цвета интервала к конечному.
 // Цвета исходной палитры переносятся в соответствующие позиции результирующей
 // палитры, остальные цвета результирующей палитры заполняются поинтервально в
 // зависимости от значения флага smoothColorModification.
 // При ошибке возвращает 0.

_MAPIMP long int _MAPAPI mapMakeMtqPalette(COLORREF* skeletPalette,   
                                           COLORREF* resultPalette,
                                           long int resultColorCount,
                                           long int smoothColorModification);

 // Построение матрицы поверхности (матрицы качеств или матрицы высот)
 // по данным векторной карты. Если mtrparm->FileMtw равно 1, то строится
 // матрица высот (*.mtw), иначе строится матрица качеств (*.mtq).
 // hmap - исходная карта для построения матрицы
 // mtrname - полное имя создаваемой матрицы
 // mtrparm - параметры создаваемой матрицы (структура BUILDSURFACE описана в maptype.h)
 // При ошибке возвращает 0.

_MAPIMP long int _MAPAPI mapBuildMatrixSurface(HMAP hmap,  
                                               const char * mtrname,
                                               BUILDSURFACE * mtrparm);

#endif  // !HIDEMTQ

#ifdef __cplusplus
}  // extern "C"
#endif

#endif // MTRAPI_H
