
#ifndef M3DTYPEH
#define M3DTYPEH

#include "maptype.h"
#include "m3dgdi.h"
#include <gl\gl.h>

typedef long int  HM3D;       // ИДЕНТИФИКАТОР ОПИСАНИЯ ХАРАКТЕРИСТИК
                              // 3D-РИСОВАНИЯ

typedef long int  HMAP3D;     // ИДЕНТИФИКАТОР ОПИСАНИЯ 3D-МОДЕЛИ

typedef long int  HEXOBJ3D;   // ИДЕНТИФИКАТОР ОПИСАНИЯ ПАРАМЕТРОВ РИСОВАНИЯ
                              // 3D-ИЗОБРАЖЕНИЯ ПРИМЕРА ОБЪЕКТА

typedef long int  HBINDTEX;   // ИДЕНТИФИКАТОР ОПИСАНИЯ ЗАГРУЗКИ ТЕКСТУР В
                              // КОНТЕКСТ OPENGL

//---------------------------------------------------------------------------
//   Вид рельефа                                                
//---------------------------------------------------------------------------
#define SURFACE_NONE              0      // Отсутствует
#define SURFACE_CARCAS            1      // Каркасная модель
#define SURFACE_IMAGEMAP          2      // Изображение карты
#define SURFACE_TRANSPARENT       3      // Изображение карты прозрачное
#define SURFACE_BACKGROUND        4      // Фон

//---------------------------------------------------------------------------
//   Вид отображения объектов
//---------------------------------------------------------------------------
#define OBJECT_NORMAL       1      // Нормальный
#define OBJECT_CARCAS       2      // Каркасный
#define OBJECT_NONE         0      // Отсутствуют

//---------------------------------------------------------------------------
//   Тип проекции отображения
//---------------------------------------------------------------------------
#define PROJECT_PERSPECTIVE 0      // Перспективная
#define PROJECT_ORTHO       1      // Ортогональная

//---------------------------------------------------------------------------
//   Размер поверхностных текстур по умолчанию
//---------------------------------------------------------------------------
#define SIZESURFACETEX    512

//---------------------------------------------------------------------------
// ПРЯМОУГОЛЬНИК РИСОВАНИЯ И ПРОСМОТРА 3D-ИЗОБРАЖЕНИЯ
//---------------------------------------------------------------------------
typedef struct RECTVIEWPORT
{
  long int Left;         // Координаты левого нижнего угла области отображения
  long int Bottom;       // (в пикселах). Начало координат лежит в левом нижнем
                         // углу окна
  long int Width;        // Ширина области отображения (в пикселах)
  long int Height;       // Высота области отображения (в пикселах)
}
  RECTVIEWPORT;


//---------------------------------------------------------------------------
// ПАРАМЕТРЫ ОТКРЫТИЯ 3D-МОДЕЛИ
//---------------------------------------------------------------------------
typedef struct M3D_OPENPARM  // 128 байт
{
  HWND      HandleForm;      // Идентификатор окна 3D-модели
  HWND      HandleFormMess;  // Идентификатор главного окна

  IMG3DRGBA Color;           // Цвет фона окна 3D-модели
  RECT      RectViewport;    // Прямоугольник области отображения

  DFRAME    SelectFrame;     // Область отображения в метрах (при
                             // превышении габаритов района данная
                             // область будет обрезана по габаритам)

  HMAP      Map;             // Идентификатор карты

  char      Reserve[52];
}
  M3D_OPENDATA;


//---------------------------------------------------------------------------
// ПАРАМЕТРЫ РИСОВАНИЯ 3D-МОДЕЛИ
//---------------------------------------------------------------------------
typedef struct M3D_PAINTPARM  // 256 байт
{
  long int ModelType;      // Вид модели:
                           //  SURFACE_CARCAS   - каркасная однотонная
                           //  SURFACE_IMAGEMAP - поверхностная с наложением
                           //                     текстуры,содержащей изображение
                           //                     карты (растра, матрицы)
                           //  SURFACE_TRANSPARENT - изображение карты прозрачное
                           //  SURFACE_BACKGROUND  - фон

  long int ModelStep;      // Шаг сетки построения модели (в ячейках сетки)
                           // Размер сетки 480х480, размер шага 1,2,4,8...

  long int SunAngle;       // Угол положения Солнца (градусы)

  long int Obj3DViewType;  // Вид отображения объектов на модели, имеющих 3D-вид:
                           //  OBJECT_NONE      - отсутствуют
                           //  OBJECT_NORMAL    - нормальный
                           //  OBJECT_CARCAS    - каркасный

  long int LightType;      // Вид освещения:
                           //  0 - естественное освещение (Солнце)
                           //  1 - прожектор (от наблюдателя)

  long int UpdateObjects;  // Флаг обновления списка объектов           
                           // Использовать при изменении вида объектов

  long int ViewRange;      // Флаг дальности видимости объектов на модели:
                           //  0 - по окну, 1 - все(уменьшает скорость отображения)

  long int Update;         // Принудительное обновление

  long int ShowCenter;     // Флаг отображения точки-центра вращения модели:
                           //  0 - нет, 1 - есть

  long int ObserverPos;    // Положение наблюдателя относительно центра модели:
                           //  0 - слежение за центром вращения модели,
                           //  1 - наблюдатель в центре вращения модели

  long int ObjNot3DViewType; // Вид отображения объектов на модели, не имеющих 3D-вида
                             //  OBJECT_NONE    - отсутствуют
                             //  OBJECT_NORMAL  - нормальный

  long int SizeSurfaceTex;   // Размер поверхностной текстуры        

  char     Reserve[128];   // Резерв

  double   ObserverHeight; // Высота положения наблюдателя
                           // (в метрах относительно модели)

  double   RotateAngle;    // Угол поворота модели относительно вертикальной
                           // оси (градусы)
  double   ViewAngle;      // Угол наклона модели относительно горизонтальной
                           // оси, принадлежащей плоскости отображения (градусы)
  double   CareenAngle;    // Угол крена (наклона) модели относительно вертикальной
                           // оси, принадлежащей плоскости отображения (градусы)

//  double   ModelLift;      // Подъем модели (смещение модели вверх)(отн. единицы)

  double   VerticalScale;  // Коэффициент масштабирования модели по высоте

  double   ModelScale;     // Текущий коэффициент масштабирования модели
                           // относительно начального (kScaleMatrixBeg)

  double   DiffuseLight;   // Изменение рассеянной составляющей источника
                           // освещения модели от заданного в начале(-1 ... 1)

  XYHDOUBLE PointMove;     // Координаты точки перемещения по модели
                           // в метрах в системе координат карты
}
  M3D_PAINTPARM;


//---------------------------------------------------------------------------
// ОПИСАНИЕ РАЙОНА, ОТОБРАЖАЕМОГО НА 3D-МОДЕЛИ
//---------------------------------------------------------------------------
typedef struct M3D_DATA
{
  HMAP     Map;          // Идентификатор открытых данных
  long int DataScale;    // Знаменатель единичного масштаба данных

  DFRAME   FrameRegion;  // Габариты отображаемой части района в метрах
                         // на местности(см. систему координат в mapapi.h):
                         // X1,Y1 - левый нижний,  X2,Y2 - правый верхний

  double   WidthModel;   // Ширина и высота отображаемой части района
  double   HeightModel;  // в метрах на местности

  double   CenterX;      // Координаты центра отображаемой части района
  double   CenterY;      // в метрах
  double   CenterH;      //

  double   MinH;         // Минимальная, максимальная высоты района
  double   MaxH;         // в метрах (по матрице высот)
}
  M3D_DATA;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+ ТАБЛИЦА ФУНКЦИЙ ВИЗУАЛИЗАЦИИ ТРЕХМЕРНОГО ИЗОБРАЖЕНИЯ ОБЪЕКТОВ +
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

typedef struct V3D_IDENT  // ИДЕНТИФИКАТОРЫ, НЕОБХОДИМЫЕ ДЛЯ 3D-РИСОВАНИЯ
{                         // ОБЪЕКТОВ
  HOBJ      Obj;          // идентификатор объекта
  HMAP3D    Map3d;        // идентификатор описания 3d-модели или ноль
  HMAP      Map;          // идентификатор базовой карты

  // Необязательные параметры

  HSITE     Site;         // идентификатор пользовательской карты, если
                          // рисование идет для нее, или 0
  HRSC      Rsc;          // идентификатор ресурсов карты, для которой идет
                          // рисование, или 0, если параметры не из ресурсов
  HBINDTEX  BindTex;      // идентификатор описания загрузки текстур или 0,
                          // если текстур нет
  long int  FlagPaintObj; // Флаг способа рисования объекта:
                          //   0 - новое рисование,
                          //   1 - перерисовка объекта, без изменения параметров
                          //   2 - перерисовка объекта, как прозрачный
                          //   3 - новое рисование, как прозрачный
  float  kChangeSizeTex;  // Коэффициент изменения размера текстуры для вывода  
                          // по объекту
  char      Reserve[8];
}
  V3D_IDENT;

// --------------------------------------------------------------------------
// Типы функций 3D-визуализации объектов
//    Вход:
//          parmFunc    - адрес структуры параметров функции
//          ident       - адрес набора идентификаторов для 3d-рисования
//          countSelect - количество выбранных частей объекта или ноль
//          select      - адрес массива структур описания выбранных частей
//                        объекта или ноль
// --------------------------------------------------------------------------
typedef void _fastcall (*VISUAL3DTABLE)(char* parmFunc, V3D_IDENT* ident,
                                        long countSelect=0, SELECTPART* select=0);

#define VISUAL3DCOUNT  256       // Размер таблицы функций

//-----------------------------------------------------------------
// Список aдpесов функций pисования трехмерного изображения объектов
//-----------------------------------------------------------------
extern VISUAL3DTABLE MainFunc3D[VISUAL3DCOUNT];

//----------------------------------------------------------------------------
// Номер последней доступной функции
//----------------------------------------------------------------------------
extern int LastFunc3DNumber;


//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//+ ТАБЛИЦА ФУНКЦИЙ ВИЗУАЛИЗАЦИИ ТРЕХМЕРНОГО ИЗОБРАЖЕНИЯ ЭЛЕМЕНТОВ ОБЪЕКТОВ +
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

// --------------------------------------------------------------------------
// Типы функций 3D-визуализации элементов объектов в заданной точке
//    Вход:
//        dataElem   - копия метрики элемента относительно нуля знака
//                     (изменяется внутри функции)
//        point      - заданная точка поверхности
//        angle      - угол поворота элемента относительно горизонтальной
//                     оси(X)(рассчитывается при повороте знака по метрике объекта)
//        kScale     - адрес массива коэффициентов масштабирования знака
//        texFlag    - флаг наложения текстуры:
//                       0 - нет,
//                       1 - накладываем с растяжкой,
//                       2 - текстура повторяется по горизонтали,
//                       3 - текстура повторяется по вертикали,
//                       4 - текстура повторяется по обоим направлениям.
//                     (текстура должна быть загружена заранее)
//        selectFlag - флаг выделения элемента
// --------------------------------------------------------------------------
typedef void _fastcall (*ELEMENT3DTABLE)(char* dataElem, IMG3DPOINT point,
                      double angle, float* kScale, char texFlag=0,
                      char selectFlag=0, float* wrapTex=0, char* flagMeasure=0);

#define ELEMENT3DCOUNT  20    // Размер таблицы функций рисования элементов
                              // в заданной точке

//-----------------------------------------------------------------------------
// Список aдpесов функций pисования трехмерного изображения элементов объектов
// в заданной точке
//-----------------------------------------------------------------------------
extern ELEMENT3DTABLE ElemFunc3D[ELEMENT3DCOUNT];


//---------------------------------------------------------------------------
// ЗНАЧЕНИЯ ФЛАГА ПОВОРОТА В ЗАДАННЫЕ ПОЗИЦИИ 3D-ИЗОБРАЖЕНИЯ ПРИМЕРА ОБЪЕКТА
//---------------------------------------------------------------------------
#define  POS_ANY    0    // поворот произвольный, определяется заданным углом
#define  POS_START  1    // поворот в начальное положение
#define  POS_X      2    // положительная ось X вперед(на наблюдателя)
#define  POS_NX    -2    // отрицательная ось X вперед
#define  POS_Y      3    // положительная ось Y вперед
#define  POS_NY    -3    // отрицательная ось Y вперед
#define  POS_Z      4    // положительная ось Z вперед
#define  POS_NZ    -4    // отрицательная ось Z вперед
// --------------------------------------------------------------------------

typedef struct IMG3DPOINT IMG3DSCALE; // КОЭФФИЦИЕНТЫ МАСШТАБИРОВАНИЯ
                                      // ПО ОСЯМ КООРДИНАТ X, Y, Z

//---------------------------------------------------------------------------
// СТРУКТУРА ОПИСАНИЯ ПАРАМЕТРОВ ТЕКСТУРЫ ДЛЯ ЗАГРУЗКИ В OPENGL
//---------------------------------------------------------------------------
typedef struct PARMTEXTURE
{
  char Transparent;          // Прозрачность текстуры (0-нет, 1-прозрачна)
  char Smooth;               // Размытость текстуры (0-нет, 1-размыта)
  char Wrap;                 // Флаг повторяемости текстуры (см. m3dgdi.h)
  char Reserve[5];
}
  PARMTEXTURE;

//---------------------------------------------------------------------------
// Флаг очистки всех буферов OpenGL при 3D-рисовании
//---------------------------------------------------------------------------
#define GL_ALL_BUFFER_BIT   GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT|GL_STENCIL_BUFFER_BIT|GL_ACCUM_BUFFER_BIT


#endif

